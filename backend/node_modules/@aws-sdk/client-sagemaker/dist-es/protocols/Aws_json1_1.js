import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { _json, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, expectUnion as __expectUnion, LazyJsonString as __LazyJsonString, limitedParseDouble as __limitedParseDouble, limitedParseFloat32 as __limitedParseFloat32, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@aws-sdk/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { ConflictException, ResourceInUse, ResourceLimitExceeded, ResourceNotFound, } from "../models/models_0";
import { TrialComponentParameterValue, } from "../models/models_1";
import { SageMakerServiceException as __BaseException } from "../models/SageMakerServiceException";
export const se_AddAssociationCommand = async (input, context) => {
    const headers = sharedHeaders("AddAssociation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AddTagsCommand = async (input, context) => {
    const headers = sharedHeaders("AddTags");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateTrialComponentCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateTrialComponent");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchDescribeModelPackageCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDescribeModelPackage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateActionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAction");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAlgorithmCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAlgorithm");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAppCommand = async (input, context) => {
    const headers = sharedHeaders("CreateApp");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAppImageConfigCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAppImageConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateArtifactCommand = async (input, context) => {
    const headers = sharedHeaders("CreateArtifact");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAutoMLJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAutoMLJob");
    let body;
    body = JSON.stringify(se_CreateAutoMLJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAutoMLJobV2Command = async (input, context) => {
    const headers = sharedHeaders("CreateAutoMLJobV2");
    let body;
    body = JSON.stringify(se_CreateAutoMLJobV2Request(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCodeRepositoryCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCodeRepository");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCompilationJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCompilationJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateContextCommand = async (input, context) => {
    const headers = sharedHeaders("CreateContext");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDataQualityJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDataQualityJobDefinition");
    let body;
    body = JSON.stringify(se_CreateDataQualityJobDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDeviceFleetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDeviceFleet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDomainCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEdgeDeploymentPlanCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEdgeDeploymentPlan");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEdgeDeploymentStageCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEdgeDeploymentStage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEdgePackagingJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEdgePackagingJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEndpoint");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEndpointConfigCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEndpointConfig");
    let body;
    body = JSON.stringify(se_CreateEndpointConfigInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("CreateExperiment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateFeatureGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateFeatureGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateFlowDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateFlowDefinition");
    let body;
    body = JSON.stringify(se_CreateFlowDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateHubCommand = async (input, context) => {
    const headers = sharedHeaders("CreateHub");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateHumanTaskUiCommand = async (input, context) => {
    const headers = sharedHeaders("CreateHumanTaskUi");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateHyperParameterTuningJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateHyperParameterTuningJob");
    let body;
    body = JSON.stringify(se_CreateHyperParameterTuningJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateImageCommand = async (input, context) => {
    const headers = sharedHeaders("CreateImage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateImageVersionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateImageVersion");
    let body;
    body = JSON.stringify(se_CreateImageVersionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateInferenceExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("CreateInferenceExperiment");
    let body;
    body = JSON.stringify(se_CreateInferenceExperimentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateInferenceRecommendationsJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateInferenceRecommendationsJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateLabelingJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateLabelingJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateModelCommand = async (input, context) => {
    const headers = sharedHeaders("CreateModel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateModelBiasJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateModelBiasJobDefinition");
    let body;
    body = JSON.stringify(se_CreateModelBiasJobDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateModelCardCommand = async (input, context) => {
    const headers = sharedHeaders("CreateModelCard");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateModelCardExportJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateModelCardExportJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateModelExplainabilityJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateModelExplainabilityJobDefinition");
    let body;
    body = JSON.stringify(se_CreateModelExplainabilityJobDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateModelPackageCommand = async (input, context) => {
    const headers = sharedHeaders("CreateModelPackage");
    let body;
    body = JSON.stringify(se_CreateModelPackageInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateModelPackageGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateModelPackageGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateModelQualityJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateModelQualityJobDefinition");
    let body;
    body = JSON.stringify(se_CreateModelQualityJobDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateMonitoringScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("CreateMonitoringSchedule");
    let body;
    body = JSON.stringify(se_CreateMonitoringScheduleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateNotebookInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateNotebookInstance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateNotebookInstanceLifecycleConfigCommand = async (input, context) => {
    const headers = sharedHeaders("CreateNotebookInstanceLifecycleConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreatePipelineCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePipeline");
    let body;
    body = JSON.stringify(se_CreatePipelineRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreatePresignedDomainUrlCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePresignedDomainUrl");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreatePresignedNotebookInstanceUrlCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePresignedNotebookInstanceUrl");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateProcessingJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateProcessingJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateProjectCommand = async (input, context) => {
    const headers = sharedHeaders("CreateProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateSpaceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateSpace");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateStudioLifecycleConfigCommand = async (input, context) => {
    const headers = sharedHeaders("CreateStudioLifecycleConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTrainingJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTrainingJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTransformJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTransformJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTrialCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTrial");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTrialComponentCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTrialComponent");
    let body;
    body = JSON.stringify(se_CreateTrialComponentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateUserProfileCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUserProfile");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateWorkforceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateWorkforce");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateWorkteamCommand = async (input, context) => {
    const headers = sharedHeaders("CreateWorkteam");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteActionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAction");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAlgorithmCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAlgorithm");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAppCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteApp");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAppImageConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAppImageConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteArtifactCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteArtifact");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAssociationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAssociation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCodeRepositoryCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCodeRepository");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteContextCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteContext");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDataQualityJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDataQualityJobDefinition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDeviceFleetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDeviceFleet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDomainCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEdgeDeploymentPlanCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEdgeDeploymentPlan");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEdgeDeploymentStageCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEdgeDeploymentStage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEndpoint");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEndpointConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEndpointConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteExperiment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteFeatureGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFeatureGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteFlowDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFlowDefinition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteHubCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteHub");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteHubContentCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteHubContent");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteHumanTaskUiCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteHumanTaskUi");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteImageCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteImage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteImageVersionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteImageVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteInferenceExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteInferenceExperiment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteModelCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteModel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteModelBiasJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteModelBiasJobDefinition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteModelCardCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteModelCard");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteModelExplainabilityJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteModelExplainabilityJobDefinition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteModelPackageCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteModelPackage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteModelPackageGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteModelPackageGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteModelPackageGroupPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteModelPackageGroupPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteModelQualityJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteModelQualityJobDefinition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteMonitoringScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMonitoringSchedule");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteNotebookInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteNotebookInstance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteNotebookInstanceLifecycleConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteNotebookInstanceLifecycleConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeletePipelineCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePipeline");
    let body;
    body = JSON.stringify(se_DeletePipelineRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteProjectCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSpaceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSpace");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteStudioLifecycleConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteStudioLifecycleConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTagsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTags");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTrialCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTrial");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTrialComponentCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTrialComponent");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteUserProfileCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUserProfile");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteWorkforceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWorkforce");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteWorkteamCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWorkteam");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeregisterDevicesCommand = async (input, context) => {
    const headers = sharedHeaders("DeregisterDevices");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeActionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAction");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAlgorithmCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAlgorithm");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAppCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeApp");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAppImageConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAppImageConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeArtifactCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeArtifact");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAutoMLJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAutoMLJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAutoMLJobV2Command = async (input, context) => {
    const headers = sharedHeaders("DescribeAutoMLJobV2");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCodeRepositoryCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCodeRepository");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCompilationJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCompilationJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeContextCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeContext");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDataQualityJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDataQualityJobDefinition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDeviceCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDevice");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDeviceFleetCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDeviceFleet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDomainCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEdgeDeploymentPlanCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEdgeDeploymentPlan");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEdgePackagingJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEdgePackagingJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEndpoint");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEndpointConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEndpointConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeExperiment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFeatureGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFeatureGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFeatureMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFeatureMetadata");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFlowDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFlowDefinition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeHubCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeHub");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeHubContentCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeHubContent");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeHumanTaskUiCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeHumanTaskUi");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeHyperParameterTuningJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeHyperParameterTuningJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeImageCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeImage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeImageVersionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeImageVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeInferenceExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeInferenceExperiment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeInferenceRecommendationsJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeInferenceRecommendationsJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeLabelingJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeLabelingJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeLineageGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeLineageGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeModelCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeModel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeModelBiasJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeModelBiasJobDefinition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeModelCardCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeModelCard");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeModelCardExportJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeModelCardExportJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeModelExplainabilityJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeModelExplainabilityJobDefinition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeModelPackageCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeModelPackage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeModelPackageGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeModelPackageGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeModelQualityJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeModelQualityJobDefinition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeMonitoringScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMonitoringSchedule");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeNotebookInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeNotebookInstance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeNotebookInstanceLifecycleConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeNotebookInstanceLifecycleConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribePipelineCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePipeline");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribePipelineDefinitionForExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePipelineDefinitionForExecution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribePipelineExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePipelineExecution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeProcessingJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeProcessingJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeProjectCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSpaceCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSpace");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeStudioLifecycleConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeStudioLifecycleConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSubscribedWorkteamCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSubscribedWorkteam");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTrainingJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTrainingJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTransformJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTransformJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTrialCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTrial");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTrialComponentCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTrialComponent");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeUserProfileCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeUserProfile");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeWorkforceCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeWorkforce");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeWorkteamCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeWorkteam");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisableSagemakerServicecatalogPortfolioCommand = async (input, context) => {
    const headers = sharedHeaders("DisableSagemakerServicecatalogPortfolio");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateTrialComponentCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateTrialComponent");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableSagemakerServicecatalogPortfolioCommand = async (input, context) => {
    const headers = sharedHeaders("EnableSagemakerServicecatalogPortfolio");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDeviceFleetReportCommand = async (input, context) => {
    const headers = sharedHeaders("GetDeviceFleetReport");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetLineageGroupPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetLineageGroupPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetModelPackageGroupPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetModelPackageGroupPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSagemakerServicecatalogPortfolioStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetSagemakerServicecatalogPortfolioStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSearchSuggestionsCommand = async (input, context) => {
    const headers = sharedHeaders("GetSearchSuggestions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportHubContentCommand = async (input, context) => {
    const headers = sharedHeaders("ImportHubContent");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListActionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListActions");
    let body;
    body = JSON.stringify(se_ListActionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAlgorithmsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAlgorithms");
    let body;
    body = JSON.stringify(se_ListAlgorithmsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAliasesCommand = async (input, context) => {
    const headers = sharedHeaders("ListAliases");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAppImageConfigsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAppImageConfigs");
    let body;
    body = JSON.stringify(se_ListAppImageConfigsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAppsCommand = async (input, context) => {
    const headers = sharedHeaders("ListApps");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListArtifactsCommand = async (input, context) => {
    const headers = sharedHeaders("ListArtifacts");
    let body;
    body = JSON.stringify(se_ListArtifactsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAssociationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAssociations");
    let body;
    body = JSON.stringify(se_ListAssociationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAutoMLJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAutoMLJobs");
    let body;
    body = JSON.stringify(se_ListAutoMLJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCandidatesForAutoMLJobCommand = async (input, context) => {
    const headers = sharedHeaders("ListCandidatesForAutoMLJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCodeRepositoriesCommand = async (input, context) => {
    const headers = sharedHeaders("ListCodeRepositories");
    let body;
    body = JSON.stringify(se_ListCodeRepositoriesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCompilationJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCompilationJobs");
    let body;
    body = JSON.stringify(se_ListCompilationJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListContextsCommand = async (input, context) => {
    const headers = sharedHeaders("ListContexts");
    let body;
    body = JSON.stringify(se_ListContextsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDataQualityJobDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDataQualityJobDefinitions");
    let body;
    body = JSON.stringify(se_ListDataQualityJobDefinitionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDeviceFleetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDeviceFleets");
    let body;
    body = JSON.stringify(se_ListDeviceFleetsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDevicesCommand = async (input, context) => {
    const headers = sharedHeaders("ListDevices");
    let body;
    body = JSON.stringify(se_ListDevicesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDomainsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDomains");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEdgeDeploymentPlansCommand = async (input, context) => {
    const headers = sharedHeaders("ListEdgeDeploymentPlans");
    let body;
    body = JSON.stringify(se_ListEdgeDeploymentPlansRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEdgePackagingJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEdgePackagingJobs");
    let body;
    body = JSON.stringify(se_ListEdgePackagingJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEndpointConfigsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEndpointConfigs");
    let body;
    body = JSON.stringify(se_ListEndpointConfigsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEndpointsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEndpoints");
    let body;
    body = JSON.stringify(se_ListEndpointsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListExperimentsCommand = async (input, context) => {
    const headers = sharedHeaders("ListExperiments");
    let body;
    body = JSON.stringify(se_ListExperimentsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListFeatureGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListFeatureGroups");
    let body;
    body = JSON.stringify(se_ListFeatureGroupsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListFlowDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListFlowDefinitions");
    let body;
    body = JSON.stringify(se_ListFlowDefinitionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListHubContentsCommand = async (input, context) => {
    const headers = sharedHeaders("ListHubContents");
    let body;
    body = JSON.stringify(se_ListHubContentsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListHubContentVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListHubContentVersions");
    let body;
    body = JSON.stringify(se_ListHubContentVersionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListHubsCommand = async (input, context) => {
    const headers = sharedHeaders("ListHubs");
    let body;
    body = JSON.stringify(se_ListHubsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListHumanTaskUisCommand = async (input, context) => {
    const headers = sharedHeaders("ListHumanTaskUis");
    let body;
    body = JSON.stringify(se_ListHumanTaskUisRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListHyperParameterTuningJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListHyperParameterTuningJobs");
    let body;
    body = JSON.stringify(se_ListHyperParameterTuningJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListImagesCommand = async (input, context) => {
    const headers = sharedHeaders("ListImages");
    let body;
    body = JSON.stringify(se_ListImagesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListImageVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListImageVersions");
    let body;
    body = JSON.stringify(se_ListImageVersionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListInferenceExperimentsCommand = async (input, context) => {
    const headers = sharedHeaders("ListInferenceExperiments");
    let body;
    body = JSON.stringify(se_ListInferenceExperimentsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListInferenceRecommendationsJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListInferenceRecommendationsJobs");
    let body;
    body = JSON.stringify(se_ListInferenceRecommendationsJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListInferenceRecommendationsJobStepsCommand = async (input, context) => {
    const headers = sharedHeaders("ListInferenceRecommendationsJobSteps");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListLabelingJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListLabelingJobs");
    let body;
    body = JSON.stringify(se_ListLabelingJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListLabelingJobsForWorkteamCommand = async (input, context) => {
    const headers = sharedHeaders("ListLabelingJobsForWorkteam");
    let body;
    body = JSON.stringify(se_ListLabelingJobsForWorkteamRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListLineageGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListLineageGroups");
    let body;
    body = JSON.stringify(se_ListLineageGroupsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListModelBiasJobDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelBiasJobDefinitions");
    let body;
    body = JSON.stringify(se_ListModelBiasJobDefinitionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListModelCardExportJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelCardExportJobs");
    let body;
    body = JSON.stringify(se_ListModelCardExportJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListModelCardsCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelCards");
    let body;
    body = JSON.stringify(se_ListModelCardsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListModelCardVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelCardVersions");
    let body;
    body = JSON.stringify(se_ListModelCardVersionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListModelExplainabilityJobDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelExplainabilityJobDefinitions");
    let body;
    body = JSON.stringify(se_ListModelExplainabilityJobDefinitionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListModelMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelMetadata");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListModelPackageGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelPackageGroups");
    let body;
    body = JSON.stringify(se_ListModelPackageGroupsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListModelPackagesCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelPackages");
    let body;
    body = JSON.stringify(se_ListModelPackagesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListModelQualityJobDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelQualityJobDefinitions");
    let body;
    body = JSON.stringify(se_ListModelQualityJobDefinitionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListModelsCommand = async (input, context) => {
    const headers = sharedHeaders("ListModels");
    let body;
    body = JSON.stringify(se_ListModelsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMonitoringAlertHistoryCommand = async (input, context) => {
    const headers = sharedHeaders("ListMonitoringAlertHistory");
    let body;
    body = JSON.stringify(se_ListMonitoringAlertHistoryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMonitoringAlertsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMonitoringAlerts");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMonitoringExecutionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMonitoringExecutions");
    let body;
    body = JSON.stringify(se_ListMonitoringExecutionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMonitoringSchedulesCommand = async (input, context) => {
    const headers = sharedHeaders("ListMonitoringSchedules");
    let body;
    body = JSON.stringify(se_ListMonitoringSchedulesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListNotebookInstanceLifecycleConfigsCommand = async (input, context) => {
    const headers = sharedHeaders("ListNotebookInstanceLifecycleConfigs");
    let body;
    body = JSON.stringify(se_ListNotebookInstanceLifecycleConfigsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListNotebookInstancesCommand = async (input, context) => {
    const headers = sharedHeaders("ListNotebookInstances");
    let body;
    body = JSON.stringify(se_ListNotebookInstancesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPipelineExecutionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListPipelineExecutions");
    let body;
    body = JSON.stringify(se_ListPipelineExecutionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPipelineExecutionStepsCommand = async (input, context) => {
    const headers = sharedHeaders("ListPipelineExecutionSteps");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPipelineParametersForExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("ListPipelineParametersForExecution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPipelinesCommand = async (input, context) => {
    const headers = sharedHeaders("ListPipelines");
    let body;
    body = JSON.stringify(se_ListPipelinesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListProcessingJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListProcessingJobs");
    let body;
    body = JSON.stringify(se_ListProcessingJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListProjectsCommand = async (input, context) => {
    const headers = sharedHeaders("ListProjects");
    let body;
    body = JSON.stringify(se_ListProjectsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSpacesCommand = async (input, context) => {
    const headers = sharedHeaders("ListSpaces");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListStageDevicesCommand = async (input, context) => {
    const headers = sharedHeaders("ListStageDevices");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListStudioLifecycleConfigsCommand = async (input, context) => {
    const headers = sharedHeaders("ListStudioLifecycleConfigs");
    let body;
    body = JSON.stringify(se_ListStudioLifecycleConfigsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSubscribedWorkteamsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSubscribedWorkteams");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTags");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTrainingJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTrainingJobs");
    let body;
    body = JSON.stringify(se_ListTrainingJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTrainingJobsForHyperParameterTuningJobCommand = async (input, context) => {
    const headers = sharedHeaders("ListTrainingJobsForHyperParameterTuningJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTransformJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTransformJobs");
    let body;
    body = JSON.stringify(se_ListTransformJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTrialComponentsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTrialComponents");
    let body;
    body = JSON.stringify(se_ListTrialComponentsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTrialsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTrials");
    let body;
    body = JSON.stringify(se_ListTrialsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListUserProfilesCommand = async (input, context) => {
    const headers = sharedHeaders("ListUserProfiles");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListWorkforcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListWorkforces");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListWorkteamsCommand = async (input, context) => {
    const headers = sharedHeaders("ListWorkteams");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutModelPackageGroupPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutModelPackageGroupPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_QueryLineageCommand = async (input, context) => {
    const headers = sharedHeaders("QueryLineage");
    let body;
    body = JSON.stringify(se_QueryLineageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterDevicesCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterDevices");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RenderUiTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("RenderUiTemplate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RetryPipelineExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("RetryPipelineExecution");
    let body;
    body = JSON.stringify(se_RetryPipelineExecutionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SearchCommand = async (input, context) => {
    const headers = sharedHeaders("Search");
    let body;
    body = JSON.stringify(se_SearchRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SendPipelineExecutionStepFailureCommand = async (input, context) => {
    const headers = sharedHeaders("SendPipelineExecutionStepFailure");
    let body;
    body = JSON.stringify(se_SendPipelineExecutionStepFailureRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SendPipelineExecutionStepSuccessCommand = async (input, context) => {
    const headers = sharedHeaders("SendPipelineExecutionStepSuccess");
    let body;
    body = JSON.stringify(se_SendPipelineExecutionStepSuccessRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartEdgeDeploymentStageCommand = async (input, context) => {
    const headers = sharedHeaders("StartEdgeDeploymentStage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartInferenceExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("StartInferenceExperiment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartMonitoringScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("StartMonitoringSchedule");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartNotebookInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("StartNotebookInstance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartPipelineExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("StartPipelineExecution");
    let body;
    body = JSON.stringify(se_StartPipelineExecutionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopAutoMLJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopAutoMLJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopCompilationJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopCompilationJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopEdgeDeploymentStageCommand = async (input, context) => {
    const headers = sharedHeaders("StopEdgeDeploymentStage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopEdgePackagingJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopEdgePackagingJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopHyperParameterTuningJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopHyperParameterTuningJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopInferenceExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("StopInferenceExperiment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopInferenceRecommendationsJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopInferenceRecommendationsJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopLabelingJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopLabelingJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopMonitoringScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("StopMonitoringSchedule");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopNotebookInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("StopNotebookInstance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopPipelineExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("StopPipelineExecution");
    let body;
    body = JSON.stringify(se_StopPipelineExecutionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopProcessingJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopProcessingJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopTrainingJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopTrainingJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopTransformJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopTransformJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateActionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAction");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateAppImageConfigCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAppImageConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateArtifactCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateArtifact");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateCodeRepositoryCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCodeRepository");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateContextCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateContext");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDeviceFleetCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDeviceFleet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDevicesCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDevices");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDomainCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateEndpoint");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateEndpointWeightsAndCapacitiesCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateEndpointWeightsAndCapacities");
    let body;
    body = JSON.stringify(se_UpdateEndpointWeightsAndCapacitiesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateExperiment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateFeatureGroupCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateFeatureGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateFeatureMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateFeatureMetadata");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateHubCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateHub");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateImageCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateImage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateImageVersionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateImageVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateInferenceExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateInferenceExperiment");
    let body;
    body = JSON.stringify(se_UpdateInferenceExperimentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateModelCardCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateModelCard");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateModelPackageCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateModelPackage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateMonitoringAlertCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateMonitoringAlert");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateMonitoringScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateMonitoringSchedule");
    let body;
    body = JSON.stringify(se_UpdateMonitoringScheduleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateNotebookInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateNotebookInstance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateNotebookInstanceLifecycleConfigCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateNotebookInstanceLifecycleConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdatePipelineCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePipeline");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdatePipelineExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePipelineExecution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateProjectCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateSpaceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateSpace");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateTrainingJobCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTrainingJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateTrialCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTrial");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateTrialComponentCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTrialComponent");
    let body;
    body = JSON.stringify(se_UpdateTrialComponentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateUserProfileCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateUserProfile");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateWorkforceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateWorkforce");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateWorkteamCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateWorkteam");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AddAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AddAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AddAssociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_AddTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AddTagsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AddTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_AssociateTrialComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssociateTrialComponentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateTrialComponentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_BatchDescribeModelPackageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchDescribeModelPackageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchDescribeModelPackageOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchDescribeModelPackageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_CreateActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateAlgorithmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateAlgorithmCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateAlgorithmCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_CreateAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateAppCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateAppCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateAppImageConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateAppImageConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateAppImageConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateArtifactCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateArtifactCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateArtifactCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateAutoMLJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateAutoMLJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateAutoMLJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateAutoMLJobV2Command = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateAutoMLJobV2CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateAutoMLJobV2CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateCodeRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateCodeRepositoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateCodeRepositoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_CreateCompilationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateCompilationJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateCompilationJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateContextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateContextCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateContextCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateDataQualityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDataQualityJobDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateDataQualityJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateDeviceFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDeviceFleetCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CreateDeviceFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateEdgeDeploymentPlanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateEdgeDeploymentPlanCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateEdgeDeploymentPlanCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateEdgeDeploymentStageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateEdgeDeploymentStageCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CreateEdgeDeploymentStageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateEdgePackagingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateEdgePackagingJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CreateEdgePackagingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateEndpointConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateEndpointConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateEndpointConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateExperimentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateExperimentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateFeatureGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateFeatureGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateFeatureGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateFlowDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateFlowDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateFlowDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateHubCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateHubCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateHubCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateHumanTaskUiCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateHumanTaskUiCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateHumanTaskUiCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateHyperParameterTuningJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateHyperParameterTuningJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateHyperParameterTuningJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateImageVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateImageVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateImageVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateInferenceExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateInferenceExperimentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateInferenceExperimentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateInferenceRecommendationsJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateInferenceRecommendationsJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateInferenceRecommendationsJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateLabelingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateLabelingJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLabelingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateModelCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateModelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateModelBiasJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateModelBiasJobDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateModelBiasJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateModelCardCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateModelCardCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateModelCardCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateModelCardExportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateModelCardExportJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateModelCardExportJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateModelExplainabilityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateModelExplainabilityJobDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateModelExplainabilityJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateModelPackageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateModelPackageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateModelPackageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateModelPackageGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateModelPackageGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateModelPackageGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateModelQualityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateModelQualityJobDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateModelQualityJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateMonitoringScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateMonitoringScheduleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateMonitoringScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateNotebookInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateNotebookInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateNotebookInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateNotebookInstanceLifecycleConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateNotebookInstanceLifecycleConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateNotebookInstanceLifecycleConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreatePipelineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreatePipelineCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePipelineCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreatePresignedDomainUrlCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreatePresignedDomainUrlCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePresignedDomainUrlCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreatePresignedNotebookInstanceUrlCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreatePresignedNotebookInstanceUrlCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePresignedNotebookInstanceUrlCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_CreateProcessingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateProcessingJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateProcessingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateSpaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateSpaceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateSpaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateStudioLifecycleConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateStudioLifecycleConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateStudioLifecycleConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateTrainingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTrainingJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTrainingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateTransformJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTransformJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransformJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateTrialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTrialCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTrialCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateTrialComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTrialComponentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTrialComponentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateUserProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateUserProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateUserProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateWorkforceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateWorkforceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateWorkforceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_CreateWorkteamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateWorkteamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateWorkteamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteAlgorithmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteAlgorithmCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteAlgorithmCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DeleteAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteAppCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteAppCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteAppImageConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteAppImageConfigCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteAppImageConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteArtifactCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteArtifactCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteArtifactCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteAssociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteCodeRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteCodeRepositoryCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteCodeRepositoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DeleteContextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteContextCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteContextCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteDataQualityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDataQualityJobDefinitionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteDataQualityJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteDeviceFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDeviceFleetCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteDeviceFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDomainCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteEdgeDeploymentPlanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteEdgeDeploymentPlanCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteEdgeDeploymentPlanCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteEdgeDeploymentStageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteEdgeDeploymentStageCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteEdgeDeploymentStageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteEndpointCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DeleteEndpointConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteEndpointConfigCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteEndpointConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DeleteExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteExperimentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteExperimentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteFeatureGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteFeatureGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteFeatureGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteFlowDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteFlowDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteFlowDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteHubCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteHubCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteHubCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteHubContentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteHubContentCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteHubContentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteHumanTaskUiCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteHumanTaskUiCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteHumanTaskUiCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteImageVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteImageVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteImageVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteInferenceExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteInferenceExperimentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteInferenceExperimentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteModelCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteModelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DeleteModelBiasJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteModelBiasJobDefinitionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteModelBiasJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteModelCardCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteModelCardCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteModelCardCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteModelExplainabilityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteModelExplainabilityJobDefinitionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteModelExplainabilityJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteModelPackageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteModelPackageCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteModelPackageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteModelPackageGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteModelPackageGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteModelPackageGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteModelPackageGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteModelPackageGroupPolicyCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteModelPackageGroupPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DeleteModelQualityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteModelQualityJobDefinitionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteModelQualityJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteMonitoringScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteMonitoringScheduleCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteMonitoringScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteNotebookInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteNotebookInstanceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteNotebookInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DeleteNotebookInstanceLifecycleConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteNotebookInstanceLifecycleConfigCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteNotebookInstanceLifecycleConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DeletePipelineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeletePipelineCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeletePipelineCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteProjectCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteSpaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteSpaceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteSpaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteStudioLifecycleConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteStudioLifecycleConfigCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteStudioLifecycleConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTagsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DeleteTrialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTrialCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTrialCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteTrialComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTrialComponentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTrialComponentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteUserProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteUserProfileCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteUserProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteWorkforceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteWorkforceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteWorkforceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DeleteWorkteamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteWorkteamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteWorkteamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeregisterDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeregisterDevicesCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeregisterDevicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DescribeActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeActionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeAlgorithmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAlgorithmCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAlgorithmOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAlgorithmCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DescribeAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAppCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAppResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAppCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeAppImageConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAppImageConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAppImageConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAppImageConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeArtifactCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeArtifactCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeArtifactResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeArtifactCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeAutoMLJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAutoMLJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAutoMLJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAutoMLJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeAutoMLJobV2Command = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAutoMLJobV2CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAutoMLJobV2Response(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAutoMLJobV2CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeCodeRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeCodeRepositoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCodeRepositoryOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCodeRepositoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DescribeCompilationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeCompilationJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCompilationJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCompilationJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeContextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeContextCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeContextResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeContextCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeDataQualityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDataQualityJobDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDataQualityJobDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDataQualityJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeDeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDeviceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDeviceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDeviceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeDeviceFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDeviceFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDeviceFleetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDeviceFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDomainResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeEdgeDeploymentPlanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEdgeDeploymentPlanCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEdgeDeploymentPlanResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEdgeDeploymentPlanCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeEdgePackagingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEdgePackagingJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEdgePackagingJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEdgePackagingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEndpointOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DescribeEndpointConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEndpointConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEndpointConfigOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEndpointConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DescribeExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeExperimentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeExperimentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeExperimentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeFeatureGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeFeatureGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFeatureGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFeatureGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeFeatureMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeFeatureMetadataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFeatureMetadataResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFeatureMetadataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeFlowDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeFlowDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFlowDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFlowDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeHubCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeHubCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeHubResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeHubCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeHubContentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeHubContentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeHubContentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeHubContentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeHumanTaskUiCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeHumanTaskUiCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeHumanTaskUiResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeHumanTaskUiCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeHyperParameterTuningJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeHyperParameterTuningJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeHyperParameterTuningJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeHyperParameterTuningJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeImageResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeImageVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeImageVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeImageVersionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImageVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeInferenceExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeInferenceExperimentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInferenceExperimentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInferenceExperimentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeInferenceRecommendationsJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeInferenceRecommendationsJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInferenceRecommendationsJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInferenceRecommendationsJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeLabelingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeLabelingJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeLabelingJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLabelingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeLineageGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeLineageGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeLineageGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLineageGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeModelCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeModelOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeModelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DescribeModelBiasJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeModelBiasJobDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeModelBiasJobDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeModelBiasJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeModelCardCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeModelCardCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeModelCardResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeModelCardCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeModelCardExportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeModelCardExportJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeModelCardExportJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeModelCardExportJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeModelExplainabilityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeModelExplainabilityJobDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeModelExplainabilityJobDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeModelExplainabilityJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeModelPackageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeModelPackageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeModelPackageOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeModelPackageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DescribeModelPackageGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeModelPackageGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeModelPackageGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeModelPackageGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DescribeModelQualityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeModelQualityJobDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeModelQualityJobDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeModelQualityJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeMonitoringScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeMonitoringScheduleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeMonitoringScheduleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeMonitoringScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeNotebookInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeNotebookInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeNotebookInstanceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNotebookInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DescribeNotebookInstanceLifecycleConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeNotebookInstanceLifecycleConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeNotebookInstanceLifecycleConfigOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNotebookInstanceLifecycleConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DescribePipelineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribePipelineCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePipelineResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePipelineCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribePipelineDefinitionForExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribePipelineDefinitionForExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePipelineDefinitionForExecutionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePipelineDefinitionForExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribePipelineExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribePipelineExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePipelineExecutionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePipelineExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeProcessingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeProcessingJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeProcessingJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeProcessingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeProjectOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DescribeSpaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSpaceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSpaceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSpaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeStudioLifecycleConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeStudioLifecycleConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeStudioLifecycleConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStudioLifecycleConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeSubscribedWorkteamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSubscribedWorkteamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSubscribedWorkteamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DescribeTrainingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTrainingJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrainingJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTrainingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeTransformJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTransformJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransformJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransformJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeTrialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTrialCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrialResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTrialCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeTrialComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTrialComponentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrialComponentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTrialComponentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeUserProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeUserProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeUserProfileResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeUserProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeWorkforceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeWorkforceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeWorkforceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeWorkforceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DescribeWorkteamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeWorkteamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeWorkteamResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeWorkteamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DisableSagemakerServicecatalogPortfolioCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisableSagemakerServicecatalogPortfolioCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableSagemakerServicecatalogPortfolioCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_DisassociateTrialComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisassociateTrialComponentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateTrialComponentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_EnableSagemakerServicecatalogPortfolioCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableSagemakerServicecatalogPortfolioCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableSagemakerServicecatalogPortfolioCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_GetDeviceFleetReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDeviceFleetReportCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDeviceFleetReportResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDeviceFleetReportCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_GetLineageGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetLineageGroupPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetLineageGroupPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_GetModelPackageGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetModelPackageGroupPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetModelPackageGroupPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_GetSagemakerServicecatalogPortfolioStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetSagemakerServicecatalogPortfolioStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSagemakerServicecatalogPortfolioStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_GetSearchSuggestionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetSearchSuggestionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSearchSuggestionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ImportHubContentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ImportHubContentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportHubContentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListActionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListActionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListActionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListAlgorithmsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListAlgorithmsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAlgorithmsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAlgorithmsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListAliasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListAliasesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAliasesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListAppImageConfigsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListAppImageConfigsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAppImageConfigsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAppImageConfigsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListAppsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListAppsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAppsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAppsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListArtifactsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListArtifactsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListArtifactsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListArtifactsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAssociationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListAutoMLJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListAutoMLJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAutoMLJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAutoMLJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListCandidatesForAutoMLJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListCandidatesForAutoMLJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListCandidatesForAutoMLJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListCandidatesForAutoMLJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListCodeRepositoriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListCodeRepositoriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListCodeRepositoriesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListCodeRepositoriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListCompilationJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListCompilationJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListCompilationJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListCompilationJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListContextsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListContextsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListContextsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListContextsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListDataQualityJobDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListDataQualityJobDefinitionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDataQualityJobDefinitionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDataQualityJobDefinitionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListDeviceFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListDeviceFleetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDeviceFleetsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDeviceFleetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListDevicesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDevicesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDevicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListDomainsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListDomainsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDomainsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDomainsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListEdgeDeploymentPlansCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListEdgeDeploymentPlansCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEdgeDeploymentPlansResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEdgeDeploymentPlansCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListEdgePackagingJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListEdgePackagingJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEdgePackagingJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEdgePackagingJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListEndpointConfigsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListEndpointConfigsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEndpointConfigsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEndpointConfigsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListEndpointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEndpointsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListExperimentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListExperimentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListExperimentsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListExperimentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListFeatureGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListFeatureGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListFeatureGroupsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListFeatureGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListFlowDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListFlowDefinitionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListFlowDefinitionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListFlowDefinitionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListHubContentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListHubContentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListHubContentsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListHubContentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListHubContentVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListHubContentVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListHubContentVersionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListHubContentVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListHubsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListHubsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListHubsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListHubsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListHumanTaskUisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListHumanTaskUisCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListHumanTaskUisResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListHumanTaskUisCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListHyperParameterTuningJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListHyperParameterTuningJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListHyperParameterTuningJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListHyperParameterTuningJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListImagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListImagesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListImagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListImageVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListImageVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListImageVersionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListImageVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListInferenceExperimentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListInferenceExperimentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListInferenceExperimentsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListInferenceExperimentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListInferenceRecommendationsJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListInferenceRecommendationsJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListInferenceRecommendationsJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListInferenceRecommendationsJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListInferenceRecommendationsJobStepsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListInferenceRecommendationsJobStepsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListInferenceRecommendationsJobStepsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListInferenceRecommendationsJobStepsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListLabelingJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListLabelingJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListLabelingJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListLabelingJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListLabelingJobsForWorkteamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListLabelingJobsForWorkteamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListLabelingJobsForWorkteamResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListLabelingJobsForWorkteamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListLineageGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListLineageGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListLineageGroupsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListLineageGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListModelBiasJobDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListModelBiasJobDefinitionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListModelBiasJobDefinitionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelBiasJobDefinitionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListModelCardExportJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListModelCardExportJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListModelCardExportJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelCardExportJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListModelCardsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListModelCardsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListModelCardsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelCardsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListModelCardVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListModelCardVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListModelCardVersionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelCardVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListModelExplainabilityJobDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListModelExplainabilityJobDefinitionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListModelExplainabilityJobDefinitionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelExplainabilityJobDefinitionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListModelMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListModelMetadataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelMetadataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListModelPackageGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListModelPackageGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListModelPackageGroupsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelPackageGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListModelPackagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListModelPackagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListModelPackagesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelPackagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListModelQualityJobDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListModelQualityJobDefinitionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListModelQualityJobDefinitionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelQualityJobDefinitionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListModelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListModelsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListModelsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListMonitoringAlertHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListMonitoringAlertHistoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMonitoringAlertHistoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListMonitoringAlertHistoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListMonitoringAlertsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListMonitoringAlertsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMonitoringAlertsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListMonitoringAlertsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListMonitoringExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListMonitoringExecutionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMonitoringExecutionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListMonitoringExecutionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListMonitoringSchedulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListMonitoringSchedulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMonitoringSchedulesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListMonitoringSchedulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListNotebookInstanceLifecycleConfigsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListNotebookInstanceLifecycleConfigsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListNotebookInstanceLifecycleConfigsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListNotebookInstanceLifecycleConfigsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListNotebookInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListNotebookInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListNotebookInstancesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListNotebookInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListPipelineExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListPipelineExecutionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPipelineExecutionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPipelineExecutionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListPipelineExecutionStepsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListPipelineExecutionStepsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPipelineExecutionStepsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPipelineExecutionStepsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListPipelineParametersForExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListPipelineParametersForExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPipelineParametersForExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListPipelinesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListPipelinesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPipelinesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPipelinesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListProcessingJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListProcessingJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListProcessingJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListProcessingJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListProjectsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListProjectsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListProjectsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListSpacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListSpacesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListSpacesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSpacesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListStageDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListStageDevicesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListStageDevicesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListStageDevicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListStudioLifecycleConfigsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListStudioLifecycleConfigsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListStudioLifecycleConfigsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListStudioLifecycleConfigsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListSubscribedWorkteamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListSubscribedWorkteamsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSubscribedWorkteamsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTagsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListTrainingJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTrainingJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTrainingJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTrainingJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListTrainingJobsForHyperParameterTuningJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTrainingJobsForHyperParameterTuningJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTrainingJobsForHyperParameterTuningJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTrainingJobsForHyperParameterTuningJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListTransformJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTransformJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTransformJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTransformJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListTrialComponentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTrialComponentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTrialComponentsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTrialComponentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListTrialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTrialsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTrialsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTrialsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListUserProfilesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListUserProfilesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListUserProfilesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListUserProfilesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListWorkforcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListWorkforcesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListWorkforcesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListWorkforcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_ListWorkteamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListWorkteamsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListWorkteamsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListWorkteamsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_PutModelPackageGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutModelPackageGroupPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutModelPackageGroupPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_QueryLineageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_QueryLineageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_QueryLineageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_RegisterDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RegisterDevicesCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_RegisterDevicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_RenderUiTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RenderUiTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RenderUiTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_RetryPipelineExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RetryPipelineExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RetryPipelineExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_SearchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SearchCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SearchResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SearchCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_SendPipelineExecutionStepFailureCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SendPipelineExecutionStepFailureCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SendPipelineExecutionStepFailureCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_SendPipelineExecutionStepSuccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SendPipelineExecutionStepSuccessCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SendPipelineExecutionStepSuccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartEdgeDeploymentStageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartEdgeDeploymentStageCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StartEdgeDeploymentStageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_StartInferenceExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartInferenceExperimentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartInferenceExperimentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartMonitoringScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartMonitoringScheduleCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StartMonitoringScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartNotebookInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartNotebookInstanceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StartNotebookInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartPipelineExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartPipelineExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartPipelineExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopAutoMLJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopAutoMLJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopAutoMLJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopCompilationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopCompilationJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopCompilationJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopEdgeDeploymentStageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopEdgeDeploymentStageCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopEdgeDeploymentStageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_StopEdgePackagingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopEdgePackagingJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopEdgePackagingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_StopHyperParameterTuningJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopHyperParameterTuningJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopHyperParameterTuningJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopInferenceExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopInferenceExperimentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopInferenceExperimentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopInferenceRecommendationsJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopInferenceRecommendationsJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopInferenceRecommendationsJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopLabelingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopLabelingJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopLabelingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopMonitoringScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopMonitoringScheduleCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopMonitoringScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopNotebookInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopNotebookInstanceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopNotebookInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_StopPipelineExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopPipelineExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopPipelineExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopProcessingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopProcessingJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopProcessingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopTrainingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopTrainingJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopTrainingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopTransformJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopTransformJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopTransformJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateAppImageConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateAppImageConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateAppImageConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateArtifactCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateArtifactCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateArtifactCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateCodeRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateCodeRepositoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateCodeRepositoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_UpdateContextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateContextCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateContextCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateDeviceFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateDeviceFleetCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateDeviceFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateDevicesCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateDevicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_UpdateDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateEndpointWeightsAndCapacitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateEndpointWeightsAndCapacitiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateEndpointWeightsAndCapacitiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateExperimentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateExperimentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateFeatureGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateFeatureGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateFeatureGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateFeatureMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateFeatureMetadataCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateFeatureMetadataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateHubCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateHubCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateHubCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateImageVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateImageVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateImageVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateInferenceExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateInferenceExperimentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateInferenceExperimentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateModelCardCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateModelCardCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateModelCardCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateModelPackageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateModelPackageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateModelPackageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_UpdateMonitoringAlertCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateMonitoringAlertCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateMonitoringAlertCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateMonitoringScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateMonitoringScheduleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateMonitoringScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateNotebookInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateNotebookInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateNotebookInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateNotebookInstanceLifecycleConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateNotebookInstanceLifecycleConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateNotebookInstanceLifecycleConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdatePipelineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdatePipelineCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdatePipelineCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdatePipelineExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdatePipelineExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdatePipelineExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
export const de_UpdateSpaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateSpaceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateSpaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateTrainingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateTrainingJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateTrainingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateTrialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateTrialCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateTrialCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateTrialComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateTrialComponentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateTrialComponentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateUserProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateUserProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateUserProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateWorkforceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateWorkforceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateWorkforceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateWorkforceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateWorkteamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateWorkteamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateWorkteamResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateWorkteamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceInUseRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_AutoMLDataSplitConfig = (input, context) => {
    return take(input, {
        ValidationFraction: __serializeFloat,
    });
};
const se_AutoMLJobConfig = (input, context) => {
    return take(input, {
        CandidateGenerationConfig: _json,
        CompletionCriteria: _json,
        DataSplitConfig: (_) => se_AutoMLDataSplitConfig(_, context),
        Mode: [],
        SecurityConfig: _json,
    });
};
const se_BatchTransformInput = (input, context) => {
    return take(input, {
        DataCapturedDestinationS3Uri: [],
        DatasetFormat: _json,
        EndTimeOffset: [],
        FeaturesAttribute: [],
        InferenceAttribute: [],
        LocalPath: [],
        ProbabilityAttribute: [],
        ProbabilityThresholdAttribute: __serializeFloat,
        S3DataDistributionType: [],
        S3InputMode: [],
        StartTimeOffset: [],
    });
};
const se_CreateAutoMLJobRequest = (input, context) => {
    return take(input, {
        AutoMLJobConfig: (_) => se_AutoMLJobConfig(_, context),
        AutoMLJobName: [],
        AutoMLJobObjective: _json,
        GenerateCandidateDefinitionsOnly: [],
        InputDataConfig: _json,
        ModelDeployConfig: _json,
        OutputDataConfig: _json,
        ProblemType: [],
        RoleArn: [],
        Tags: _json,
    });
};
const se_CreateAutoMLJobV2Request = (input, context) => {
    return take(input, {
        AutoMLJobInputDataConfig: _json,
        AutoMLJobName: [],
        AutoMLJobObjective: _json,
        AutoMLProblemTypeConfig: _json,
        DataSplitConfig: (_) => se_AutoMLDataSplitConfig(_, context),
        ModelDeployConfig: _json,
        OutputDataConfig: _json,
        RoleArn: [],
        SecurityConfig: _json,
        Tags: _json,
    });
};
const se_CreateDataQualityJobDefinitionRequest = (input, context) => {
    return take(input, {
        DataQualityAppSpecification: _json,
        DataQualityBaselineConfig: _json,
        DataQualityJobInput: (_) => se_DataQualityJobInput(_, context),
        DataQualityJobOutputConfig: _json,
        JobDefinitionName: [],
        JobResources: _json,
        NetworkConfig: _json,
        RoleArn: [],
        StoppingCondition: _json,
        Tags: _json,
    });
};
const se_CreateEndpointConfigInput = (input, context) => {
    return take(input, {
        AsyncInferenceConfig: _json,
        DataCaptureConfig: _json,
        EndpointConfigName: [],
        ExplainerConfig: _json,
        KmsKeyId: [],
        ProductionVariants: (_) => se_ProductionVariantList(_, context),
        ShadowProductionVariants: (_) => se_ProductionVariantList(_, context),
        Tags: _json,
    });
};
const se_CreateFlowDefinitionRequest = (input, context) => {
    return take(input, {
        FlowDefinitionName: [],
        HumanLoopActivationConfig: (_) => se_HumanLoopActivationConfig(_, context),
        HumanLoopConfig: _json,
        HumanLoopRequestSource: _json,
        OutputConfig: _json,
        RoleArn: [],
        Tags: _json,
    });
};
const se_CreateHyperParameterTuningJobRequest = (input, context) => {
    return take(input, {
        HyperParameterTuningJobConfig: (_) => se_HyperParameterTuningJobConfig(_, context),
        HyperParameterTuningJobName: [],
        Tags: _json,
        TrainingJobDefinition: _json,
        TrainingJobDefinitions: _json,
        WarmStartConfig: _json,
    });
};
const se_CreateImageVersionRequest = (input, context) => {
    return take(input, {
        Aliases: _json,
        BaseImage: [],
        ClientToken: (_) => _ ?? generateIdempotencyToken(),
        Horovod: [],
        ImageName: [],
        JobType: [],
        MLFramework: [],
        Processor: [],
        ProgrammingLang: [],
        ReleaseNotes: [],
        VendorGuidance: [],
    });
};
const se_CreateInferenceExperimentRequest = (input, context) => {
    return take(input, {
        DataStorageConfig: _json,
        Description: [],
        EndpointName: [],
        KmsKey: [],
        ModelVariants: _json,
        Name: [],
        RoleArn: [],
        Schedule: (_) => se_InferenceExperimentSchedule(_, context),
        ShadowModeConfig: _json,
        Tags: _json,
        Type: [],
    });
};
const se_CreateModelBiasJobDefinitionRequest = (input, context) => {
    return take(input, {
        JobDefinitionName: [],
        JobResources: _json,
        ModelBiasAppSpecification: _json,
        ModelBiasBaselineConfig: _json,
        ModelBiasJobInput: (_) => se_ModelBiasJobInput(_, context),
        ModelBiasJobOutputConfig: _json,
        NetworkConfig: _json,
        RoleArn: [],
        StoppingCondition: _json,
        Tags: _json,
    });
};
const se_CreateModelExplainabilityJobDefinitionRequest = (input, context) => {
    return take(input, {
        JobDefinitionName: [],
        JobResources: _json,
        ModelExplainabilityAppSpecification: _json,
        ModelExplainabilityBaselineConfig: _json,
        ModelExplainabilityJobInput: (_) => se_ModelExplainabilityJobInput(_, context),
        ModelExplainabilityJobOutputConfig: _json,
        NetworkConfig: _json,
        RoleArn: [],
        StoppingCondition: _json,
        Tags: _json,
    });
};
const se_CreateModelPackageInput = (input, context) => {
    return take(input, {
        AdditionalInferenceSpecifications: _json,
        CertifyForMarketplace: [],
        ClientToken: (_) => _ ?? generateIdempotencyToken(),
        CustomerMetadataProperties: _json,
        Domain: [],
        DriftCheckBaselines: _json,
        InferenceSpecification: _json,
        MetadataProperties: _json,
        ModelApprovalStatus: [],
        ModelMetrics: _json,
        ModelPackageDescription: [],
        ModelPackageGroupName: [],
        ModelPackageName: [],
        SamplePayloadUrl: [],
        SourceAlgorithmSpecification: _json,
        Tags: _json,
        Task: [],
        ValidationSpecification: _json,
    });
};
const se_CreateModelQualityJobDefinitionRequest = (input, context) => {
    return take(input, {
        JobDefinitionName: [],
        JobResources: _json,
        ModelQualityAppSpecification: _json,
        ModelQualityBaselineConfig: _json,
        ModelQualityJobInput: (_) => se_ModelQualityJobInput(_, context),
        ModelQualityJobOutputConfig: _json,
        NetworkConfig: _json,
        RoleArn: [],
        StoppingCondition: _json,
        Tags: _json,
    });
};
const se_CreateMonitoringScheduleRequest = (input, context) => {
    return take(input, {
        MonitoringScheduleConfig: (_) => se_MonitoringScheduleConfig(_, context),
        MonitoringScheduleName: [],
        Tags: _json,
    });
};
const se_CreatePipelineRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: (_) => _ ?? generateIdempotencyToken(),
        ParallelismConfiguration: _json,
        PipelineDefinition: [],
        PipelineDefinitionS3Location: _json,
        PipelineDescription: [],
        PipelineDisplayName: [],
        PipelineName: [],
        RoleArn: [],
        Tags: _json,
    });
};
const se_CreateTrialComponentRequest = (input, context) => {
    return take(input, {
        DisplayName: [],
        EndTime: (_) => Math.round(_.getTime() / 1000),
        InputArtifacts: _json,
        MetadataProperties: _json,
        OutputArtifacts: _json,
        Parameters: (_) => se_TrialComponentParameters(_, context),
        StartTime: (_) => Math.round(_.getTime() / 1000),
        Status: _json,
        Tags: _json,
        TrialComponentName: [],
    });
};
const se_DataQualityJobInput = (input, context) => {
    return take(input, {
        BatchTransformInput: (_) => se_BatchTransformInput(_, context),
        EndpointInput: (_) => se_EndpointInput(_, context),
    });
};
const se_DeletePipelineRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: (_) => _ ?? generateIdempotencyToken(),
        PipelineName: [],
    });
};
const se_DesiredWeightAndCapacity = (input, context) => {
    return take(input, {
        DesiredInstanceCount: [],
        DesiredWeight: __serializeFloat,
        VariantName: [],
    });
};
const se_DesiredWeightAndCapacityList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DesiredWeightAndCapacity(entry, context);
    });
};
const se_EndpointInput = (input, context) => {
    return take(input, {
        EndTimeOffset: [],
        EndpointName: [],
        FeaturesAttribute: [],
        InferenceAttribute: [],
        LocalPath: [],
        ProbabilityAttribute: [],
        ProbabilityThresholdAttribute: __serializeFloat,
        S3DataDistributionType: [],
        S3InputMode: [],
        StartTimeOffset: [],
    });
};
const se_HumanLoopActivationConditionsConfig = (input, context) => {
    return take(input, {
        HumanLoopActivationConditions: __LazyJsonString.fromObject,
    });
};
const se_HumanLoopActivationConfig = (input, context) => {
    return take(input, {
        HumanLoopActivationConditionsConfig: (_) => se_HumanLoopActivationConditionsConfig(_, context),
    });
};
const se_HyperParameterTuningJobConfig = (input, context) => {
    return take(input, {
        HyperParameterTuningJobObjective: _json,
        ParameterRanges: _json,
        RandomSeed: [],
        ResourceLimits: _json,
        Strategy: [],
        StrategyConfig: _json,
        TrainingJobEarlyStoppingType: [],
        TuningJobCompletionCriteria: (_) => se_TuningJobCompletionCriteria(_, context),
    });
};
const se_InferenceExperimentSchedule = (input, context) => {
    return take(input, {
        EndTime: (_) => Math.round(_.getTime() / 1000),
        StartTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_ListActionsRequest = (input, context) => {
    return take(input, {
        ActionType: [],
        CreatedAfter: (_) => Math.round(_.getTime() / 1000),
        CreatedBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        SourceUri: [],
    });
};
const se_ListAlgorithmsInput = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListAppImageConfigsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        ModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        ModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListArtifactsRequest = (input, context) => {
    return take(input, {
        ArtifactType: [],
        CreatedAfter: (_) => Math.round(_.getTime() / 1000),
        CreatedBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        SourceUri: [],
    });
};
const se_ListAssociationsRequest = (input, context) => {
    return take(input, {
        AssociationType: [],
        CreatedAfter: (_) => Math.round(_.getTime() / 1000),
        CreatedBefore: (_) => Math.round(_.getTime() / 1000),
        DestinationArn: [],
        DestinationType: [],
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        SourceArn: [],
        SourceType: [],
    });
};
const se_ListAutoMLJobsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListCodeRepositoriesInput = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListCompilationJobsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListContextsRequest = (input, context) => {
    return take(input, {
        ContextType: [],
        CreatedAfter: (_) => Math.round(_.getTime() / 1000),
        CreatedBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        SourceUri: [],
    });
};
const se_ListDataQualityJobDefinitionsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        EndpointName: [],
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListDeviceFleetsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListDevicesRequest = (input, context) => {
    return take(input, {
        DeviceFleetName: [],
        LatestHeartbeatAfter: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        ModelName: [],
        NextToken: [],
    });
};
const se_ListEdgeDeploymentPlansRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        DeviceFleetNameContains: [],
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListEdgePackagingJobsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        ModelNameContains: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListEndpointConfigsInput = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListEndpointsInput = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListExperimentsRequest = (input, context) => {
    return take(input, {
        CreatedAfter: (_) => Math.round(_.getTime() / 1000),
        CreatedBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListFeatureGroupsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        FeatureGroupStatusEquals: [],
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        OfflineStoreStatusEquals: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListFlowDefinitionsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NextToken: [],
        SortOrder: [],
    });
};
const se_ListHubContentsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        HubContentType: [],
        HubName: [],
        MaxResults: [],
        MaxSchemaVersion: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListHubContentVersionsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        HubContentName: [],
        HubContentType: [],
        HubName: [],
        MaxResults: [],
        MaxSchemaVersion: [],
        MinVersion: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListHubsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListHumanTaskUisRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NextToken: [],
        SortOrder: [],
    });
};
const se_ListHyperParameterTuningJobsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListImagesRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListImageVersionsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        ImageName: [],
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListInferenceExperimentsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
        Type: [],
    });
};
const se_ListInferenceRecommendationsJobsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListLabelingJobsForWorkteamRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        JobReferenceCodeContains: [],
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        WorkteamArn: [],
    });
};
const se_ListLabelingJobsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListLineageGroupsRequest = (input, context) => {
    return take(input, {
        CreatedAfter: (_) => Math.round(_.getTime() / 1000),
        CreatedBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListModelBiasJobDefinitionsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        EndpointName: [],
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListModelCardExportJobsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        ModelCardExportJobNameContains: [],
        ModelCardName: [],
        ModelCardVersion: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListModelCardsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        ModelCardStatus: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListModelCardVersionsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        ModelCardName: [],
        ModelCardStatus: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListModelExplainabilityJobDefinitionsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        EndpointName: [],
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListModelPackageGroupsInput = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListModelPackagesInput = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        ModelApprovalStatus: [],
        ModelPackageGroupName: [],
        ModelPackageType: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListModelQualityJobDefinitionsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        EndpointName: [],
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListModelsInput = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListMonitoringAlertHistoryRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        MonitoringAlertName: [],
        MonitoringScheduleName: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListMonitoringExecutionsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        EndpointName: [],
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        MonitoringJobDefinitionName: [],
        MonitoringScheduleName: [],
        MonitoringTypeEquals: [],
        NextToken: [],
        ScheduledTimeAfter: (_) => Math.round(_.getTime() / 1000),
        ScheduledTimeBefore: (_) => Math.round(_.getTime() / 1000),
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListMonitoringSchedulesRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        EndpointName: [],
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        MonitoringJobDefinitionName: [],
        MonitoringTypeEquals: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListNotebookInstanceLifecycleConfigsInput = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListNotebookInstancesInput = (input, context) => {
    return take(input, {
        AdditionalCodeRepositoryEquals: [],
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        DefaultCodeRepositoryContains: [],
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        NotebookInstanceLifecycleConfigNameContains: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListPipelineExecutionsRequest = (input, context) => {
    return take(input, {
        CreatedAfter: (_) => Math.round(_.getTime() / 1000),
        CreatedBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NextToken: [],
        PipelineName: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListPipelinesRequest = (input, context) => {
    return take(input, {
        CreatedAfter: (_) => Math.round(_.getTime() / 1000),
        CreatedBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NextToken: [],
        PipelineNamePrefix: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListProcessingJobsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListProjectsInput = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListStudioLifecycleConfigsRequest = (input, context) => {
    return take(input, {
        AppTypeEquals: [],
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        ModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        ModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListTrainingJobsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
        WarmPoolStatusEquals: [],
    });
};
const se_ListTransformJobsRequest = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedTimeBefore: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListTrialComponentsRequest = (input, context) => {
    return take(input, {
        CreatedAfter: (_) => Math.round(_.getTime() / 1000),
        CreatedBefore: (_) => Math.round(_.getTime() / 1000),
        ExperimentName: [],
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        SourceArn: [],
        TrialName: [],
    });
};
const se_ListTrialsRequest = (input, context) => {
    return take(input, {
        CreatedAfter: (_) => Math.round(_.getTime() / 1000),
        CreatedBefore: (_) => Math.round(_.getTime() / 1000),
        ExperimentName: [],
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        TrialComponentName: [],
    });
};
const se_ModelBiasJobInput = (input, context) => {
    return take(input, {
        BatchTransformInput: (_) => se_BatchTransformInput(_, context),
        EndpointInput: (_) => se_EndpointInput(_, context),
        GroundTruthS3Input: _json,
    });
};
const se_ModelExplainabilityJobInput = (input, context) => {
    return take(input, {
        BatchTransformInput: (_) => se_BatchTransformInput(_, context),
        EndpointInput: (_) => se_EndpointInput(_, context),
    });
};
const se_ModelQualityJobInput = (input, context) => {
    return take(input, {
        BatchTransformInput: (_) => se_BatchTransformInput(_, context),
        EndpointInput: (_) => se_EndpointInput(_, context),
        GroundTruthS3Input: _json,
    });
};
const se_MonitoringInput = (input, context) => {
    return take(input, {
        BatchTransformInput: (_) => se_BatchTransformInput(_, context),
        EndpointInput: (_) => se_EndpointInput(_, context),
    });
};
const se_MonitoringInputs = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MonitoringInput(entry, context);
    });
};
const se_MonitoringJobDefinition = (input, context) => {
    return take(input, {
        BaselineConfig: _json,
        Environment: _json,
        MonitoringAppSpecification: _json,
        MonitoringInputs: (_) => se_MonitoringInputs(_, context),
        MonitoringOutputConfig: _json,
        MonitoringResources: _json,
        NetworkConfig: _json,
        RoleArn: [],
        StoppingCondition: _json,
    });
};
const se_MonitoringScheduleConfig = (input, context) => {
    return take(input, {
        MonitoringJobDefinition: (_) => se_MonitoringJobDefinition(_, context),
        MonitoringJobDefinitionName: [],
        MonitoringType: [],
        ScheduleConfig: _json,
    });
};
const se_ProductionVariant = (input, context) => {
    return take(input, {
        AcceleratorType: [],
        ContainerStartupHealthCheckTimeoutInSeconds: [],
        CoreDumpConfig: _json,
        EnableSSMAccess: [],
        InitialInstanceCount: [],
        InitialVariantWeight: __serializeFloat,
        InstanceType: [],
        ModelDataDownloadTimeoutInSeconds: [],
        ModelName: [],
        ServerlessConfig: _json,
        VariantName: [],
        VolumeSizeInGB: [],
    });
};
const se_ProductionVariantList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ProductionVariant(entry, context);
    });
};
const se_QueryFilters = (input, context) => {
    return take(input, {
        CreatedAfter: (_) => Math.round(_.getTime() / 1000),
        CreatedBefore: (_) => Math.round(_.getTime() / 1000),
        LineageTypes: _json,
        ModifiedAfter: (_) => Math.round(_.getTime() / 1000),
        ModifiedBefore: (_) => Math.round(_.getTime() / 1000),
        Properties: _json,
        Types: _json,
    });
};
const se_QueryLineageRequest = (input, context) => {
    return take(input, {
        Direction: [],
        Filters: (_) => se_QueryFilters(_, context),
        IncludeEdges: [],
        MaxDepth: [],
        MaxResults: [],
        NextToken: [],
        StartArns: _json,
    });
};
const se_RetryPipelineExecutionRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: (_) => _ ?? generateIdempotencyToken(),
        ParallelismConfiguration: _json,
        PipelineExecutionArn: [],
    });
};
const se_SearchExpression = (input, context) => {
    return take(input, {
        Filters: _json,
        NestedFilters: _json,
        Operator: [],
        SubExpressions: (_) => se_SearchExpressionList(_, context),
    });
};
const se_SearchExpressionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SearchExpression(entry, context);
    });
};
const se_SearchRequest = (input, context) => {
    return take(input, {
        MaxResults: [],
        NextToken: [],
        Resource: [],
        SearchExpression: (_) => se_SearchExpression(_, context),
        SortBy: [],
        SortOrder: [],
    });
};
const se_SendPipelineExecutionStepFailureRequest = (input, context) => {
    return take(input, {
        CallbackToken: [],
        ClientRequestToken: (_) => _ ?? generateIdempotencyToken(),
        FailureReason: [],
    });
};
const se_SendPipelineExecutionStepSuccessRequest = (input, context) => {
    return take(input, {
        CallbackToken: [],
        ClientRequestToken: (_) => _ ?? generateIdempotencyToken(),
        OutputParameters: _json,
    });
};
const se_StartPipelineExecutionRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: (_) => _ ?? generateIdempotencyToken(),
        ParallelismConfiguration: _json,
        PipelineExecutionDescription: [],
        PipelineExecutionDisplayName: [],
        PipelineName: [],
        PipelineParameters: _json,
    });
};
const se_StopPipelineExecutionRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: (_) => _ ?? generateIdempotencyToken(),
        PipelineExecutionArn: [],
    });
};
const se_TrialComponentParameters = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_TrialComponentParameterValue(value, context);
        return acc;
    }, {});
};
const se_TrialComponentParameterValue = (input, context) => {
    return TrialComponentParameterValue.visit(input, {
        NumberValue: (value) => ({ NumberValue: __serializeFloat(value) }),
        StringValue: (value) => ({ StringValue: value }),
        _: (name, value) => ({ name: value }),
    });
};
const se_TuningJobCompletionCriteria = (input, context) => {
    return take(input, {
        BestObjectiveNotImproving: _json,
        ConvergenceDetected: _json,
        TargetObjectiveMetricValue: __serializeFloat,
    });
};
const se_UpdateEndpointWeightsAndCapacitiesInput = (input, context) => {
    return take(input, {
        DesiredWeightsAndCapacities: (_) => se_DesiredWeightAndCapacityList(_, context),
        EndpointName: [],
    });
};
const se_UpdateInferenceExperimentRequest = (input, context) => {
    return take(input, {
        DataStorageConfig: _json,
        Description: [],
        ModelVariants: _json,
        Name: [],
        Schedule: (_) => se_InferenceExperimentSchedule(_, context),
        ShadowModeConfig: _json,
    });
};
const se_UpdateMonitoringScheduleRequest = (input, context) => {
    return take(input, {
        MonitoringScheduleConfig: (_) => se_MonitoringScheduleConfig(_, context),
        MonitoringScheduleName: [],
    });
};
const se_UpdateTrialComponentRequest = (input, context) => {
    return take(input, {
        DisplayName: [],
        EndTime: (_) => Math.round(_.getTime() / 1000),
        InputArtifacts: _json,
        InputArtifactsToRemove: _json,
        OutputArtifacts: _json,
        OutputArtifactsToRemove: _json,
        Parameters: (_) => se_TrialComponentParameters(_, context),
        ParametersToRemove: _json,
        StartTime: (_) => Math.round(_.getTime() / 1000),
        Status: _json,
        TrialComponentName: [],
    });
};
const de_ActionSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ActionSummary(entry, context);
    });
    return retVal;
};
const de_ActionSummary = (output, context) => {
    return take(output, {
        ActionArn: __expectString,
        ActionName: __expectString,
        ActionType: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Source: _json,
        Status: __expectString,
    });
};
const de_AlgorithmSummary = (output, context) => {
    return take(output, {
        AlgorithmArn: __expectString,
        AlgorithmDescription: __expectString,
        AlgorithmName: __expectString,
        AlgorithmStatus: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_AlgorithmSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AlgorithmSummary(entry, context);
    });
    return retVal;
};
const de_AppDetails = (output, context) => {
    return take(output, {
        AppName: __expectString,
        AppType: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DomainId: __expectString,
        SpaceName: __expectString,
        Status: __expectString,
        UserProfileName: __expectString,
    });
};
const de_AppImageConfigDetails = (output, context) => {
    return take(output, {
        AppImageConfigArn: __expectString,
        AppImageConfigName: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        KernelGatewayImageConfig: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_AppImageConfigList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AppImageConfigDetails(entry, context);
    });
    return retVal;
};
const de_AppList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AppDetails(entry, context);
    });
    return retVal;
};
const de_ArtifactSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ArtifactSummary(entry, context);
    });
    return retVal;
};
const de_ArtifactSummary = (output, context) => {
    return take(output, {
        ArtifactArn: __expectString,
        ArtifactName: __expectString,
        ArtifactType: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Source: _json,
    });
};
const de_AssociationSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssociationSummary(entry, context);
    });
    return retVal;
};
const de_AssociationSummary = (output, context) => {
    return take(output, {
        AssociationType: __expectString,
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DestinationArn: __expectString,
        DestinationName: __expectString,
        DestinationType: __expectString,
        SourceArn: __expectString,
        SourceName: __expectString,
        SourceType: __expectString,
    });
};
const de_AutoMLCandidate = (output, context) => {
    return take(output, {
        CandidateName: __expectString,
        CandidateProperties: (_) => de_CandidateProperties(_, context),
        CandidateStatus: __expectString,
        CandidateSteps: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        FinalAutoMLJobObjectiveMetric: (_) => de_FinalAutoMLJobObjectiveMetric(_, context),
        InferenceContainerDefinitions: _json,
        InferenceContainers: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ObjectiveStatus: __expectString,
    });
};
const de_AutoMLCandidates = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoMLCandidate(entry, context);
    });
    return retVal;
};
const de_AutoMLDataSplitConfig = (output, context) => {
    return take(output, {
        ValidationFraction: __limitedParseFloat32,
    });
};
const de_AutoMLJobConfig = (output, context) => {
    return take(output, {
        CandidateGenerationConfig: _json,
        CompletionCriteria: _json,
        DataSplitConfig: (_) => de_AutoMLDataSplitConfig(_, context),
        Mode: __expectString,
        SecurityConfig: _json,
    });
};
const de_AutoMLJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoMLJobSummary(entry, context);
    });
    return retVal;
};
const de_AutoMLJobSummary = (output, context) => {
    return take(output, {
        AutoMLJobArn: __expectString,
        AutoMLJobName: __expectString,
        AutoMLJobSecondaryStatus: __expectString,
        AutoMLJobStatus: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PartialFailureReasons: _json,
    });
};
const de_BatchDescribeModelPackageOutput = (output, context) => {
    return take(output, {
        BatchDescribeModelPackageErrorMap: _json,
        ModelPackageSummaries: (_) => de_ModelPackageSummaries(_, context),
    });
};
const de_BatchDescribeModelPackageSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InferenceSpecification: _json,
        ModelApprovalStatus: __expectString,
        ModelPackageArn: __expectString,
        ModelPackageDescription: __expectString,
        ModelPackageGroupName: __expectString,
        ModelPackageStatus: __expectString,
        ModelPackageVersion: __expectInt32,
    });
};
const de_BatchTransformInput = (output, context) => {
    return take(output, {
        DataCapturedDestinationS3Uri: __expectString,
        DatasetFormat: _json,
        EndTimeOffset: __expectString,
        FeaturesAttribute: __expectString,
        InferenceAttribute: __expectString,
        LocalPath: __expectString,
        ProbabilityAttribute: __expectString,
        ProbabilityThresholdAttribute: __limitedParseDouble,
        S3DataDistributionType: __expectString,
        S3InputMode: __expectString,
        StartTimeOffset: __expectString,
    });
};
const de_CandidateProperties = (output, context) => {
    return take(output, {
        CandidateArtifactLocations: _json,
        CandidateMetrics: (_) => de_MetricDataList(_, context),
    });
};
const de_CodeRepositorySummary = (output, context) => {
    return take(output, {
        CodeRepositoryArn: __expectString,
        CodeRepositoryName: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        GitConfig: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_CodeRepositorySummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CodeRepositorySummary(entry, context);
    });
    return retVal;
};
const de_CompilationJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CompilationJobSummary(entry, context);
    });
    return retVal;
};
const de_CompilationJobSummary = (output, context) => {
    return take(output, {
        CompilationEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CompilationJobArn: __expectString,
        CompilationJobName: __expectString,
        CompilationJobStatus: __expectString,
        CompilationStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CompilationTargetDevice: __expectString,
        CompilationTargetPlatformAccelerator: __expectString,
        CompilationTargetPlatformArch: __expectString,
        CompilationTargetPlatformOs: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ContextSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContextSummary(entry, context);
    });
    return retVal;
};
const de_ContextSummary = (output, context) => {
    return take(output, {
        ContextArn: __expectString,
        ContextName: __expectString,
        ContextType: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Source: _json,
    });
};
const de_DataQualityJobInput = (output, context) => {
    return take(output, {
        BatchTransformInput: (_) => de_BatchTransformInput(_, context),
        EndpointInput: (_) => de_EndpointInput(_, context),
    });
};
const de_DebugRuleEvaluationStatus = (output, context) => {
    return take(output, {
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RuleConfigurationName: __expectString,
        RuleEvaluationJobArn: __expectString,
        RuleEvaluationStatus: __expectString,
        StatusDetails: __expectString,
    });
};
const de_DebugRuleEvaluationStatuses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DebugRuleEvaluationStatus(entry, context);
    });
    return retVal;
};
const de_DeployedImage = (output, context) => {
    return take(output, {
        ResolutionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ResolvedImage: __expectString,
        SpecifiedImage: __expectString,
    });
};
const de_DeployedImages = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeployedImage(entry, context);
    });
    return retVal;
};
const de_DeploymentStageStatusSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeploymentStageStatusSummary(entry, context);
    });
    return retVal;
};
const de_DeploymentStageStatusSummary = (output, context) => {
    return take(output, {
        DeploymentConfig: _json,
        DeploymentStatus: (_) => de_EdgeDeploymentStatus(_, context),
        DeviceSelectionConfig: _json,
        StageName: __expectString,
    });
};
const de_DescribeActionResponse = (output, context) => {
    return take(output, {
        ActionArn: __expectString,
        ActionName: __expectString,
        ActionType: __expectString,
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LineageGroupArn: __expectString,
        MetadataProperties: _json,
        Properties: _json,
        Source: _json,
        Status: __expectString,
    });
};
const de_DescribeAlgorithmOutput = (output, context) => {
    return take(output, {
        AlgorithmArn: __expectString,
        AlgorithmDescription: __expectString,
        AlgorithmName: __expectString,
        AlgorithmStatus: __expectString,
        AlgorithmStatusDetails: _json,
        CertifyForMarketplace: __expectBoolean,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InferenceSpecification: _json,
        ProductId: __expectString,
        TrainingSpecification: _json,
        ValidationSpecification: _json,
    });
};
const de_DescribeAppImageConfigResponse = (output, context) => {
    return take(output, {
        AppImageConfigArn: __expectString,
        AppImageConfigName: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        KernelGatewayImageConfig: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DescribeAppResponse = (output, context) => {
    return take(output, {
        AppArn: __expectString,
        AppName: __expectString,
        AppType: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DomainId: __expectString,
        FailureReason: __expectString,
        LastHealthCheckTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUserActivityTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ResourceSpec: _json,
        SpaceName: __expectString,
        Status: __expectString,
        UserProfileName: __expectString,
    });
};
const de_DescribeArtifactResponse = (output, context) => {
    return take(output, {
        ArtifactArn: __expectString,
        ArtifactName: __expectString,
        ArtifactType: __expectString,
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LineageGroupArn: __expectString,
        MetadataProperties: _json,
        Properties: _json,
        Source: _json,
    });
};
const de_DescribeAutoMLJobResponse = (output, context) => {
    return take(output, {
        AutoMLJobArn: __expectString,
        AutoMLJobArtifacts: _json,
        AutoMLJobConfig: (_) => de_AutoMLJobConfig(_, context),
        AutoMLJobName: __expectString,
        AutoMLJobObjective: _json,
        AutoMLJobSecondaryStatus: __expectString,
        AutoMLJobStatus: __expectString,
        BestCandidate: (_) => de_AutoMLCandidate(_, context),
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        GenerateCandidateDefinitionsOnly: __expectBoolean,
        InputDataConfig: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelDeployConfig: _json,
        ModelDeployResult: _json,
        OutputDataConfig: _json,
        PartialFailureReasons: _json,
        ProblemType: __expectString,
        ResolvedAttributes: _json,
        RoleArn: __expectString,
    });
};
const de_DescribeAutoMLJobV2Response = (output, context) => {
    return take(output, {
        AutoMLJobArn: __expectString,
        AutoMLJobInputDataConfig: _json,
        AutoMLJobName: __expectString,
        AutoMLJobObjective: _json,
        AutoMLJobSecondaryStatus: __expectString,
        AutoMLJobStatus: __expectString,
        AutoMLProblemTypeConfig: (_) => _json(__expectUnion(_)),
        BestCandidate: (_) => de_AutoMLCandidate(_, context),
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataSplitConfig: (_) => de_AutoMLDataSplitConfig(_, context),
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelDeployConfig: _json,
        ModelDeployResult: _json,
        OutputDataConfig: _json,
        PartialFailureReasons: _json,
        RoleArn: __expectString,
        SecurityConfig: _json,
    });
};
const de_DescribeCodeRepositoryOutput = (output, context) => {
    return take(output, {
        CodeRepositoryArn: __expectString,
        CodeRepositoryName: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        GitConfig: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DescribeCompilationJobResponse = (output, context) => {
    return take(output, {
        CompilationEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CompilationJobArn: __expectString,
        CompilationJobName: __expectString,
        CompilationJobStatus: __expectString,
        CompilationStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        InferenceImage: __expectString,
        InputConfig: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelArtifacts: _json,
        ModelDigests: _json,
        ModelPackageVersionArn: __expectString,
        OutputConfig: _json,
        RoleArn: __expectString,
        StoppingCondition: _json,
        VpcConfig: _json,
    });
};
const de_DescribeContextResponse = (output, context) => {
    return take(output, {
        ContextArn: __expectString,
        ContextName: __expectString,
        ContextType: __expectString,
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LineageGroupArn: __expectString,
        Properties: _json,
        Source: _json,
    });
};
const de_DescribeDataQualityJobDefinitionResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataQualityAppSpecification: _json,
        DataQualityBaselineConfig: _json,
        DataQualityJobInput: (_) => de_DataQualityJobInput(_, context),
        DataQualityJobOutputConfig: _json,
        JobDefinitionArn: __expectString,
        JobDefinitionName: __expectString,
        JobResources: _json,
        NetworkConfig: _json,
        RoleArn: __expectString,
        StoppingCondition: _json,
    });
};
const de_DescribeDeviceFleetResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DeviceFleetArn: __expectString,
        DeviceFleetName: __expectString,
        IotRoleAlias: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OutputConfig: _json,
        RoleArn: __expectString,
    });
};
const de_DescribeDeviceResponse = (output, context) => {
    return take(output, {
        AgentVersion: __expectString,
        Description: __expectString,
        DeviceArn: __expectString,
        DeviceFleetName: __expectString,
        DeviceName: __expectString,
        IotThingName: __expectString,
        LatestHeartbeat: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MaxModels: __expectInt32,
        Models: (_) => de_EdgeModels(_, context),
        NextToken: __expectString,
        RegistrationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DescribeDomainResponse = (output, context) => {
    return take(output, {
        AppNetworkAccessType: __expectString,
        AppSecurityGroupManagement: __expectString,
        AuthMode: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DefaultSpaceSettings: _json,
        DefaultUserSettings: _json,
        DomainArn: __expectString,
        DomainId: __expectString,
        DomainName: __expectString,
        DomainSettings: _json,
        FailureReason: __expectString,
        HomeEfsFileSystemId: __expectString,
        HomeEfsFileSystemKmsKeyId: __expectString,
        KmsKeyId: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SecurityGroupIdForDomainBoundary: __expectString,
        SingleSignOnManagedApplicationInstanceId: __expectString,
        Status: __expectString,
        SubnetIds: _json,
        Url: __expectString,
        VpcId: __expectString,
    });
};
const de_DescribeEdgeDeploymentPlanResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeviceFleetName: __expectString,
        EdgeDeploymentFailed: __expectInt32,
        EdgeDeploymentPending: __expectInt32,
        EdgeDeploymentPlanArn: __expectString,
        EdgeDeploymentPlanName: __expectString,
        EdgeDeploymentSuccess: __expectInt32,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelConfigs: _json,
        NextToken: __expectString,
        Stages: (_) => de_DeploymentStageStatusSummaries(_, context),
    });
};
const de_DescribeEdgePackagingJobResponse = (output, context) => {
    return take(output, {
        CompilationJobName: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EdgePackagingJobArn: __expectString,
        EdgePackagingJobName: __expectString,
        EdgePackagingJobStatus: __expectString,
        EdgePackagingJobStatusMessage: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelArtifact: __expectString,
        ModelName: __expectString,
        ModelSignature: __expectString,
        ModelVersion: __expectString,
        OutputConfig: _json,
        PresetDeploymentOutput: _json,
        ResourceKey: __expectString,
        RoleArn: __expectString,
    });
};
const de_DescribeEndpointConfigOutput = (output, context) => {
    return take(output, {
        AsyncInferenceConfig: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataCaptureConfig: _json,
        EndpointConfigArn: __expectString,
        EndpointConfigName: __expectString,
        ExplainerConfig: _json,
        KmsKeyId: __expectString,
        ProductionVariants: (_) => de_ProductionVariantList(_, context),
        ShadowProductionVariants: (_) => de_ProductionVariantList(_, context),
    });
};
const de_DescribeEndpointOutput = (output, context) => {
    return take(output, {
        AsyncInferenceConfig: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataCaptureConfig: _json,
        EndpointArn: __expectString,
        EndpointConfigName: __expectString,
        EndpointName: __expectString,
        EndpointStatus: __expectString,
        ExplainerConfig: _json,
        FailureReason: __expectString,
        LastDeploymentConfig: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PendingDeploymentSummary: (_) => de_PendingDeploymentSummary(_, context),
        ProductionVariants: (_) => de_ProductionVariantSummaryList(_, context),
        ShadowProductionVariants: (_) => de_ProductionVariantSummaryList(_, context),
    });
};
const de_DescribeExperimentResponse = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DisplayName: __expectString,
        ExperimentArn: __expectString,
        ExperimentName: __expectString,
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Source: _json,
    });
};
const de_DescribeFeatureGroupResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        EventTimeFeatureName: __expectString,
        FailureReason: __expectString,
        FeatureDefinitions: _json,
        FeatureGroupArn: __expectString,
        FeatureGroupName: __expectString,
        FeatureGroupStatus: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdateStatus: _json,
        NextToken: __expectString,
        OfflineStoreConfig: _json,
        OfflineStoreStatus: _json,
        OnlineStoreConfig: _json,
        OnlineStoreTotalSizeBytes: __expectLong,
        RecordIdentifierFeatureName: __expectString,
        RoleArn: __expectString,
    });
};
const de_DescribeFeatureMetadataResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        FeatureGroupArn: __expectString,
        FeatureGroupName: __expectString,
        FeatureName: __expectString,
        FeatureType: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Parameters: _json,
    });
};
const de_DescribeFlowDefinitionResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        FlowDefinitionArn: __expectString,
        FlowDefinitionName: __expectString,
        FlowDefinitionStatus: __expectString,
        HumanLoopActivationConfig: (_) => de_HumanLoopActivationConfig(_, context),
        HumanLoopConfig: _json,
        HumanLoopRequestSource: _json,
        OutputConfig: _json,
        RoleArn: __expectString,
    });
};
const de_DescribeHubContentResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DocumentSchemaVersion: __expectString,
        FailureReason: __expectString,
        HubArn: __expectString,
        HubContentArn: __expectString,
        HubContentDependencies: _json,
        HubContentDescription: __expectString,
        HubContentDisplayName: __expectString,
        HubContentDocument: __expectString,
        HubContentMarkdown: __expectString,
        HubContentName: __expectString,
        HubContentSearchKeywords: _json,
        HubContentStatus: __expectString,
        HubContentType: __expectString,
        HubContentVersion: __expectString,
        HubName: __expectString,
    });
};
const de_DescribeHubResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        HubArn: __expectString,
        HubDescription: __expectString,
        HubDisplayName: __expectString,
        HubName: __expectString,
        HubSearchKeywords: _json,
        HubStatus: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        S3StorageConfig: _json,
    });
};
const de_DescribeHumanTaskUiResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HumanTaskUiArn: __expectString,
        HumanTaskUiName: __expectString,
        HumanTaskUiStatus: __expectString,
        UiTemplate: _json,
    });
};
const de_DescribeHyperParameterTuningJobResponse = (output, context) => {
    return take(output, {
        BestTrainingJob: (_) => de_HyperParameterTrainingJobSummary(_, context),
        ConsumedResources: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        HyperParameterTuningEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HyperParameterTuningJobArn: __expectString,
        HyperParameterTuningJobConfig: (_) => de_HyperParameterTuningJobConfig(_, context),
        HyperParameterTuningJobName: __expectString,
        HyperParameterTuningJobStatus: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ObjectiveStatusCounters: _json,
        OverallBestTrainingJob: (_) => de_HyperParameterTrainingJobSummary(_, context),
        TrainingJobDefinition: _json,
        TrainingJobDefinitions: _json,
        TrainingJobStatusCounters: _json,
        TuningJobCompletionDetails: (_) => de_HyperParameterTuningJobCompletionDetails(_, context),
        WarmStartConfig: _json,
    });
};
const de_DescribeImageResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DisplayName: __expectString,
        FailureReason: __expectString,
        ImageArn: __expectString,
        ImageName: __expectString,
        ImageStatus: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RoleArn: __expectString,
    });
};
const de_DescribeImageVersionResponse = (output, context) => {
    return take(output, {
        BaseImage: __expectString,
        ContainerImage: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        Horovod: __expectBoolean,
        ImageArn: __expectString,
        ImageVersionArn: __expectString,
        ImageVersionStatus: __expectString,
        JobType: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MLFramework: __expectString,
        Processor: __expectString,
        ProgrammingLang: __expectString,
        ReleaseNotes: __expectString,
        VendorGuidance: __expectString,
        Version: __expectInt32,
    });
};
const de_DescribeInferenceExperimentResponse = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CompletionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataStorageConfig: _json,
        Description: __expectString,
        EndpointMetadata: _json,
        KmsKey: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelVariants: _json,
        Name: __expectString,
        RoleArn: __expectString,
        Schedule: (_) => de_InferenceExperimentSchedule(_, context),
        ShadowModeConfig: _json,
        Status: __expectString,
        StatusReason: __expectString,
        Type: __expectString,
    });
};
const de_DescribeInferenceRecommendationsJobResponse = (output, context) => {
    return take(output, {
        CompletionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndpointPerformances: _json,
        FailureReason: __expectString,
        InferenceRecommendations: (_) => de_InferenceRecommendations(_, context),
        InputConfig: _json,
        JobArn: __expectString,
        JobDescription: __expectString,
        JobName: __expectString,
        JobType: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RoleArn: __expectString,
        Status: __expectString,
        StoppingConditions: _json,
    });
};
const de_DescribeLabelingJobResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        HumanTaskConfig: _json,
        InputConfig: _json,
        JobReferenceCode: __expectString,
        LabelAttributeName: __expectString,
        LabelCategoryConfigS3Uri: __expectString,
        LabelCounters: _json,
        LabelingJobAlgorithmsConfig: _json,
        LabelingJobArn: __expectString,
        LabelingJobName: __expectString,
        LabelingJobOutput: _json,
        LabelingJobStatus: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OutputConfig: _json,
        RoleArn: __expectString,
        StoppingConditions: _json,
        Tags: _json,
    });
};
const de_DescribeLineageGroupResponse = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DisplayName: __expectString,
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LineageGroupArn: __expectString,
        LineageGroupName: __expectString,
    });
};
const de_DescribeModelBiasJobDefinitionResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        JobDefinitionArn: __expectString,
        JobDefinitionName: __expectString,
        JobResources: _json,
        ModelBiasAppSpecification: _json,
        ModelBiasBaselineConfig: _json,
        ModelBiasJobInput: (_) => de_ModelBiasJobInput(_, context),
        ModelBiasJobOutputConfig: _json,
        NetworkConfig: _json,
        RoleArn: __expectString,
        StoppingCondition: _json,
    });
};
const de_DescribeModelCardExportJobResponse = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ExportArtifacts: _json,
        FailureReason: __expectString,
        LastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelCardExportJobArn: __expectString,
        ModelCardExportJobName: __expectString,
        ModelCardName: __expectString,
        ModelCardVersion: __expectInt32,
        OutputConfig: _json,
        Status: __expectString,
    });
};
const de_DescribeModelCardResponse = (output, context) => {
    return take(output, {
        Content: __expectString,
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelCardArn: __expectString,
        ModelCardName: __expectString,
        ModelCardProcessingStatus: __expectString,
        ModelCardStatus: __expectString,
        ModelCardVersion: __expectInt32,
        SecurityConfig: _json,
    });
};
const de_DescribeModelExplainabilityJobDefinitionResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        JobDefinitionArn: __expectString,
        JobDefinitionName: __expectString,
        JobResources: _json,
        ModelExplainabilityAppSpecification: _json,
        ModelExplainabilityBaselineConfig: _json,
        ModelExplainabilityJobInput: (_) => de_ModelExplainabilityJobInput(_, context),
        ModelExplainabilityJobOutputConfig: _json,
        NetworkConfig: _json,
        RoleArn: __expectString,
        StoppingCondition: _json,
    });
};
const de_DescribeModelOutput = (output, context) => {
    return take(output, {
        Containers: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EnableNetworkIsolation: __expectBoolean,
        ExecutionRoleArn: __expectString,
        InferenceExecutionConfig: _json,
        ModelArn: __expectString,
        ModelName: __expectString,
        PrimaryContainer: _json,
        VpcConfig: _json,
    });
};
const de_DescribeModelPackageGroupOutput = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelPackageGroupArn: __expectString,
        ModelPackageGroupDescription: __expectString,
        ModelPackageGroupName: __expectString,
        ModelPackageGroupStatus: __expectString,
    });
};
const de_DescribeModelPackageOutput = (output, context) => {
    return take(output, {
        AdditionalInferenceSpecifications: _json,
        ApprovalDescription: __expectString,
        CertifyForMarketplace: __expectBoolean,
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CustomerMetadataProperties: _json,
        Domain: __expectString,
        DriftCheckBaselines: _json,
        InferenceSpecification: _json,
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MetadataProperties: _json,
        ModelApprovalStatus: __expectString,
        ModelMetrics: _json,
        ModelPackageArn: __expectString,
        ModelPackageDescription: __expectString,
        ModelPackageGroupName: __expectString,
        ModelPackageName: __expectString,
        ModelPackageStatus: __expectString,
        ModelPackageStatusDetails: _json,
        ModelPackageVersion: __expectInt32,
        SamplePayloadUrl: __expectString,
        SourceAlgorithmSpecification: _json,
        Task: __expectString,
        ValidationSpecification: _json,
    });
};
const de_DescribeModelQualityJobDefinitionResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        JobDefinitionArn: __expectString,
        JobDefinitionName: __expectString,
        JobResources: _json,
        ModelQualityAppSpecification: _json,
        ModelQualityBaselineConfig: _json,
        ModelQualityJobInput: (_) => de_ModelQualityJobInput(_, context),
        ModelQualityJobOutputConfig: _json,
        NetworkConfig: _json,
        RoleArn: __expectString,
        StoppingCondition: _json,
    });
};
const de_DescribeMonitoringScheduleResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndpointName: __expectString,
        FailureReason: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastMonitoringExecutionSummary: (_) => de_MonitoringExecutionSummary(_, context),
        MonitoringScheduleArn: __expectString,
        MonitoringScheduleConfig: (_) => de_MonitoringScheduleConfig(_, context),
        MonitoringScheduleName: __expectString,
        MonitoringScheduleStatus: __expectString,
        MonitoringType: __expectString,
    });
};
const de_DescribeNotebookInstanceLifecycleConfigOutput = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NotebookInstanceLifecycleConfigArn: __expectString,
        NotebookInstanceLifecycleConfigName: __expectString,
        OnCreate: _json,
        OnStart: _json,
    });
};
const de_DescribeNotebookInstanceOutput = (output, context) => {
    return take(output, {
        AcceleratorTypes: _json,
        AdditionalCodeRepositories: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DefaultCodeRepository: __expectString,
        DirectInternetAccess: __expectString,
        FailureReason: __expectString,
        InstanceMetadataServiceConfiguration: _json,
        InstanceType: __expectString,
        KmsKeyId: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NetworkInterfaceId: __expectString,
        NotebookInstanceArn: __expectString,
        NotebookInstanceLifecycleConfigName: __expectString,
        NotebookInstanceName: __expectString,
        NotebookInstanceStatus: __expectString,
        PlatformIdentifier: __expectString,
        RoleArn: __expectString,
        RootAccess: __expectString,
        SecurityGroups: _json,
        SubnetId: __expectString,
        Url: __expectString,
        VolumeSizeInGB: __expectInt32,
    });
};
const de_DescribePipelineDefinitionForExecutionResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PipelineDefinition: __expectString,
    });
};
const de_DescribePipelineExecutionResponse = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ParallelismConfiguration: _json,
        PipelineArn: __expectString,
        PipelineExecutionArn: __expectString,
        PipelineExecutionDescription: __expectString,
        PipelineExecutionDisplayName: __expectString,
        PipelineExecutionStatus: __expectString,
        PipelineExperimentConfig: _json,
    });
};
const de_DescribePipelineResponse = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastRunTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ParallelismConfiguration: _json,
        PipelineArn: __expectString,
        PipelineDefinition: __expectString,
        PipelineDescription: __expectString,
        PipelineDisplayName: __expectString,
        PipelineName: __expectString,
        PipelineStatus: __expectString,
        RoleArn: __expectString,
    });
};
const de_DescribeProcessingJobResponse = (output, context) => {
    return take(output, {
        AppSpecification: _json,
        AutoMLJobArn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Environment: _json,
        ExitMessage: __expectString,
        ExperimentConfig: _json,
        FailureReason: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MonitoringScheduleArn: __expectString,
        NetworkConfig: _json,
        ProcessingEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ProcessingInputs: _json,
        ProcessingJobArn: __expectString,
        ProcessingJobName: __expectString,
        ProcessingJobStatus: __expectString,
        ProcessingOutputConfig: _json,
        ProcessingResources: _json,
        ProcessingStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RoleArn: __expectString,
        StoppingCondition: _json,
        TrainingJobArn: __expectString,
    });
};
const de_DescribeProjectOutput = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ProjectArn: __expectString,
        ProjectDescription: __expectString,
        ProjectId: __expectString,
        ProjectName: __expectString,
        ProjectStatus: __expectString,
        ServiceCatalogProvisionedProductDetails: _json,
        ServiceCatalogProvisioningDetails: _json,
    });
};
const de_DescribeSpaceResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DomainId: __expectString,
        FailureReason: __expectString,
        HomeEfsFileSystemUid: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SpaceArn: __expectString,
        SpaceName: __expectString,
        SpaceSettings: _json,
        Status: __expectString,
    });
};
const de_DescribeStudioLifecycleConfigResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StudioLifecycleConfigAppType: __expectString,
        StudioLifecycleConfigArn: __expectString,
        StudioLifecycleConfigContent: __expectString,
        StudioLifecycleConfigName: __expectString,
    });
};
const de_DescribeTrainingJobResponse = (output, context) => {
    return take(output, {
        AlgorithmSpecification: _json,
        AutoMLJobArn: __expectString,
        BillableTimeInSeconds: __expectInt32,
        CheckpointConfig: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DebugHookConfig: _json,
        DebugRuleConfigurations: _json,
        DebugRuleEvaluationStatuses: (_) => de_DebugRuleEvaluationStatuses(_, context),
        EnableInterContainerTrafficEncryption: __expectBoolean,
        EnableManagedSpotTraining: __expectBoolean,
        EnableNetworkIsolation: __expectBoolean,
        Environment: _json,
        ExperimentConfig: _json,
        FailureReason: __expectString,
        FinalMetricDataList: (_) => de_FinalMetricDataList(_, context),
        HyperParameters: _json,
        InputDataConfig: _json,
        LabelingJobArn: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelArtifacts: _json,
        OutputDataConfig: _json,
        ProfilerConfig: _json,
        ProfilerRuleConfigurations: _json,
        ProfilerRuleEvaluationStatuses: (_) => de_ProfilerRuleEvaluationStatuses(_, context),
        ProfilingStatus: __expectString,
        ResourceConfig: _json,
        RetryStrategy: _json,
        RoleArn: __expectString,
        SecondaryStatus: __expectString,
        SecondaryStatusTransitions: (_) => de_SecondaryStatusTransitions(_, context),
        StoppingCondition: _json,
        TensorBoardOutputConfig: _json,
        TrainingEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrainingJobArn: __expectString,
        TrainingJobName: __expectString,
        TrainingJobStatus: __expectString,
        TrainingStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrainingTimeInSeconds: __expectInt32,
        TuningJobArn: __expectString,
        VpcConfig: _json,
        WarmPoolStatus: _json,
    });
};
const de_DescribeTransformJobResponse = (output, context) => {
    return take(output, {
        AutoMLJobArn: __expectString,
        BatchStrategy: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataCaptureConfig: _json,
        DataProcessing: _json,
        Environment: _json,
        ExperimentConfig: _json,
        FailureReason: __expectString,
        LabelingJobArn: __expectString,
        MaxConcurrentTransforms: __expectInt32,
        MaxPayloadInMB: __expectInt32,
        ModelClientConfig: _json,
        ModelName: __expectString,
        TransformEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TransformInput: _json,
        TransformJobArn: __expectString,
        TransformJobName: __expectString,
        TransformJobStatus: __expectString,
        TransformOutput: _json,
        TransformResources: _json,
        TransformStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DescribeTrialComponentResponse = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DisplayName: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputArtifacts: _json,
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LineageGroupArn: __expectString,
        MetadataProperties: _json,
        Metrics: (_) => de_TrialComponentMetricSummaries(_, context),
        OutputArtifacts: _json,
        Parameters: (_) => de_TrialComponentParameters(_, context),
        Source: _json,
        Sources: _json,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: _json,
        TrialComponentArn: __expectString,
        TrialComponentName: __expectString,
    });
};
const de_DescribeTrialResponse = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DisplayName: __expectString,
        ExperimentName: __expectString,
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MetadataProperties: _json,
        Source: _json,
        TrialArn: __expectString,
        TrialName: __expectString,
    });
};
const de_DescribeUserProfileResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DomainId: __expectString,
        FailureReason: __expectString,
        HomeEfsFileSystemUid: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SingleSignOnUserIdentifier: __expectString,
        SingleSignOnUserValue: __expectString,
        Status: __expectString,
        UserProfileArn: __expectString,
        UserProfileName: __expectString,
        UserSettings: _json,
    });
};
const de_DescribeWorkforceResponse = (output, context) => {
    return take(output, {
        Workforce: (_) => de_Workforce(_, context),
    });
};
const de_DescribeWorkteamResponse = (output, context) => {
    return take(output, {
        Workteam: (_) => de_Workteam(_, context),
    });
};
const de_DeviceDeploymentSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeviceDeploymentSummary(entry, context);
    });
    return retVal;
};
const de_DeviceDeploymentSummary = (output, context) => {
    return take(output, {
        DeployedStageName: __expectString,
        DeploymentStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DeviceArn: __expectString,
        DeviceDeploymentStatus: __expectString,
        DeviceDeploymentStatusMessage: __expectString,
        DeviceFleetName: __expectString,
        DeviceName: __expectString,
        EdgeDeploymentPlanArn: __expectString,
        EdgeDeploymentPlanName: __expectString,
        StageName: __expectString,
    });
};
const de_DeviceFleetSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeviceFleetSummary(entry, context);
    });
    return retVal;
};
const de_DeviceFleetSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeviceFleetArn: __expectString,
        DeviceFleetName: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DeviceSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeviceSummary(entry, context);
    });
    return retVal;
};
const de_DeviceSummary = (output, context) => {
    return take(output, {
        AgentVersion: __expectString,
        Description: __expectString,
        DeviceArn: __expectString,
        DeviceFleetName: __expectString,
        DeviceName: __expectString,
        IotThingName: __expectString,
        LatestHeartbeat: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Models: _json,
        RegistrationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DomainDetails = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DomainArn: __expectString,
        DomainId: __expectString,
        DomainName: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        Url: __expectString,
    });
};
const de_DomainList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DomainDetails(entry, context);
    });
    return retVal;
};
const de_EdgeDeploymentPlanSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EdgeDeploymentPlanSummary(entry, context);
    });
    return retVal;
};
const de_EdgeDeploymentPlanSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeviceFleetName: __expectString,
        EdgeDeploymentFailed: __expectInt32,
        EdgeDeploymentPending: __expectInt32,
        EdgeDeploymentPlanArn: __expectString,
        EdgeDeploymentPlanName: __expectString,
        EdgeDeploymentSuccess: __expectInt32,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_EdgeDeploymentStatus = (output, context) => {
    return take(output, {
        EdgeDeploymentFailedInStage: __expectInt32,
        EdgeDeploymentPendingInStage: __expectInt32,
        EdgeDeploymentStageStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EdgeDeploymentStatusMessage: __expectString,
        EdgeDeploymentSuccessInStage: __expectInt32,
        StageStatus: __expectString,
    });
};
const de_EdgeModel = (output, context) => {
    return take(output, {
        LatestInference: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestSampleTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelName: __expectString,
        ModelVersion: __expectString,
    });
};
const de_EdgeModels = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EdgeModel(entry, context);
    });
    return retVal;
};
const de_EdgePackagingJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EdgePackagingJobSummary(entry, context);
    });
    return retVal;
};
const de_EdgePackagingJobSummary = (output, context) => {
    return take(output, {
        CompilationJobName: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EdgePackagingJobArn: __expectString,
        EdgePackagingJobName: __expectString,
        EdgePackagingJobStatus: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelName: __expectString,
        ModelVersion: __expectString,
    });
};
const de_Endpoint = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataCaptureConfig: _json,
        EndpointArn: __expectString,
        EndpointConfigName: __expectString,
        EndpointName: __expectString,
        EndpointStatus: __expectString,
        FailureReason: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MonitoringSchedules: (_) => de_MonitoringScheduleList(_, context),
        ProductionVariants: (_) => de_ProductionVariantSummaryList(_, context),
        ShadowProductionVariants: (_) => de_ProductionVariantSummaryList(_, context),
        Tags: _json,
    });
};
const de_EndpointConfigSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndpointConfigArn: __expectString,
        EndpointConfigName: __expectString,
    });
};
const de_EndpointConfigSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EndpointConfigSummary(entry, context);
    });
    return retVal;
};
const de_EndpointInput = (output, context) => {
    return take(output, {
        EndTimeOffset: __expectString,
        EndpointName: __expectString,
        FeaturesAttribute: __expectString,
        InferenceAttribute: __expectString,
        LocalPath: __expectString,
        ProbabilityAttribute: __expectString,
        ProbabilityThresholdAttribute: __limitedParseDouble,
        S3DataDistributionType: __expectString,
        S3InputMode: __expectString,
        StartTimeOffset: __expectString,
    });
};
const de_EndpointSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndpointArn: __expectString,
        EndpointName: __expectString,
        EndpointStatus: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_EndpointSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EndpointSummary(entry, context);
    });
    return retVal;
};
const de_Experiment = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DisplayName: __expectString,
        ExperimentArn: __expectString,
        ExperimentName: __expectString,
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Source: _json,
        Tags: _json,
    });
};
const de_ExperimentSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ExperimentSummary(entry, context);
    });
    return retVal;
};
const de_ExperimentSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DisplayName: __expectString,
        ExperimentArn: __expectString,
        ExperimentName: __expectString,
        ExperimentSource: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_FeatureGroup = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        EventTimeFeatureName: __expectString,
        FailureReason: __expectString,
        FeatureDefinitions: _json,
        FeatureGroupArn: __expectString,
        FeatureGroupName: __expectString,
        FeatureGroupStatus: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdateStatus: _json,
        OfflineStoreConfig: _json,
        OfflineStoreStatus: _json,
        OnlineStoreConfig: _json,
        RecordIdentifierFeatureName: __expectString,
        RoleArn: __expectString,
        Tags: _json,
    });
};
const de_FeatureGroupSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FeatureGroupSummary(entry, context);
    });
    return retVal;
};
const de_FeatureGroupSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FeatureGroupArn: __expectString,
        FeatureGroupName: __expectString,
        FeatureGroupStatus: __expectString,
        OfflineStoreStatus: _json,
    });
};
const de_FeatureMetadata = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        FeatureGroupArn: __expectString,
        FeatureGroupName: __expectString,
        FeatureName: __expectString,
        FeatureType: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Parameters: _json,
    });
};
const de_FinalAutoMLJobObjectiveMetric = (output, context) => {
    return take(output, {
        MetricName: __expectString,
        StandardMetricName: __expectString,
        Type: __expectString,
        Value: __limitedParseFloat32,
    });
};
const de_FinalHyperParameterTuningJobObjectiveMetric = (output, context) => {
    return take(output, {
        MetricName: __expectString,
        Type: __expectString,
        Value: __limitedParseFloat32,
    });
};
const de_FinalMetricDataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricData(entry, context);
    });
    return retVal;
};
const de_FlowDefinitionSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FlowDefinitionSummary(entry, context);
    });
    return retVal;
};
const de_FlowDefinitionSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        FlowDefinitionArn: __expectString,
        FlowDefinitionName: __expectString,
        FlowDefinitionStatus: __expectString,
    });
};
const de_GetDeviceFleetReportResponse = (output, context) => {
    return take(output, {
        AgentVersions: _json,
        Description: __expectString,
        DeviceFleetArn: __expectString,
        DeviceFleetName: __expectString,
        DeviceStats: _json,
        ModelStats: _json,
        OutputConfig: _json,
        ReportGenerated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_HubContentInfo = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DocumentSchemaVersion: __expectString,
        HubContentArn: __expectString,
        HubContentDescription: __expectString,
        HubContentDisplayName: __expectString,
        HubContentName: __expectString,
        HubContentSearchKeywords: _json,
        HubContentStatus: __expectString,
        HubContentType: __expectString,
        HubContentVersion: __expectString,
    });
};
const de_HubContentInfoList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HubContentInfo(entry, context);
    });
    return retVal;
};
const de_HubInfo = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HubArn: __expectString,
        HubDescription: __expectString,
        HubDisplayName: __expectString,
        HubName: __expectString,
        HubSearchKeywords: _json,
        HubStatus: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_HubInfoList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HubInfo(entry, context);
    });
    return retVal;
};
const de_HumanLoopActivationConditionsConfig = (output, context) => {
    return take(output, {
        HumanLoopActivationConditions: (_) => new __LazyJsonString(_),
    });
};
const de_HumanLoopActivationConfig = (output, context) => {
    return take(output, {
        HumanLoopActivationConditionsConfig: (_) => de_HumanLoopActivationConditionsConfig(_, context),
    });
};
const de_HumanTaskUiSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HumanTaskUiSummary(entry, context);
    });
    return retVal;
};
const de_HumanTaskUiSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HumanTaskUiArn: __expectString,
        HumanTaskUiName: __expectString,
    });
};
const de_HyperParameterTrainingJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HyperParameterTrainingJobSummary(entry, context);
    });
    return retVal;
};
const de_HyperParameterTrainingJobSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        FinalHyperParameterTuningJobObjectiveMetric: (_) => de_FinalHyperParameterTuningJobObjectiveMetric(_, context),
        ObjectiveStatus: __expectString,
        TrainingEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrainingJobArn: __expectString,
        TrainingJobDefinitionName: __expectString,
        TrainingJobName: __expectString,
        TrainingJobStatus: __expectString,
        TrainingStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TunedHyperParameters: _json,
        TuningJobName: __expectString,
    });
};
const de_HyperParameterTuningJobCompletionDetails = (output, context) => {
    return take(output, {
        ConvergenceDetectedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NumberOfTrainingJobsObjectiveNotImproving: __expectInt32,
    });
};
const de_HyperParameterTuningJobConfig = (output, context) => {
    return take(output, {
        HyperParameterTuningJobObjective: _json,
        ParameterRanges: _json,
        RandomSeed: __expectInt32,
        ResourceLimits: _json,
        Strategy: __expectString,
        StrategyConfig: _json,
        TrainingJobEarlyStoppingType: __expectString,
        TuningJobCompletionCriteria: (_) => de_TuningJobCompletionCriteria(_, context),
    });
};
const de_HyperParameterTuningJobSearchEntity = (output, context) => {
    return take(output, {
        BestTrainingJob: (_) => de_HyperParameterTrainingJobSummary(_, context),
        ConsumedResources: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        HyperParameterTuningEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HyperParameterTuningJobArn: __expectString,
        HyperParameterTuningJobConfig: (_) => de_HyperParameterTuningJobConfig(_, context),
        HyperParameterTuningJobName: __expectString,
        HyperParameterTuningJobStatus: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ObjectiveStatusCounters: _json,
        OverallBestTrainingJob: (_) => de_HyperParameterTrainingJobSummary(_, context),
        Tags: _json,
        TrainingJobDefinition: _json,
        TrainingJobDefinitions: _json,
        TrainingJobStatusCounters: _json,
        TuningJobCompletionDetails: (_) => de_HyperParameterTuningJobCompletionDetails(_, context),
        WarmStartConfig: _json,
    });
};
const de_HyperParameterTuningJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HyperParameterTuningJobSummary(entry, context);
    });
    return retVal;
};
const de_HyperParameterTuningJobSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HyperParameterTuningEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HyperParameterTuningJobArn: __expectString,
        HyperParameterTuningJobName: __expectString,
        HyperParameterTuningJobStatus: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ObjectiveStatusCounters: _json,
        ResourceLimits: _json,
        Strategy: __expectString,
        TrainingJobStatusCounters: _json,
    });
};
const de_Image = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DisplayName: __expectString,
        FailureReason: __expectString,
        ImageArn: __expectString,
        ImageName: __expectString,
        ImageStatus: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Images = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Image(entry, context);
    });
    return retVal;
};
const de_ImageVersion = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        ImageArn: __expectString,
        ImageVersionArn: __expectString,
        ImageVersionStatus: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Version: __expectInt32,
    });
};
const de_ImageVersions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImageVersion(entry, context);
    });
    return retVal;
};
const de_InferenceExperimentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InferenceExperimentSummary(entry, context);
    });
    return retVal;
};
const de_InferenceExperimentSchedule = (output, context) => {
    return take(output, {
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_InferenceExperimentSummary = (output, context) => {
    return take(output, {
        CompletionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        RoleArn: __expectString,
        Schedule: (_) => de_InferenceExperimentSchedule(_, context),
        Status: __expectString,
        StatusReason: __expectString,
        Type: __expectString,
    });
};
const de_InferenceRecommendation = (output, context) => {
    return take(output, {
        EndpointConfiguration: _json,
        Metrics: (_) => de_RecommendationMetrics(_, context),
        ModelConfiguration: _json,
        RecommendationId: __expectString,
    });
};
const de_InferenceRecommendations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InferenceRecommendation(entry, context);
    });
    return retVal;
};
const de_InferenceRecommendationsJob = (output, context) => {
    return take(output, {
        CompletionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        JobArn: __expectString,
        JobDescription: __expectString,
        JobName: __expectString,
        JobType: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RoleArn: __expectString,
        Status: __expectString,
    });
};
const de_InferenceRecommendationsJobs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InferenceRecommendationsJob(entry, context);
    });
    return retVal;
};
const de_InferenceRecommendationsJobStep = (output, context) => {
    return take(output, {
        InferenceBenchmark: (_) => de_RecommendationJobInferenceBenchmark(_, context),
        JobName: __expectString,
        Status: __expectString,
        StepType: __expectString,
    });
};
const de_InferenceRecommendationsJobSteps = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InferenceRecommendationsJobStep(entry, context);
    });
    return retVal;
};
const de_LabelingJobForWorkteamSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        JobReferenceCode: __expectString,
        LabelCounters: _json,
        LabelingJobName: __expectString,
        NumberOfHumanWorkersPerDataObject: __expectInt32,
        WorkRequesterAccountId: __expectString,
    });
};
const de_LabelingJobForWorkteamSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LabelingJobForWorkteamSummary(entry, context);
    });
    return retVal;
};
const de_LabelingJobSummary = (output, context) => {
    return take(output, {
        AnnotationConsolidationLambdaArn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        InputConfig: _json,
        LabelCounters: _json,
        LabelingJobArn: __expectString,
        LabelingJobName: __expectString,
        LabelingJobOutput: _json,
        LabelingJobStatus: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PreHumanTaskLambdaArn: __expectString,
        WorkteamArn: __expectString,
    });
};
const de_LabelingJobSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LabelingJobSummary(entry, context);
    });
    return retVal;
};
const de_LineageGroupSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LineageGroupSummary(entry, context);
    });
    return retVal;
};
const de_LineageGroupSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DisplayName: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LineageGroupArn: __expectString,
        LineageGroupName: __expectString,
    });
};
const de_ListActionsResponse = (output, context) => {
    return take(output, {
        ActionSummaries: (_) => de_ActionSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListAlgorithmsOutput = (output, context) => {
    return take(output, {
        AlgorithmSummaryList: (_) => de_AlgorithmSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListAppImageConfigsResponse = (output, context) => {
    return take(output, {
        AppImageConfigs: (_) => de_AppImageConfigList(_, context),
        NextToken: __expectString,
    });
};
const de_ListAppsResponse = (output, context) => {
    return take(output, {
        Apps: (_) => de_AppList(_, context),
        NextToken: __expectString,
    });
};
const de_ListArtifactsResponse = (output, context) => {
    return take(output, {
        ArtifactSummaries: (_) => de_ArtifactSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListAssociationsResponse = (output, context) => {
    return take(output, {
        AssociationSummaries: (_) => de_AssociationSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListAutoMLJobsResponse = (output, context) => {
    return take(output, {
        AutoMLJobSummaries: (_) => de_AutoMLJobSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListCandidatesForAutoMLJobResponse = (output, context) => {
    return take(output, {
        Candidates: (_) => de_AutoMLCandidates(_, context),
        NextToken: __expectString,
    });
};
const de_ListCodeRepositoriesOutput = (output, context) => {
    return take(output, {
        CodeRepositorySummaryList: (_) => de_CodeRepositorySummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListCompilationJobsResponse = (output, context) => {
    return take(output, {
        CompilationJobSummaries: (_) => de_CompilationJobSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListContextsResponse = (output, context) => {
    return take(output, {
        ContextSummaries: (_) => de_ContextSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListDataQualityJobDefinitionsResponse = (output, context) => {
    return take(output, {
        JobDefinitionSummaries: (_) => de_MonitoringJobDefinitionSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListDeviceFleetsResponse = (output, context) => {
    return take(output, {
        DeviceFleetSummaries: (_) => de_DeviceFleetSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListDevicesResponse = (output, context) => {
    return take(output, {
        DeviceSummaries: (_) => de_DeviceSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListDomainsResponse = (output, context) => {
    return take(output, {
        Domains: (_) => de_DomainList(_, context),
        NextToken: __expectString,
    });
};
const de_ListEdgeDeploymentPlansResponse = (output, context) => {
    return take(output, {
        EdgeDeploymentPlanSummaries: (_) => de_EdgeDeploymentPlanSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListEdgePackagingJobsResponse = (output, context) => {
    return take(output, {
        EdgePackagingJobSummaries: (_) => de_EdgePackagingJobSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListEndpointConfigsOutput = (output, context) => {
    return take(output, {
        EndpointConfigs: (_) => de_EndpointConfigSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListEndpointsOutput = (output, context) => {
    return take(output, {
        Endpoints: (_) => de_EndpointSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListExperimentsResponse = (output, context) => {
    return take(output, {
        ExperimentSummaries: (_) => de_ExperimentSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListFeatureGroupsResponse = (output, context) => {
    return take(output, {
        FeatureGroupSummaries: (_) => de_FeatureGroupSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListFlowDefinitionsResponse = (output, context) => {
    return take(output, {
        FlowDefinitionSummaries: (_) => de_FlowDefinitionSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListHubContentsResponse = (output, context) => {
    return take(output, {
        HubContentSummaries: (_) => de_HubContentInfoList(_, context),
        NextToken: __expectString,
    });
};
const de_ListHubContentVersionsResponse = (output, context) => {
    return take(output, {
        HubContentSummaries: (_) => de_HubContentInfoList(_, context),
        NextToken: __expectString,
    });
};
const de_ListHubsResponse = (output, context) => {
    return take(output, {
        HubSummaries: (_) => de_HubInfoList(_, context),
        NextToken: __expectString,
    });
};
const de_ListHumanTaskUisResponse = (output, context) => {
    return take(output, {
        HumanTaskUiSummaries: (_) => de_HumanTaskUiSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListHyperParameterTuningJobsResponse = (output, context) => {
    return take(output, {
        HyperParameterTuningJobSummaries: (_) => de_HyperParameterTuningJobSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListImagesResponse = (output, context) => {
    return take(output, {
        Images: (_) => de_Images(_, context),
        NextToken: __expectString,
    });
};
const de_ListImageVersionsResponse = (output, context) => {
    return take(output, {
        ImageVersions: (_) => de_ImageVersions(_, context),
        NextToken: __expectString,
    });
};
const de_ListInferenceExperimentsResponse = (output, context) => {
    return take(output, {
        InferenceExperiments: (_) => de_InferenceExperimentList(_, context),
        NextToken: __expectString,
    });
};
const de_ListInferenceRecommendationsJobsResponse = (output, context) => {
    return take(output, {
        InferenceRecommendationsJobs: (_) => de_InferenceRecommendationsJobs(_, context),
        NextToken: __expectString,
    });
};
const de_ListInferenceRecommendationsJobStepsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Steps: (_) => de_InferenceRecommendationsJobSteps(_, context),
    });
};
const de_ListLabelingJobsForWorkteamResponse = (output, context) => {
    return take(output, {
        LabelingJobSummaryList: (_) => de_LabelingJobForWorkteamSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListLabelingJobsResponse = (output, context) => {
    return take(output, {
        LabelingJobSummaryList: (_) => de_LabelingJobSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListLineageGroupsResponse = (output, context) => {
    return take(output, {
        LineageGroupSummaries: (_) => de_LineageGroupSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListModelBiasJobDefinitionsResponse = (output, context) => {
    return take(output, {
        JobDefinitionSummaries: (_) => de_MonitoringJobDefinitionSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListModelCardExportJobsResponse = (output, context) => {
    return take(output, {
        ModelCardExportJobSummaries: (_) => de_ModelCardExportJobSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListModelCardsResponse = (output, context) => {
    return take(output, {
        ModelCardSummaries: (_) => de_ModelCardSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListModelCardVersionsResponse = (output, context) => {
    return take(output, {
        ModelCardVersionSummaryList: (_) => de_ModelCardVersionSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListModelExplainabilityJobDefinitionsResponse = (output, context) => {
    return take(output, {
        JobDefinitionSummaries: (_) => de_MonitoringJobDefinitionSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListModelPackageGroupsOutput = (output, context) => {
    return take(output, {
        ModelPackageGroupSummaryList: (_) => de_ModelPackageGroupSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListModelPackagesOutput = (output, context) => {
    return take(output, {
        ModelPackageSummaryList: (_) => de_ModelPackageSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListModelQualityJobDefinitionsResponse = (output, context) => {
    return take(output, {
        JobDefinitionSummaries: (_) => de_MonitoringJobDefinitionSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListModelsOutput = (output, context) => {
    return take(output, {
        Models: (_) => de_ModelSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListMonitoringAlertHistoryResponse = (output, context) => {
    return take(output, {
        MonitoringAlertHistory: (_) => de_MonitoringAlertHistoryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListMonitoringAlertsResponse = (output, context) => {
    return take(output, {
        MonitoringAlertSummaries: (_) => de_MonitoringAlertSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListMonitoringExecutionsResponse = (output, context) => {
    return take(output, {
        MonitoringExecutionSummaries: (_) => de_MonitoringExecutionSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListMonitoringSchedulesResponse = (output, context) => {
    return take(output, {
        MonitoringScheduleSummaries: (_) => de_MonitoringScheduleSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListNotebookInstanceLifecycleConfigsOutput = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        NotebookInstanceLifecycleConfigs: (_) => de_NotebookInstanceLifecycleConfigSummaryList(_, context),
    });
};
const de_ListNotebookInstancesOutput = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        NotebookInstances: (_) => de_NotebookInstanceSummaryList(_, context),
    });
};
const de_ListPipelineExecutionsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        PipelineExecutionSummaries: (_) => de_PipelineExecutionSummaryList(_, context),
    });
};
const de_ListPipelineExecutionStepsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        PipelineExecutionSteps: (_) => de_PipelineExecutionStepList(_, context),
    });
};
const de_ListPipelinesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        PipelineSummaries: (_) => de_PipelineSummaryList(_, context),
    });
};
const de_ListProcessingJobsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ProcessingJobSummaries: (_) => de_ProcessingJobSummaries(_, context),
    });
};
const de_ListProjectsOutput = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ProjectSummaryList: (_) => de_ProjectSummaryList(_, context),
    });
};
const de_ListSpacesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Spaces: (_) => de_SpaceList(_, context),
    });
};
const de_ListStageDevicesResponse = (output, context) => {
    return take(output, {
        DeviceDeploymentSummaries: (_) => de_DeviceDeploymentSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListStudioLifecycleConfigsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        StudioLifecycleConfigs: (_) => de_StudioLifecycleConfigsList(_, context),
    });
};
const de_ListTrainingJobsForHyperParameterTuningJobResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        TrainingJobSummaries: (_) => de_HyperParameterTrainingJobSummaries(_, context),
    });
};
const de_ListTrainingJobsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        TrainingJobSummaries: (_) => de_TrainingJobSummaries(_, context),
    });
};
const de_ListTransformJobsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        TransformJobSummaries: (_) => de_TransformJobSummaries(_, context),
    });
};
const de_ListTrialComponentsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        TrialComponentSummaries: (_) => de_TrialComponentSummaries(_, context),
    });
};
const de_ListTrialsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        TrialSummaries: (_) => de_TrialSummaries(_, context),
    });
};
const de_ListUserProfilesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        UserProfiles: (_) => de_UserProfileList(_, context),
    });
};
const de_ListWorkforcesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Workforces: (_) => de_Workforces(_, context),
    });
};
const de_ListWorkteamsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Workteams: (_) => de_Workteams(_, context),
    });
};
const de_MetricData = (output, context) => {
    return take(output, {
        MetricName: __expectString,
        Timestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Value: __limitedParseFloat32,
    });
};
const de_MetricDataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricDatum(entry, context);
    });
    return retVal;
};
const de_MetricDatum = (output, context) => {
    return take(output, {
        MetricName: __expectString,
        Set: __expectString,
        StandardMetricName: __expectString,
        Value: __limitedParseFloat32,
    });
};
const de_Model = (output, context) => {
    return take(output, {
        Containers: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EnableNetworkIsolation: __expectBoolean,
        ExecutionRoleArn: __expectString,
        InferenceExecutionConfig: _json,
        ModelArn: __expectString,
        ModelName: __expectString,
        PrimaryContainer: _json,
        Tags: _json,
        VpcConfig: _json,
    });
};
const de_ModelBiasJobInput = (output, context) => {
    return take(output, {
        BatchTransformInput: (_) => de_BatchTransformInput(_, context),
        EndpointInput: (_) => de_EndpointInput(_, context),
        GroundTruthS3Input: _json,
    });
};
const de_ModelCard = (output, context) => {
    return take(output, {
        Content: __expectString,
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelCardArn: __expectString,
        ModelCardName: __expectString,
        ModelCardStatus: __expectString,
        ModelCardVersion: __expectInt32,
        ModelId: __expectString,
        RiskRating: __expectString,
        SecurityConfig: _json,
        Tags: _json,
    });
};
const de_ModelCardExportJobSummary = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelCardExportJobArn: __expectString,
        ModelCardExportJobName: __expectString,
        ModelCardName: __expectString,
        ModelCardVersion: __expectInt32,
        Status: __expectString,
    });
};
const de_ModelCardExportJobSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelCardExportJobSummary(entry, context);
    });
    return retVal;
};
const de_ModelCardSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelCardArn: __expectString,
        ModelCardName: __expectString,
        ModelCardStatus: __expectString,
    });
};
const de_ModelCardSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelCardSummary(entry, context);
    });
    return retVal;
};
const de_ModelCardVersionSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelCardArn: __expectString,
        ModelCardName: __expectString,
        ModelCardStatus: __expectString,
        ModelCardVersion: __expectInt32,
    });
};
const de_ModelCardVersionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelCardVersionSummary(entry, context);
    });
    return retVal;
};
const de_ModelDashboardEndpoint = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndpointArn: __expectString,
        EndpointName: __expectString,
        EndpointStatus: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ModelDashboardEndpoints = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelDashboardEndpoint(entry, context);
    });
    return retVal;
};
const de_ModelDashboardModel = (output, context) => {
    return take(output, {
        Endpoints: (_) => de_ModelDashboardEndpoints(_, context),
        LastBatchTransformJob: (_) => de_TransformJob(_, context),
        Model: (_) => de_Model(_, context),
        ModelCard: (_) => de_ModelDashboardModelCard(_, context),
        MonitoringSchedules: (_) => de_ModelDashboardMonitoringSchedules(_, context),
    });
};
const de_ModelDashboardModelCard = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelCardArn: __expectString,
        ModelCardName: __expectString,
        ModelCardStatus: __expectString,
        ModelCardVersion: __expectInt32,
        ModelId: __expectString,
        RiskRating: __expectString,
        SecurityConfig: _json,
        Tags: _json,
    });
};
const de_ModelDashboardMonitoringSchedule = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndpointName: __expectString,
        FailureReason: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastMonitoringExecutionSummary: (_) => de_MonitoringExecutionSummary(_, context),
        MonitoringAlertSummaries: (_) => de_MonitoringAlertSummaryList(_, context),
        MonitoringScheduleArn: __expectString,
        MonitoringScheduleConfig: (_) => de_MonitoringScheduleConfig(_, context),
        MonitoringScheduleName: __expectString,
        MonitoringScheduleStatus: __expectString,
        MonitoringType: __expectString,
    });
};
const de_ModelDashboardMonitoringSchedules = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelDashboardMonitoringSchedule(entry, context);
    });
    return retVal;
};
const de_ModelExplainabilityJobInput = (output, context) => {
    return take(output, {
        BatchTransformInput: (_) => de_BatchTransformInput(_, context),
        EndpointInput: (_) => de_EndpointInput(_, context),
    });
};
const de_ModelPackage = (output, context) => {
    return take(output, {
        AdditionalInferenceSpecifications: _json,
        ApprovalDescription: __expectString,
        CertifyForMarketplace: __expectBoolean,
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CustomerMetadataProperties: _json,
        Domain: __expectString,
        DriftCheckBaselines: _json,
        InferenceSpecification: _json,
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MetadataProperties: _json,
        ModelApprovalStatus: __expectString,
        ModelMetrics: _json,
        ModelPackageArn: __expectString,
        ModelPackageDescription: __expectString,
        ModelPackageGroupName: __expectString,
        ModelPackageName: __expectString,
        ModelPackageStatus: __expectString,
        ModelPackageStatusDetails: _json,
        ModelPackageVersion: __expectInt32,
        SamplePayloadUrl: __expectString,
        SourceAlgorithmSpecification: _json,
        Tags: _json,
        Task: __expectString,
        ValidationSpecification: _json,
    });
};
const de_ModelPackageGroup = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelPackageGroupArn: __expectString,
        ModelPackageGroupDescription: __expectString,
        ModelPackageGroupName: __expectString,
        ModelPackageGroupStatus: __expectString,
        Tags: _json,
    });
};
const de_ModelPackageGroupSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelPackageGroupArn: __expectString,
        ModelPackageGroupDescription: __expectString,
        ModelPackageGroupName: __expectString,
        ModelPackageGroupStatus: __expectString,
    });
};
const de_ModelPackageGroupSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelPackageGroupSummary(entry, context);
    });
    return retVal;
};
const de_ModelPackageSummaries = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_BatchDescribeModelPackageSummary(value, context);
        return acc;
    }, {});
};
const de_ModelPackageSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelApprovalStatus: __expectString,
        ModelPackageArn: __expectString,
        ModelPackageDescription: __expectString,
        ModelPackageGroupName: __expectString,
        ModelPackageName: __expectString,
        ModelPackageStatus: __expectString,
        ModelPackageVersion: __expectInt32,
    });
};
const de_ModelPackageSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelPackageSummary(entry, context);
    });
    return retVal;
};
const de_ModelQualityJobInput = (output, context) => {
    return take(output, {
        BatchTransformInput: (_) => de_BatchTransformInput(_, context),
        EndpointInput: (_) => de_EndpointInput(_, context),
        GroundTruthS3Input: _json,
    });
};
const de_ModelSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelArn: __expectString,
        ModelName: __expectString,
    });
};
const de_ModelSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelSummary(entry, context);
    });
    return retVal;
};
const de_MonitoringAlertHistoryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MonitoringAlertHistorySummary(entry, context);
    });
    return retVal;
};
const de_MonitoringAlertHistorySummary = (output, context) => {
    return take(output, {
        AlertStatus: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MonitoringAlertName: __expectString,
        MonitoringScheduleName: __expectString,
    });
};
const de_MonitoringAlertSummary = (output, context) => {
    return take(output, {
        Actions: _json,
        AlertStatus: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatapointsToAlert: __expectInt32,
        EvaluationPeriod: __expectInt32,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MonitoringAlertName: __expectString,
    });
};
const de_MonitoringAlertSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MonitoringAlertSummary(entry, context);
    });
    return retVal;
};
const de_MonitoringExecutionSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndpointName: __expectString,
        FailureReason: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MonitoringExecutionStatus: __expectString,
        MonitoringJobDefinitionName: __expectString,
        MonitoringScheduleName: __expectString,
        MonitoringType: __expectString,
        ProcessingJobArn: __expectString,
        ScheduledTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_MonitoringExecutionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MonitoringExecutionSummary(entry, context);
    });
    return retVal;
};
const de_MonitoringInput = (output, context) => {
    return take(output, {
        BatchTransformInput: (_) => de_BatchTransformInput(_, context),
        EndpointInput: (_) => de_EndpointInput(_, context),
    });
};
const de_MonitoringInputs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MonitoringInput(entry, context);
    });
    return retVal;
};
const de_MonitoringJobDefinition = (output, context) => {
    return take(output, {
        BaselineConfig: _json,
        Environment: _json,
        MonitoringAppSpecification: _json,
        MonitoringInputs: (_) => de_MonitoringInputs(_, context),
        MonitoringOutputConfig: _json,
        MonitoringResources: _json,
        NetworkConfig: _json,
        RoleArn: __expectString,
        StoppingCondition: _json,
    });
};
const de_MonitoringJobDefinitionSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndpointName: __expectString,
        MonitoringJobDefinitionArn: __expectString,
        MonitoringJobDefinitionName: __expectString,
    });
};
const de_MonitoringJobDefinitionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MonitoringJobDefinitionSummary(entry, context);
    });
    return retVal;
};
const de_MonitoringSchedule = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndpointName: __expectString,
        FailureReason: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastMonitoringExecutionSummary: (_) => de_MonitoringExecutionSummary(_, context),
        MonitoringScheduleArn: __expectString,
        MonitoringScheduleConfig: (_) => de_MonitoringScheduleConfig(_, context),
        MonitoringScheduleName: __expectString,
        MonitoringScheduleStatus: __expectString,
        MonitoringType: __expectString,
        Tags: _json,
    });
};
const de_MonitoringScheduleConfig = (output, context) => {
    return take(output, {
        MonitoringJobDefinition: (_) => de_MonitoringJobDefinition(_, context),
        MonitoringJobDefinitionName: __expectString,
        MonitoringType: __expectString,
        ScheduleConfig: _json,
    });
};
const de_MonitoringScheduleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MonitoringSchedule(entry, context);
    });
    return retVal;
};
const de_MonitoringScheduleSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndpointName: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MonitoringJobDefinitionName: __expectString,
        MonitoringScheduleArn: __expectString,
        MonitoringScheduleName: __expectString,
        MonitoringScheduleStatus: __expectString,
        MonitoringType: __expectString,
    });
};
const de_MonitoringScheduleSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MonitoringScheduleSummary(entry, context);
    });
    return retVal;
};
const de_NotebookInstanceLifecycleConfigSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NotebookInstanceLifecycleConfigArn: __expectString,
        NotebookInstanceLifecycleConfigName: __expectString,
    });
};
const de_NotebookInstanceLifecycleConfigSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NotebookInstanceLifecycleConfigSummary(entry, context);
    });
    return retVal;
};
const de_NotebookInstanceSummary = (output, context) => {
    return take(output, {
        AdditionalCodeRepositories: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DefaultCodeRepository: __expectString,
        InstanceType: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NotebookInstanceArn: __expectString,
        NotebookInstanceLifecycleConfigName: __expectString,
        NotebookInstanceName: __expectString,
        NotebookInstanceStatus: __expectString,
        Url: __expectString,
    });
};
const de_NotebookInstanceSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NotebookInstanceSummary(entry, context);
    });
    return retVal;
};
const de_PendingDeploymentSummary = (output, context) => {
    return take(output, {
        EndpointConfigName: __expectString,
        ProductionVariants: (_) => de_PendingProductionVariantSummaryList(_, context),
        ShadowProductionVariants: (_) => de_PendingProductionVariantSummaryList(_, context),
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_PendingProductionVariantSummary = (output, context) => {
    return take(output, {
        AcceleratorType: __expectString,
        CurrentInstanceCount: __expectInt32,
        CurrentServerlessConfig: _json,
        CurrentWeight: __limitedParseFloat32,
        DeployedImages: (_) => de_DeployedImages(_, context),
        DesiredInstanceCount: __expectInt32,
        DesiredServerlessConfig: _json,
        DesiredWeight: __limitedParseFloat32,
        InstanceType: __expectString,
        VariantName: __expectString,
        VariantStatus: (_) => de_ProductionVariantStatusList(_, context),
    });
};
const de_PendingProductionVariantSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PendingProductionVariantSummary(entry, context);
    });
    return retVal;
};
const de_Pipeline = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastRunTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ParallelismConfiguration: _json,
        PipelineArn: __expectString,
        PipelineDescription: __expectString,
        PipelineDisplayName: __expectString,
        PipelineName: __expectString,
        PipelineStatus: __expectString,
        RoleArn: __expectString,
        Tags: _json,
    });
};
const de_PipelineExecution = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ParallelismConfiguration: _json,
        PipelineArn: __expectString,
        PipelineExecutionArn: __expectString,
        PipelineExecutionDescription: __expectString,
        PipelineExecutionDisplayName: __expectString,
        PipelineExecutionStatus: __expectString,
        PipelineExperimentConfig: _json,
        PipelineParameters: _json,
    });
};
const de_PipelineExecutionStep = (output, context) => {
    return take(output, {
        AttemptCount: __expectInt32,
        CacheHitResult: _json,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        Metadata: _json,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StepDescription: __expectString,
        StepDisplayName: __expectString,
        StepName: __expectString,
        StepStatus: __expectString,
    });
};
const de_PipelineExecutionStepList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PipelineExecutionStep(entry, context);
    });
    return retVal;
};
const de_PipelineExecutionSummary = (output, context) => {
    return take(output, {
        PipelineExecutionArn: __expectString,
        PipelineExecutionDescription: __expectString,
        PipelineExecutionDisplayName: __expectString,
        PipelineExecutionFailureReason: __expectString,
        PipelineExecutionStatus: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_PipelineExecutionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PipelineExecutionSummary(entry, context);
    });
    return retVal;
};
const de_PipelineSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastExecutionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PipelineArn: __expectString,
        PipelineDescription: __expectString,
        PipelineDisplayName: __expectString,
        PipelineName: __expectString,
        RoleArn: __expectString,
    });
};
const de_PipelineSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PipelineSummary(entry, context);
    });
    return retVal;
};
const de_ProcessingJob = (output, context) => {
    return take(output, {
        AppSpecification: _json,
        AutoMLJobArn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Environment: _json,
        ExitMessage: __expectString,
        ExperimentConfig: _json,
        FailureReason: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MonitoringScheduleArn: __expectString,
        NetworkConfig: _json,
        ProcessingEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ProcessingInputs: _json,
        ProcessingJobArn: __expectString,
        ProcessingJobName: __expectString,
        ProcessingJobStatus: __expectString,
        ProcessingOutputConfig: _json,
        ProcessingResources: _json,
        ProcessingStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RoleArn: __expectString,
        StoppingCondition: _json,
        Tags: _json,
        TrainingJobArn: __expectString,
    });
};
const de_ProcessingJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProcessingJobSummary(entry, context);
    });
    return retVal;
};
const de_ProcessingJobSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ExitMessage: __expectString,
        FailureReason: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ProcessingEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ProcessingJobArn: __expectString,
        ProcessingJobName: __expectString,
        ProcessingJobStatus: __expectString,
    });
};
const de_ProductionVariant = (output, context) => {
    return take(output, {
        AcceleratorType: __expectString,
        ContainerStartupHealthCheckTimeoutInSeconds: __expectInt32,
        CoreDumpConfig: _json,
        EnableSSMAccess: __expectBoolean,
        InitialInstanceCount: __expectInt32,
        InitialVariantWeight: __limitedParseFloat32,
        InstanceType: __expectString,
        ModelDataDownloadTimeoutInSeconds: __expectInt32,
        ModelName: __expectString,
        ServerlessConfig: _json,
        VariantName: __expectString,
        VolumeSizeInGB: __expectInt32,
    });
};
const de_ProductionVariantList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProductionVariant(entry, context);
    });
    return retVal;
};
const de_ProductionVariantStatus = (output, context) => {
    return take(output, {
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        StatusMessage: __expectString,
    });
};
const de_ProductionVariantStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProductionVariantStatus(entry, context);
    });
    return retVal;
};
const de_ProductionVariantSummary = (output, context) => {
    return take(output, {
        CurrentInstanceCount: __expectInt32,
        CurrentServerlessConfig: _json,
        CurrentWeight: __limitedParseFloat32,
        DeployedImages: (_) => de_DeployedImages(_, context),
        DesiredInstanceCount: __expectInt32,
        DesiredServerlessConfig: _json,
        DesiredWeight: __limitedParseFloat32,
        VariantName: __expectString,
        VariantStatus: (_) => de_ProductionVariantStatusList(_, context),
    });
};
const de_ProductionVariantSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProductionVariantSummary(entry, context);
    });
    return retVal;
};
const de_ProfilerRuleEvaluationStatus = (output, context) => {
    return take(output, {
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RuleConfigurationName: __expectString,
        RuleEvaluationJobArn: __expectString,
        RuleEvaluationStatus: __expectString,
        StatusDetails: __expectString,
    });
};
const de_ProfilerRuleEvaluationStatuses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProfilerRuleEvaluationStatus(entry, context);
    });
    return retVal;
};
const de_Project = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ProjectArn: __expectString,
        ProjectDescription: __expectString,
        ProjectId: __expectString,
        ProjectName: __expectString,
        ProjectStatus: __expectString,
        ServiceCatalogProvisionedProductDetails: _json,
        ServiceCatalogProvisioningDetails: _json,
        Tags: _json,
    });
};
const de_ProjectSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ProjectArn: __expectString,
        ProjectDescription: __expectString,
        ProjectId: __expectString,
        ProjectName: __expectString,
        ProjectStatus: __expectString,
    });
};
const de_ProjectSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProjectSummary(entry, context);
    });
    return retVal;
};
const de_RecommendationJobInferenceBenchmark = (output, context) => {
    return take(output, {
        EndpointConfiguration: _json,
        EndpointMetrics: _json,
        FailureReason: __expectString,
        Metrics: (_) => de_RecommendationMetrics(_, context),
        ModelConfiguration: _json,
    });
};
const de_RecommendationMetrics = (output, context) => {
    return take(output, {
        CostPerHour: __limitedParseFloat32,
        CostPerInference: __limitedParseFloat32,
        CpuUtilization: __limitedParseFloat32,
        MaxInvocations: __expectInt32,
        MemoryUtilization: __limitedParseFloat32,
        ModelLatency: __expectInt32,
    });
};
const de_SearchRecord = (output, context) => {
    return take(output, {
        Endpoint: (_) => de_Endpoint(_, context),
        Experiment: (_) => de_Experiment(_, context),
        FeatureGroup: (_) => de_FeatureGroup(_, context),
        FeatureMetadata: (_) => de_FeatureMetadata(_, context),
        HyperParameterTuningJob: (_) => de_HyperParameterTuningJobSearchEntity(_, context),
        Model: (_) => de_ModelDashboardModel(_, context),
        ModelCard: (_) => de_ModelCard(_, context),
        ModelPackage: (_) => de_ModelPackage(_, context),
        ModelPackageGroup: (_) => de_ModelPackageGroup(_, context),
        Pipeline: (_) => de_Pipeline(_, context),
        PipelineExecution: (_) => de_PipelineExecution(_, context),
        Project: (_) => de_Project(_, context),
        TrainingJob: (_) => de_TrainingJob(_, context),
        Trial: (_) => de_Trial(_, context),
        TrialComponent: (_) => de_TrialComponent(_, context),
    });
};
const de_SearchResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Results: (_) => de_SearchResultsList(_, context),
    });
};
const de_SearchResultsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SearchRecord(entry, context);
    });
    return retVal;
};
const de_SecondaryStatusTransition = (output, context) => {
    return take(output, {
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        StatusMessage: __expectString,
    });
};
const de_SecondaryStatusTransitions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecondaryStatusTransition(entry, context);
    });
    return retVal;
};
const de_SpaceDetails = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DomainId: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SpaceName: __expectString,
        Status: __expectString,
    });
};
const de_SpaceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SpaceDetails(entry, context);
    });
    return retVal;
};
const de_StudioLifecycleConfigDetails = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StudioLifecycleConfigAppType: __expectString,
        StudioLifecycleConfigArn: __expectString,
        StudioLifecycleConfigName: __expectString,
    });
};
const de_StudioLifecycleConfigsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StudioLifecycleConfigDetails(entry, context);
    });
    return retVal;
};
const de_TrainingJob = (output, context) => {
    return take(output, {
        AlgorithmSpecification: _json,
        AutoMLJobArn: __expectString,
        BillableTimeInSeconds: __expectInt32,
        CheckpointConfig: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DebugHookConfig: _json,
        DebugRuleConfigurations: _json,
        DebugRuleEvaluationStatuses: (_) => de_DebugRuleEvaluationStatuses(_, context),
        EnableInterContainerTrafficEncryption: __expectBoolean,
        EnableManagedSpotTraining: __expectBoolean,
        EnableNetworkIsolation: __expectBoolean,
        Environment: _json,
        ExperimentConfig: _json,
        FailureReason: __expectString,
        FinalMetricDataList: (_) => de_FinalMetricDataList(_, context),
        HyperParameters: _json,
        InputDataConfig: _json,
        LabelingJobArn: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelArtifacts: _json,
        OutputDataConfig: _json,
        ResourceConfig: _json,
        RetryStrategy: _json,
        RoleArn: __expectString,
        SecondaryStatus: __expectString,
        SecondaryStatusTransitions: (_) => de_SecondaryStatusTransitions(_, context),
        StoppingCondition: _json,
        Tags: _json,
        TensorBoardOutputConfig: _json,
        TrainingEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrainingJobArn: __expectString,
        TrainingJobName: __expectString,
        TrainingJobStatus: __expectString,
        TrainingStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrainingTimeInSeconds: __expectInt32,
        TuningJobArn: __expectString,
        VpcConfig: _json,
    });
};
const de_TrainingJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrainingJobSummary(entry, context);
    });
    return retVal;
};
const de_TrainingJobSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrainingEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrainingJobArn: __expectString,
        TrainingJobName: __expectString,
        TrainingJobStatus: __expectString,
        WarmPoolStatus: _json,
    });
};
const de_TransformJob = (output, context) => {
    return take(output, {
        AutoMLJobArn: __expectString,
        BatchStrategy: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataProcessing: _json,
        Environment: _json,
        ExperimentConfig: _json,
        FailureReason: __expectString,
        LabelingJobArn: __expectString,
        MaxConcurrentTransforms: __expectInt32,
        MaxPayloadInMB: __expectInt32,
        ModelClientConfig: _json,
        ModelName: __expectString,
        Tags: _json,
        TransformEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TransformInput: _json,
        TransformJobArn: __expectString,
        TransformJobName: __expectString,
        TransformJobStatus: __expectString,
        TransformOutput: _json,
        TransformResources: _json,
        TransformStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_TransformJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransformJobSummary(entry, context);
    });
    return retVal;
};
const de_TransformJobSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TransformEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TransformJobArn: __expectString,
        TransformJobName: __expectString,
        TransformJobStatus: __expectString,
    });
};
const de_Trial = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DisplayName: __expectString,
        ExperimentName: __expectString,
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MetadataProperties: _json,
        Source: _json,
        Tags: _json,
        TrialArn: __expectString,
        TrialComponentSummaries: (_) => de_TrialComponentSimpleSummaries(_, context),
        TrialName: __expectString,
    });
};
const de_TrialComponent = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DisplayName: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputArtifacts: _json,
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LineageGroupArn: __expectString,
        MetadataProperties: _json,
        Metrics: (_) => de_TrialComponentMetricSummaries(_, context),
        OutputArtifacts: _json,
        Parameters: (_) => de_TrialComponentParameters(_, context),
        Parents: _json,
        RunName: __expectString,
        Source: _json,
        SourceDetail: (_) => de_TrialComponentSourceDetail(_, context),
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: _json,
        Tags: _json,
        TrialComponentArn: __expectString,
        TrialComponentName: __expectString,
    });
};
const de_TrialComponentMetricSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrialComponentMetricSummary(entry, context);
    });
    return retVal;
};
const de_TrialComponentMetricSummary = (output, context) => {
    return take(output, {
        Avg: __limitedParseDouble,
        Count: __expectInt32,
        Last: __limitedParseDouble,
        Max: __limitedParseDouble,
        MetricName: __expectString,
        Min: __limitedParseDouble,
        SourceArn: __expectString,
        StdDev: __limitedParseDouble,
        TimeStamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_TrialComponentParameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_TrialComponentParameterValue(__expectUnion(value), context);
        return acc;
    }, {});
};
const de_TrialComponentParameterValue = (output, context) => {
    if (__limitedParseDouble(output.NumberValue) !== undefined) {
        return { NumberValue: __limitedParseDouble(output.NumberValue) };
    }
    if (__expectString(output.StringValue) !== undefined) {
        return { StringValue: __expectString(output.StringValue) };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_TrialComponentSimpleSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrialComponentSimpleSummary(entry, context);
    });
    return retVal;
};
const de_TrialComponentSimpleSummary = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrialComponentArn: __expectString,
        TrialComponentName: __expectString,
        TrialComponentSource: _json,
    });
};
const de_TrialComponentSourceDetail = (output, context) => {
    return take(output, {
        ProcessingJob: (_) => de_ProcessingJob(_, context),
        SourceArn: __expectString,
        TrainingJob: (_) => de_TrainingJob(_, context),
        TransformJob: (_) => de_TransformJob(_, context),
    });
};
const de_TrialComponentSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrialComponentSummary(entry, context);
    });
    return retVal;
};
const de_TrialComponentSummary = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DisplayName: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedBy: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: _json,
        TrialComponentArn: __expectString,
        TrialComponentName: __expectString,
        TrialComponentSource: _json,
    });
};
const de_TrialSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrialSummary(entry, context);
    });
    return retVal;
};
const de_TrialSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DisplayName: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrialArn: __expectString,
        TrialName: __expectString,
        TrialSource: _json,
    });
};
const de_TuningJobCompletionCriteria = (output, context) => {
    return take(output, {
        BestObjectiveNotImproving: _json,
        ConvergenceDetected: _json,
        TargetObjectiveMetricValue: __limitedParseFloat32,
    });
};
const de_UpdateWorkforceResponse = (output, context) => {
    return take(output, {
        Workforce: (_) => de_Workforce(_, context),
    });
};
const de_UpdateWorkteamResponse = (output, context) => {
    return take(output, {
        Workteam: (_) => de_Workteam(_, context),
    });
};
const de_UserProfileDetails = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DomainId: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        UserProfileName: __expectString,
    });
};
const de_UserProfileList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserProfileDetails(entry, context);
    });
    return retVal;
};
const de_Workforce = (output, context) => {
    return take(output, {
        CognitoConfig: _json,
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        LastUpdatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OidcConfig: _json,
        SourceIpConfig: _json,
        Status: __expectString,
        SubDomain: __expectString,
        WorkforceArn: __expectString,
        WorkforceName: __expectString,
        WorkforceVpcConfig: _json,
    });
};
const de_Workforces = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Workforce(entry, context);
    });
    return retVal;
};
const de_Workteam = (output, context) => {
    return take(output, {
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        LastUpdatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MemberDefinitions: _json,
        NotificationConfiguration: _json,
        ProductListingIds: _json,
        SubDomain: __expectString,
        WorkforceArn: __expectString,
        WorkteamArn: __expectString,
        WorkteamName: __expectString,
    });
};
const de_Workteams = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Workteam(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `SageMaker.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
