import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { SageMakerServiceException as __BaseException } from "./SageMakerServiceException";
export interface ActionSource {
  SourceUri: string | undefined;
  SourceType?: string;
  SourceId?: string;
}
export declare const ActionStatus: {
  readonly COMPLETED: "Completed";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
  readonly UNKNOWN: "Unknown";
};
export type ActionStatus = (typeof ActionStatus)[keyof typeof ActionStatus];
export interface ActionSummary {
  ActionArn?: string;
  ActionName?: string;
  Source?: ActionSource;
  ActionType?: string;
  Status?: ActionStatus | string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export declare const AssociationEdgeType: {
  readonly ASSOCIATED_WITH: "AssociatedWith";
  readonly CONTRIBUTED_TO: "ContributedTo";
  readonly DERIVED_FROM: "DerivedFrom";
  readonly PRODUCED: "Produced";
};
export type AssociationEdgeType =
  (typeof AssociationEdgeType)[keyof typeof AssociationEdgeType];
export interface AddAssociationRequest {
  SourceArn: string | undefined;
  DestinationArn: string | undefined;
  AssociationType?: AssociationEdgeType | string;
}
export interface AddAssociationResponse {
  SourceArn?: string;
  DestinationArn?: string;
}
export declare class ResourceLimitExceeded extends __BaseException {
  readonly name: "ResourceLimitExceeded";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceLimitExceeded, __BaseException>
  );
}
export declare class ResourceNotFound extends __BaseException {
  readonly name: "ResourceNotFound";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ResourceNotFound, __BaseException>);
}
export interface ModelInput {
  DataInputConfig: string | undefined;
}
export interface ModelPackageContainerDefinition {
  ContainerHostname?: string;
  Image: string | undefined;
  ImageDigest?: string;
  ModelDataUrl?: string;
  ProductId?: string;
  Environment?: Record<string, string>;
  ModelInput?: ModelInput;
  Framework?: string;
  FrameworkVersion?: string;
  NearestModelName?: string;
}
export declare const ProductionVariantInstanceType: {
  readonly ML_C4_2XLARGE: "ml.c4.2xlarge";
  readonly ML_C4_4XLARGE: "ml.c4.4xlarge";
  readonly ML_C4_8XLARGE: "ml.c4.8xlarge";
  readonly ML_C4_LARGE: "ml.c4.large";
  readonly ML_C4_XLARGE: "ml.c4.xlarge";
  readonly ML_C5D_18XLARGE: "ml.c5d.18xlarge";
  readonly ML_C5D_2XLARGE: "ml.c5d.2xlarge";
  readonly ML_C5D_4XLARGE: "ml.c5d.4xlarge";
  readonly ML_C5D_9XLARGE: "ml.c5d.9xlarge";
  readonly ML_C5D_LARGE: "ml.c5d.large";
  readonly ML_C5D_XLARGE: "ml.c5d.xlarge";
  readonly ML_C5_18XLARGE: "ml.c5.18xlarge";
  readonly ML_C5_2XLARGE: "ml.c5.2xlarge";
  readonly ML_C5_4XLARGE: "ml.c5.4xlarge";
  readonly ML_C5_9XLARGE: "ml.c5.9xlarge";
  readonly ML_C5_LARGE: "ml.c5.large";
  readonly ML_C5_XLARGE: "ml.c5.xlarge";
  readonly ML_C6GD_12XLARGE: "ml.c6gd.12xlarge";
  readonly ML_C6GD_16XLARGE: "ml.c6gd.16xlarge";
  readonly ML_C6GD_2XLARGE: "ml.c6gd.2xlarge";
  readonly ML_C6GD_4XLARGE: "ml.c6gd.4xlarge";
  readonly ML_C6GD_8XLARGE: "ml.c6gd.8xlarge";
  readonly ML_C6GD_LARGE: "ml.c6gd.large";
  readonly ML_C6GD_XLARGE: "ml.c6gd.xlarge";
  readonly ML_C6GN_12XLARGE: "ml.c6gn.12xlarge";
  readonly ML_C6GN_16XLARGE: "ml.c6gn.16xlarge";
  readonly ML_C6GN_2XLARGE: "ml.c6gn.2xlarge";
  readonly ML_C6GN_4XLARGE: "ml.c6gn.4xlarge";
  readonly ML_C6GN_8XLARGE: "ml.c6gn.8xlarge";
  readonly ML_C6GN_LARGE: "ml.c6gn.large";
  readonly ML_C6GN_XLARGE: "ml.c6gn.xlarge";
  readonly ML_C6G_12XLARGE: "ml.c6g.12xlarge";
  readonly ML_C6G_16XLARGE: "ml.c6g.16xlarge";
  readonly ML_C6G_2XLARGE: "ml.c6g.2xlarge";
  readonly ML_C6G_4XLARGE: "ml.c6g.4xlarge";
  readonly ML_C6G_8XLARGE: "ml.c6g.8xlarge";
  readonly ML_C6G_LARGE: "ml.c6g.large";
  readonly ML_C6G_XLARGE: "ml.c6g.xlarge";
  readonly ML_C6I_12XLARGE: "ml.c6i.12xlarge";
  readonly ML_C6I_16XLARGE: "ml.c6i.16xlarge";
  readonly ML_C6I_24XLARGE: "ml.c6i.24xlarge";
  readonly ML_C6I_2XLARGE: "ml.c6i.2xlarge";
  readonly ML_C6I_32XLARGE: "ml.c6i.32xlarge";
  readonly ML_C6I_4XLARGE: "ml.c6i.4xlarge";
  readonly ML_C6I_8XLARGE: "ml.c6i.8xlarge";
  readonly ML_C6I_LARGE: "ml.c6i.large";
  readonly ML_C6I_XLARGE: "ml.c6i.xlarge";
  readonly ML_C7G_12XLARGE: "ml.c7g.12xlarge";
  readonly ML_C7G_16XLARGE: "ml.c7g.16xlarge";
  readonly ML_C7G_2XLARGE: "ml.c7g.2xlarge";
  readonly ML_C7G_4XLARGE: "ml.c7g.4xlarge";
  readonly ML_C7G_8XLARGE: "ml.c7g.8xlarge";
  readonly ML_C7G_LARGE: "ml.c7g.large";
  readonly ML_C7G_XLARGE: "ml.c7g.xlarge";
  readonly ML_G4DN_12XLARGE: "ml.g4dn.12xlarge";
  readonly ML_G4DN_16XLARGE: "ml.g4dn.16xlarge";
  readonly ML_G4DN_2XLARGE: "ml.g4dn.2xlarge";
  readonly ML_G4DN_4XLARGE: "ml.g4dn.4xlarge";
  readonly ML_G4DN_8XLARGE: "ml.g4dn.8xlarge";
  readonly ML_G4DN_XLARGE: "ml.g4dn.xlarge";
  readonly ML_G5_12XLARGE: "ml.g5.12xlarge";
  readonly ML_G5_16XLARGE: "ml.g5.16xlarge";
  readonly ML_G5_24XLARGE: "ml.g5.24xlarge";
  readonly ML_G5_2XLARGE: "ml.g5.2xlarge";
  readonly ML_G5_48XLARGE: "ml.g5.48xlarge";
  readonly ML_G5_4XLARGE: "ml.g5.4xlarge";
  readonly ML_G5_8XLARGE: "ml.g5.8xlarge";
  readonly ML_G5_XLARGE: "ml.g5.xlarge";
  readonly ML_INF1_24XLARGE: "ml.inf1.24xlarge";
  readonly ML_INF1_2XLARGE: "ml.inf1.2xlarge";
  readonly ML_INF1_6XLARGE: "ml.inf1.6xlarge";
  readonly ML_INF1_XLARGE: "ml.inf1.xlarge";
  readonly ML_M4_10XLARGE: "ml.m4.10xlarge";
  readonly ML_M4_16XLARGE: "ml.m4.16xlarge";
  readonly ML_M4_2XLARGE: "ml.m4.2xlarge";
  readonly ML_M4_4XLARGE: "ml.m4.4xlarge";
  readonly ML_M4_XLARGE: "ml.m4.xlarge";
  readonly ML_M5D_12XLARGE: "ml.m5d.12xlarge";
  readonly ML_M5D_24XLARGE: "ml.m5d.24xlarge";
  readonly ML_M5D_2XLARGE: "ml.m5d.2xlarge";
  readonly ML_M5D_4XLARGE: "ml.m5d.4xlarge";
  readonly ML_M5D_LARGE: "ml.m5d.large";
  readonly ML_M5D_XLARGE: "ml.m5d.xlarge";
  readonly ML_M5_12XLARGE: "ml.m5.12xlarge";
  readonly ML_M5_24XLARGE: "ml.m5.24xlarge";
  readonly ML_M5_2XLARGE: "ml.m5.2xlarge";
  readonly ML_M5_4XLARGE: "ml.m5.4xlarge";
  readonly ML_M5_LARGE: "ml.m5.large";
  readonly ML_M5_XLARGE: "ml.m5.xlarge";
  readonly ML_M6GD_12XLARGE: "ml.m6gd.12xlarge";
  readonly ML_M6GD_16XLARGE: "ml.m6gd.16xlarge";
  readonly ML_M6GD_2XLARGE: "ml.m6gd.2xlarge";
  readonly ML_M6GD_4XLARGE: "ml.m6gd.4xlarge";
  readonly ML_M6GD_8XLARGE: "ml.m6gd.8xlarge";
  readonly ML_M6GD_LARGE: "ml.m6gd.large";
  readonly ML_M6GD_XLARGE: "ml.m6gd.xlarge";
  readonly ML_M6G_12XLARGE: "ml.m6g.12xlarge";
  readonly ML_M6G_16XLARGE: "ml.m6g.16xlarge";
  readonly ML_M6G_2XLARGE: "ml.m6g.2xlarge";
  readonly ML_M6G_4XLARGE: "ml.m6g.4xlarge";
  readonly ML_M6G_8XLARGE: "ml.m6g.8xlarge";
  readonly ML_M6G_LARGE: "ml.m6g.large";
  readonly ML_M6G_XLARGE: "ml.m6g.xlarge";
  readonly ML_P2_16XLARGE: "ml.p2.16xlarge";
  readonly ML_P2_8XLARGE: "ml.p2.8xlarge";
  readonly ML_P2_XLARGE: "ml.p2.xlarge";
  readonly ML_P3_16XLARGE: "ml.p3.16xlarge";
  readonly ML_P3_2XLARGE: "ml.p3.2xlarge";
  readonly ML_P3_8XLARGE: "ml.p3.8xlarge";
  readonly ML_P4DE_24XLARGE: "ml.p4de.24xlarge";
  readonly ML_P4D_24XLARGE: "ml.p4d.24xlarge";
  readonly ML_R5D_12XLARGE: "ml.r5d.12xlarge";
  readonly ML_R5D_24XLARGE: "ml.r5d.24xlarge";
  readonly ML_R5D_2XLARGE: "ml.r5d.2xlarge";
  readonly ML_R5D_4XLARGE: "ml.r5d.4xlarge";
  readonly ML_R5D_LARGE: "ml.r5d.large";
  readonly ML_R5D_XLARGE: "ml.r5d.xlarge";
  readonly ML_R5_12XLARGE: "ml.r5.12xlarge";
  readonly ML_R5_24XLARGE: "ml.r5.24xlarge";
  readonly ML_R5_2XLARGE: "ml.r5.2xlarge";
  readonly ML_R5_4XLARGE: "ml.r5.4xlarge";
  readonly ML_R5_LARGE: "ml.r5.large";
  readonly ML_R5_XLARGE: "ml.r5.xlarge";
  readonly ML_R6GD_12XLARGE: "ml.r6gd.12xlarge";
  readonly ML_R6GD_16XLARGE: "ml.r6gd.16xlarge";
  readonly ML_R6GD_2XLARGE: "ml.r6gd.2xlarge";
  readonly ML_R6GD_4XLARGE: "ml.r6gd.4xlarge";
  readonly ML_R6GD_8XLARGE: "ml.r6gd.8xlarge";
  readonly ML_R6GD_LARGE: "ml.r6gd.large";
  readonly ML_R6GD_XLARGE: "ml.r6gd.xlarge";
  readonly ML_R6G_12XLARGE: "ml.r6g.12xlarge";
  readonly ML_R6G_16XLARGE: "ml.r6g.16xlarge";
  readonly ML_R6G_2XLARGE: "ml.r6g.2xlarge";
  readonly ML_R6G_4XLARGE: "ml.r6g.4xlarge";
  readonly ML_R6G_8XLARGE: "ml.r6g.8xlarge";
  readonly ML_R6G_LARGE: "ml.r6g.large";
  readonly ML_R6G_XLARGE: "ml.r6g.xlarge";
  readonly ML_T2_2XLARGE: "ml.t2.2xlarge";
  readonly ML_T2_LARGE: "ml.t2.large";
  readonly ML_T2_MEDIUM: "ml.t2.medium";
  readonly ML_T2_XLARGE: "ml.t2.xlarge";
};
export type ProductionVariantInstanceType =
  (typeof ProductionVariantInstanceType)[keyof typeof ProductionVariantInstanceType];
export declare const TransformInstanceType: {
  readonly ML_C4_2XLARGE: "ml.c4.2xlarge";
  readonly ML_C4_4XLARGE: "ml.c4.4xlarge";
  readonly ML_C4_8XLARGE: "ml.c4.8xlarge";
  readonly ML_C4_XLARGE: "ml.c4.xlarge";
  readonly ML_C5_18XLARGE: "ml.c5.18xlarge";
  readonly ML_C5_2XLARGE: "ml.c5.2xlarge";
  readonly ML_C5_4XLARGE: "ml.c5.4xlarge";
  readonly ML_C5_9XLARGE: "ml.c5.9xlarge";
  readonly ML_C5_XLARGE: "ml.c5.xlarge";
  readonly ML_G4DN_12XLARGE: "ml.g4dn.12xlarge";
  readonly ML_G4DN_16XLARGE: "ml.g4dn.16xlarge";
  readonly ML_G4DN_2XLARGE: "ml.g4dn.2xlarge";
  readonly ML_G4DN_4XLARGE: "ml.g4dn.4xlarge";
  readonly ML_G4DN_8XLARGE: "ml.g4dn.8xlarge";
  readonly ML_G4DN_XLARGE: "ml.g4dn.xlarge";
  readonly ML_M4_10XLARGE: "ml.m4.10xlarge";
  readonly ML_M4_16XLARGE: "ml.m4.16xlarge";
  readonly ML_M4_2XLARGE: "ml.m4.2xlarge";
  readonly ML_M4_4XLARGE: "ml.m4.4xlarge";
  readonly ML_M4_XLARGE: "ml.m4.xlarge";
  readonly ML_M5_12XLARGE: "ml.m5.12xlarge";
  readonly ML_M5_24XLARGE: "ml.m5.24xlarge";
  readonly ML_M5_2XLARGE: "ml.m5.2xlarge";
  readonly ML_M5_4XLARGE: "ml.m5.4xlarge";
  readonly ML_M5_LARGE: "ml.m5.large";
  readonly ML_M5_XLARGE: "ml.m5.xlarge";
  readonly ML_P2_16XLARGE: "ml.p2.16xlarge";
  readonly ML_P2_8XLARGE: "ml.p2.8xlarge";
  readonly ML_P2_XLARGE: "ml.p2.xlarge";
  readonly ML_P3_16XLARGE: "ml.p3.16xlarge";
  readonly ML_P3_2XLARGE: "ml.p3.2xlarge";
  readonly ML_P3_8XLARGE: "ml.p3.8xlarge";
};
export type TransformInstanceType =
  (typeof TransformInstanceType)[keyof typeof TransformInstanceType];
export interface AdditionalInferenceSpecificationDefinition {
  Name: string | undefined;
  Description?: string;
  Containers: ModelPackageContainerDefinition[] | undefined;
  SupportedTransformInstanceTypes?: (TransformInstanceType | string)[];
  SupportedRealtimeInferenceInstanceTypes?: (
    | ProductionVariantInstanceType
    | string
  )[];
  SupportedContentTypes?: string[];
  SupportedResponseMIMETypes?: string[];
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface AddTagsInput {
  ResourceArn: string | undefined;
  Tags: Tag[] | undefined;
}
export interface AddTagsOutput {
  Tags?: Tag[];
}
export interface AgentVersion {
  Version: string | undefined;
  AgentCount: number | undefined;
}
export interface Alarm {
  AlarmName?: string;
}
export declare const AlgorithmSortBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
};
export type AlgorithmSortBy =
  (typeof AlgorithmSortBy)[keyof typeof AlgorithmSortBy];
export interface MetricDefinition {
  Name: string | undefined;
  Regex: string | undefined;
}
export declare const TrainingRepositoryAccessMode: {
  readonly PLATFORM: "Platform";
  readonly VPC: "Vpc";
};
export type TrainingRepositoryAccessMode =
  (typeof TrainingRepositoryAccessMode)[keyof typeof TrainingRepositoryAccessMode];
export interface TrainingRepositoryAuthConfig {
  TrainingRepositoryCredentialsProviderArn: string | undefined;
}
export interface TrainingImageConfig {
  TrainingRepositoryAccessMode:
    | TrainingRepositoryAccessMode
    | string
    | undefined;
  TrainingRepositoryAuthConfig?: TrainingRepositoryAuthConfig;
}
export declare const TrainingInputMode: {
  readonly FASTFILE: "FastFile";
  readonly FILE: "File";
  readonly PIPE: "Pipe";
};
export type TrainingInputMode =
  (typeof TrainingInputMode)[keyof typeof TrainingInputMode];
export interface AlgorithmSpecification {
  TrainingImage?: string;
  AlgorithmName?: string;
  TrainingInputMode: TrainingInputMode | string | undefined;
  MetricDefinitions?: MetricDefinition[];
  EnableSageMakerMetricsTimeSeries?: boolean;
  ContainerEntrypoint?: string[];
  ContainerArguments?: string[];
  TrainingImageConfig?: TrainingImageConfig;
}
export declare const AlgorithmStatus: {
  readonly COMPLETED: "Completed";
  readonly DELETING: "Deleting";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly PENDING: "Pending";
};
export type AlgorithmStatus =
  (typeof AlgorithmStatus)[keyof typeof AlgorithmStatus];
export declare const DetailedAlgorithmStatus: {
  readonly COMPLETED: "Completed";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly NOT_STARTED: "NotStarted";
};
export type DetailedAlgorithmStatus =
  (typeof DetailedAlgorithmStatus)[keyof typeof DetailedAlgorithmStatus];
export interface AlgorithmStatusItem {
  Name: string | undefined;
  Status: DetailedAlgorithmStatus | string | undefined;
  FailureReason?: string;
}
export interface AlgorithmStatusDetails {
  ValidationStatuses?: AlgorithmStatusItem[];
  ImageScanStatuses?: AlgorithmStatusItem[];
}
export interface AlgorithmSummary {
  AlgorithmName: string | undefined;
  AlgorithmArn: string | undefined;
  AlgorithmDescription?: string;
  CreationTime: Date | undefined;
  AlgorithmStatus: AlgorithmStatus | string | undefined;
}
export declare const CompressionType: {
  readonly GZIP: "Gzip";
  readonly NONE: "None";
};
export type CompressionType =
  (typeof CompressionType)[keyof typeof CompressionType];
export declare const FileSystemAccessMode: {
  readonly RO: "ro";
  readonly RW: "rw";
};
export type FileSystemAccessMode =
  (typeof FileSystemAccessMode)[keyof typeof FileSystemAccessMode];
export declare const FileSystemType: {
  readonly EFS: "EFS";
  readonly FSXLUSTRE: "FSxLustre";
};
export type FileSystemType =
  (typeof FileSystemType)[keyof typeof FileSystemType];
export interface FileSystemDataSource {
  FileSystemId: string | undefined;
  FileSystemAccessMode: FileSystemAccessMode | string | undefined;
  FileSystemType: FileSystemType | string | undefined;
  DirectoryPath: string | undefined;
}
export declare const S3DataDistribution: {
  readonly FULLY_REPLICATED: "FullyReplicated";
  readonly SHARDED_BY_S3_KEY: "ShardedByS3Key";
};
export type S3DataDistribution =
  (typeof S3DataDistribution)[keyof typeof S3DataDistribution];
export declare const S3DataType: {
  readonly AUGMENTED_MANIFEST_FILE: "AugmentedManifestFile";
  readonly MANIFEST_FILE: "ManifestFile";
  readonly S3_PREFIX: "S3Prefix";
};
export type S3DataType = (typeof S3DataType)[keyof typeof S3DataType];
export interface S3DataSource {
  S3DataType: S3DataType | string | undefined;
  S3Uri: string | undefined;
  S3DataDistributionType?: S3DataDistribution | string;
  AttributeNames?: string[];
  InstanceGroupNames?: string[];
}
export interface DataSource {
  S3DataSource?: S3DataSource;
  FileSystemDataSource?: FileSystemDataSource;
}
export declare const RecordWrapper: {
  readonly NONE: "None";
  readonly RECORDIO: "RecordIO";
};
export type RecordWrapper = (typeof RecordWrapper)[keyof typeof RecordWrapper];
export interface ShuffleConfig {
  Seed: number | undefined;
}
export interface Channel {
  ChannelName: string | undefined;
  DataSource: DataSource | undefined;
  ContentType?: string;
  CompressionType?: CompressionType | string;
  RecordWrapperType?: RecordWrapper | string;
  InputMode?: TrainingInputMode | string;
  ShuffleConfig?: ShuffleConfig;
}
export interface OutputDataConfig {
  KmsKeyId?: string;
  S3OutputPath: string | undefined;
}
export declare const TrainingInstanceType: {
  readonly ML_C4_2XLARGE: "ml.c4.2xlarge";
  readonly ML_C4_4XLARGE: "ml.c4.4xlarge";
  readonly ML_C4_8XLARGE: "ml.c4.8xlarge";
  readonly ML_C4_XLARGE: "ml.c4.xlarge";
  readonly ML_C5N_18XLARGE: "ml.c5n.18xlarge";
  readonly ML_C5N_2XLARGE: "ml.c5n.2xlarge";
  readonly ML_C5N_4XLARGE: "ml.c5n.4xlarge";
  readonly ML_C5N_9XLARGE: "ml.c5n.9xlarge";
  readonly ML_C5N_XLARGE: "ml.c5n.xlarge";
  readonly ML_C5_18XLARGE: "ml.c5.18xlarge";
  readonly ML_C5_2XLARGE: "ml.c5.2xlarge";
  readonly ML_C5_4XLARGE: "ml.c5.4xlarge";
  readonly ML_C5_9XLARGE: "ml.c5.9xlarge";
  readonly ML_C5_XLARGE: "ml.c5.xlarge";
  readonly ML_G4DN_12XLARGE: "ml.g4dn.12xlarge";
  readonly ML_G4DN_16XLARGE: "ml.g4dn.16xlarge";
  readonly ML_G4DN_2XLARGE: "ml.g4dn.2xlarge";
  readonly ML_G4DN_4XLARGE: "ml.g4dn.4xlarge";
  readonly ML_G4DN_8XLARGE: "ml.g4dn.8xlarge";
  readonly ML_G4DN_XLARGE: "ml.g4dn.xlarge";
  readonly ML_G5_12XLARGE: "ml.g5.12xlarge";
  readonly ML_G5_16XLARGE: "ml.g5.16xlarge";
  readonly ML_G5_24XLARGE: "ml.g5.24xlarge";
  readonly ML_G5_2XLARGE: "ml.g5.2xlarge";
  readonly ML_G5_48XLARGE: "ml.g5.48xlarge";
  readonly ML_G5_4XLARGE: "ml.g5.4xlarge";
  readonly ML_G5_8XLARGE: "ml.g5.8xlarge";
  readonly ML_G5_XLARGE: "ml.g5.xlarge";
  readonly ML_M4_10XLARGE: "ml.m4.10xlarge";
  readonly ML_M4_16XLARGE: "ml.m4.16xlarge";
  readonly ML_M4_2XLARGE: "ml.m4.2xlarge";
  readonly ML_M4_4XLARGE: "ml.m4.4xlarge";
  readonly ML_M4_XLARGE: "ml.m4.xlarge";
  readonly ML_M5_12XLARGE: "ml.m5.12xlarge";
  readonly ML_M5_24XLARGE: "ml.m5.24xlarge";
  readonly ML_M5_2XLARGE: "ml.m5.2xlarge";
  readonly ML_M5_4XLARGE: "ml.m5.4xlarge";
  readonly ML_M5_LARGE: "ml.m5.large";
  readonly ML_M5_XLARGE: "ml.m5.xlarge";
  readonly ML_P2_16XLARGE: "ml.p2.16xlarge";
  readonly ML_P2_8XLARGE: "ml.p2.8xlarge";
  readonly ML_P2_XLARGE: "ml.p2.xlarge";
  readonly ML_P3DN_24XLARGE: "ml.p3dn.24xlarge";
  readonly ML_P3_16XLARGE: "ml.p3.16xlarge";
  readonly ML_P3_2XLARGE: "ml.p3.2xlarge";
  readonly ML_P3_8XLARGE: "ml.p3.8xlarge";
  readonly ML_P4D_24XLARGE: "ml.p4d.24xlarge";
  readonly ML_TRN1_2XLARGE: "ml.trn1.2xlarge";
  readonly ML_TRN1_32XLARGE: "ml.trn1.32xlarge";
};
export type TrainingInstanceType =
  (typeof TrainingInstanceType)[keyof typeof TrainingInstanceType];
export interface InstanceGroup {
  InstanceType: TrainingInstanceType | string | undefined;
  InstanceCount: number | undefined;
  InstanceGroupName: string | undefined;
}
export interface ResourceConfig {
  InstanceType?: TrainingInstanceType | string;
  InstanceCount?: number;
  VolumeSizeInGB: number | undefined;
  VolumeKmsKeyId?: string;
  InstanceGroups?: InstanceGroup[];
  KeepAlivePeriodInSeconds?: number;
}
export interface StoppingCondition {
  MaxRuntimeInSeconds?: number;
  MaxWaitTimeInSeconds?: number;
}
export interface TrainingJobDefinition {
  TrainingInputMode: TrainingInputMode | string | undefined;
  HyperParameters?: Record<string, string>;
  InputDataConfig: Channel[] | undefined;
  OutputDataConfig: OutputDataConfig | undefined;
  ResourceConfig: ResourceConfig | undefined;
  StoppingCondition: StoppingCondition | undefined;
}
export declare const BatchStrategy: {
  readonly MULTI_RECORD: "MultiRecord";
  readonly SINGLE_RECORD: "SingleRecord";
};
export type BatchStrategy = (typeof BatchStrategy)[keyof typeof BatchStrategy];
export interface TransformS3DataSource {
  S3DataType: S3DataType | string | undefined;
  S3Uri: string | undefined;
}
export interface TransformDataSource {
  S3DataSource: TransformS3DataSource | undefined;
}
export declare const SplitType: {
  readonly LINE: "Line";
  readonly NONE: "None";
  readonly RECORDIO: "RecordIO";
  readonly TFRECORD: "TFRecord";
};
export type SplitType = (typeof SplitType)[keyof typeof SplitType];
export interface TransformInput {
  DataSource: TransformDataSource | undefined;
  ContentType?: string;
  CompressionType?: CompressionType | string;
  SplitType?: SplitType | string;
}
export declare const AssemblyType: {
  readonly LINE: "Line";
  readonly NONE: "None";
};
export type AssemblyType = (typeof AssemblyType)[keyof typeof AssemblyType];
export interface TransformOutput {
  S3OutputPath: string | undefined;
  Accept?: string;
  AssembleWith?: AssemblyType | string;
  KmsKeyId?: string;
}
export interface TransformResources {
  InstanceType: TransformInstanceType | string | undefined;
  InstanceCount: number | undefined;
  VolumeKmsKeyId?: string;
}
export interface TransformJobDefinition {
  MaxConcurrentTransforms?: number;
  MaxPayloadInMB?: number;
  BatchStrategy?: BatchStrategy | string;
  Environment?: Record<string, string>;
  TransformInput: TransformInput | undefined;
  TransformOutput: TransformOutput | undefined;
  TransformResources: TransformResources | undefined;
}
export interface AlgorithmValidationProfile {
  ProfileName: string | undefined;
  TrainingJobDefinition: TrainingJobDefinition | undefined;
  TransformJobDefinition?: TransformJobDefinition;
}
export interface AlgorithmValidationSpecification {
  ValidationRole: string | undefined;
  ValidationProfiles: AlgorithmValidationProfile[] | undefined;
}
export interface AnnotationConsolidationConfig {
  AnnotationConsolidationLambdaArn: string | undefined;
}
export declare const AppType: {
  readonly JupyterServer: "JupyterServer";
  readonly KernelGateway: "KernelGateway";
  readonly RSessionGateway: "RSessionGateway";
  readonly RStudioServerPro: "RStudioServerPro";
  readonly TensorBoard: "TensorBoard";
};
export type AppType = (typeof AppType)[keyof typeof AppType];
export declare const AppStatus: {
  readonly Deleted: "Deleted";
  readonly Deleting: "Deleting";
  readonly Failed: "Failed";
  readonly InService: "InService";
  readonly Pending: "Pending";
};
export type AppStatus = (typeof AppStatus)[keyof typeof AppStatus];
export interface AppDetails {
  DomainId?: string;
  UserProfileName?: string;
  AppType?: AppType | string;
  AppName?: string;
  Status?: AppStatus | string;
  CreationTime?: Date;
  SpaceName?: string;
}
export interface FileSystemConfig {
  MountPath?: string;
  DefaultUid?: number;
  DefaultGid?: number;
}
export interface KernelSpec {
  Name: string | undefined;
  DisplayName?: string;
}
export interface KernelGatewayImageConfig {
  KernelSpecs: KernelSpec[] | undefined;
  FileSystemConfig?: FileSystemConfig;
}
export interface AppImageConfigDetails {
  AppImageConfigArn?: string;
  AppImageConfigName?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  KernelGatewayImageConfig?: KernelGatewayImageConfig;
}
export declare const AppImageConfigSortKey: {
  readonly CreationTime: "CreationTime";
  readonly LastModifiedTime: "LastModifiedTime";
  readonly Name: "Name";
};
export type AppImageConfigSortKey =
  (typeof AppImageConfigSortKey)[keyof typeof AppImageConfigSortKey];
export declare const AppInstanceType: {
  readonly ML_C5_12XLARGE: "ml.c5.12xlarge";
  readonly ML_C5_18XLARGE: "ml.c5.18xlarge";
  readonly ML_C5_24XLARGE: "ml.c5.24xlarge";
  readonly ML_C5_2XLARGE: "ml.c5.2xlarge";
  readonly ML_C5_4XLARGE: "ml.c5.4xlarge";
  readonly ML_C5_9XLARGE: "ml.c5.9xlarge";
  readonly ML_C5_LARGE: "ml.c5.large";
  readonly ML_C5_XLARGE: "ml.c5.xlarge";
  readonly ML_G4DN_12XLARGE: "ml.g4dn.12xlarge";
  readonly ML_G4DN_16XLARGE: "ml.g4dn.16xlarge";
  readonly ML_G4DN_2XLARGE: "ml.g4dn.2xlarge";
  readonly ML_G4DN_4XLARGE: "ml.g4dn.4xlarge";
  readonly ML_G4DN_8XLARGE: "ml.g4dn.8xlarge";
  readonly ML_G4DN_XLARGE: "ml.g4dn.xlarge";
  readonly ML_G5_12XLARGE: "ml.g5.12xlarge";
  readonly ML_G5_16XLARGE: "ml.g5.16xlarge";
  readonly ML_G5_24XLARGE: "ml.g5.24xlarge";
  readonly ML_G5_2XLARGE: "ml.g5.2xlarge";
  readonly ML_G5_48XLARGE: "ml.g5.48xlarge";
  readonly ML_G5_4XLARGE: "ml.g5.4xlarge";
  readonly ML_G5_8XLARGE: "ml.g5.8xlarge";
  readonly ML_G5_XLARGE: "ml.g5.xlarge";
  readonly ML_GEOSPATIAL_INTERACTIVE: "ml.geospatial.interactive";
  readonly ML_M5D_12XLARGE: "ml.m5d.12xlarge";
  readonly ML_M5D_16XLARGE: "ml.m5d.16xlarge";
  readonly ML_M5D_24XLARGE: "ml.m5d.24xlarge";
  readonly ML_M5D_2XLARGE: "ml.m5d.2xlarge";
  readonly ML_M5D_4XLARGE: "ml.m5d.4xlarge";
  readonly ML_M5D_8XLARGE: "ml.m5d.8xlarge";
  readonly ML_M5D_LARGE: "ml.m5d.large";
  readonly ML_M5D_XLARGE: "ml.m5d.xlarge";
  readonly ML_M5_12XLARGE: "ml.m5.12xlarge";
  readonly ML_M5_16XLARGE: "ml.m5.16xlarge";
  readonly ML_M5_24XLARGE: "ml.m5.24xlarge";
  readonly ML_M5_2XLARGE: "ml.m5.2xlarge";
  readonly ML_M5_4XLARGE: "ml.m5.4xlarge";
  readonly ML_M5_8XLARGE: "ml.m5.8xlarge";
  readonly ML_M5_LARGE: "ml.m5.large";
  readonly ML_M5_XLARGE: "ml.m5.xlarge";
  readonly ML_P3DN_24XLARGE: "ml.p3dn.24xlarge";
  readonly ML_P3_16XLARGE: "ml.p3.16xlarge";
  readonly ML_P3_2XLARGE: "ml.p3.2xlarge";
  readonly ML_P3_8XLARGE: "ml.p3.8xlarge";
  readonly ML_R5_12XLARGE: "ml.r5.12xlarge";
  readonly ML_R5_16XLARGE: "ml.r5.16xlarge";
  readonly ML_R5_24XLARGE: "ml.r5.24xlarge";
  readonly ML_R5_2XLARGE: "ml.r5.2xlarge";
  readonly ML_R5_4XLARGE: "ml.r5.4xlarge";
  readonly ML_R5_8XLARGE: "ml.r5.8xlarge";
  readonly ML_R5_LARGE: "ml.r5.large";
  readonly ML_R5_XLARGE: "ml.r5.xlarge";
  readonly ML_T3_2XLARGE: "ml.t3.2xlarge";
  readonly ML_T3_LARGE: "ml.t3.large";
  readonly ML_T3_MEDIUM: "ml.t3.medium";
  readonly ML_T3_MICRO: "ml.t3.micro";
  readonly ML_T3_SMALL: "ml.t3.small";
  readonly ML_T3_XLARGE: "ml.t3.xlarge";
  readonly SYSTEM: "system";
};
export type AppInstanceType =
  (typeof AppInstanceType)[keyof typeof AppInstanceType];
export declare const AppNetworkAccessType: {
  readonly PublicInternetOnly: "PublicInternetOnly";
  readonly VpcOnly: "VpcOnly";
};
export type AppNetworkAccessType =
  (typeof AppNetworkAccessType)[keyof typeof AppNetworkAccessType];
export declare const AppSecurityGroupManagement: {
  readonly Customer: "Customer";
  readonly Service: "Service";
};
export type AppSecurityGroupManagement =
  (typeof AppSecurityGroupManagement)[keyof typeof AppSecurityGroupManagement];
export declare const AppSortKey: {
  readonly CreationTime: "CreationTime";
};
export type AppSortKey = (typeof AppSortKey)[keyof typeof AppSortKey];
export interface AppSpecification {
  ImageUri: string | undefined;
  ContainerEntrypoint?: string[];
  ContainerArguments?: string[];
}
export declare const ArtifactSourceIdType: {
  readonly CUSTOM: "Custom";
  readonly MD5_HASH: "MD5Hash";
  readonly S3_ETAG: "S3ETag";
  readonly S3_VERSION: "S3Version";
};
export type ArtifactSourceIdType =
  (typeof ArtifactSourceIdType)[keyof typeof ArtifactSourceIdType];
export interface ArtifactSourceType {
  SourceIdType: ArtifactSourceIdType | string | undefined;
  Value: string | undefined;
}
export interface ArtifactSource {
  SourceUri: string | undefined;
  SourceTypes?: ArtifactSourceType[];
}
export interface ArtifactSummary {
  ArtifactArn?: string;
  ArtifactName?: string;
  Source?: ArtifactSource;
  ArtifactType?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface AssociateTrialComponentRequest {
  TrialComponentName: string | undefined;
  TrialName: string | undefined;
}
export interface AssociateTrialComponentResponse {
  TrialComponentArn?: string;
  TrialArn?: string;
}
export interface IamIdentity {
  Arn?: string;
  PrincipalId?: string;
  SourceIdentity?: string;
}
export interface UserContext {
  UserProfileArn?: string;
  UserProfileName?: string;
  DomainId?: string;
  IamIdentity?: IamIdentity;
}
export interface AssociationSummary {
  SourceArn?: string;
  DestinationArn?: string;
  SourceType?: string;
  DestinationType?: string;
  AssociationType?: AssociationEdgeType | string;
  SourceName?: string;
  DestinationName?: string;
  CreationTime?: Date;
  CreatedBy?: UserContext;
}
export interface AsyncInferenceClientConfig {
  MaxConcurrentInvocationsPerInstance?: number;
}
export declare const AsyncNotificationTopicTypes: {
  readonly ERROR_NOTIFICATION_TOPIC: "ERROR_NOTIFICATION_TOPIC";
  readonly SUCCESS_NOTIFICATION_TOPIC: "SUCCESS_NOTIFICATION_TOPIC";
};
export type AsyncNotificationTopicTypes =
  (typeof AsyncNotificationTopicTypes)[keyof typeof AsyncNotificationTopicTypes];
export interface AsyncInferenceNotificationConfig {
  SuccessTopic?: string;
  ErrorTopic?: string;
  IncludeInferenceResponseIn?: (AsyncNotificationTopicTypes | string)[];
}
export interface AsyncInferenceOutputConfig {
  KmsKeyId?: string;
  S3OutputPath?: string;
  NotificationConfig?: AsyncInferenceNotificationConfig;
  S3FailurePath?: string;
}
export interface AsyncInferenceConfig {
  ClientConfig?: AsyncInferenceClientConfig;
  OutputConfig: AsyncInferenceOutputConfig | undefined;
}
export declare const AthenaResultCompressionType: {
  readonly GZIP: "GZIP";
  readonly SNAPPY: "SNAPPY";
  readonly ZLIB: "ZLIB";
};
export type AthenaResultCompressionType =
  (typeof AthenaResultCompressionType)[keyof typeof AthenaResultCompressionType];
export declare const AthenaResultFormat: {
  readonly AVRO: "AVRO";
  readonly JSON: "JSON";
  readonly ORC: "ORC";
  readonly PARQUET: "PARQUET";
  readonly TEXTFILE: "TEXTFILE";
};
export type AthenaResultFormat =
  (typeof AthenaResultFormat)[keyof typeof AthenaResultFormat];
export interface AthenaDatasetDefinition {
  Catalog: string | undefined;
  Database: string | undefined;
  QueryString: string | undefined;
  WorkGroup?: string;
  OutputS3Uri: string | undefined;
  KmsKeyId?: string;
  OutputFormat: AthenaResultFormat | string | undefined;
  OutputCompression?: AthenaResultCompressionType | string;
}
export declare const AuthMode: {
  readonly IAM: "IAM";
  readonly SSO: "SSO";
};
export type AuthMode = (typeof AuthMode)[keyof typeof AuthMode];
export declare const AutoMLAlgorithm: {
  readonly CATBOOST: "catboost";
  readonly EXTRA_TREES: "extra-trees";
  readonly FASTAI: "fastai";
  readonly LIGHTGBM: "lightgbm";
  readonly LINEAR_LEARNER: "linear-learner";
  readonly MLP: "mlp";
  readonly NN_TORCH: "nn-torch";
  readonly RANDOMFOREST: "randomforest";
  readonly XGBOOST: "xgboost";
};
export type AutoMLAlgorithm =
  (typeof AutoMLAlgorithm)[keyof typeof AutoMLAlgorithm];
export interface AutoMLAlgorithmConfig {
  AutoMLAlgorithms: (AutoMLAlgorithm | string)[] | undefined;
}
export interface CandidateArtifactLocations {
  Explainability: string | undefined;
  ModelInsights?: string;
}
export declare const AutoMLMetricEnum: {
  readonly ACCURACY: "Accuracy";
  readonly AUC: "AUC";
  readonly BALANCED_ACCURACY: "BalancedAccuracy";
  readonly F1: "F1";
  readonly F1_MACRO: "F1macro";
  readonly MAE: "MAE";
  readonly MSE: "MSE";
  readonly PRECISION: "Precision";
  readonly PRECISION_MACRO: "PrecisionMacro";
  readonly R2: "R2";
  readonly RECALL: "Recall";
  readonly RECALL_MACRO: "RecallMacro";
  readonly RMSE: "RMSE";
};
export type AutoMLMetricEnum =
  (typeof AutoMLMetricEnum)[keyof typeof AutoMLMetricEnum];
export declare const MetricSetSource: {
  readonly TEST: "Test";
  readonly TRAIN: "Train";
  readonly VALIDATION: "Validation";
};
export type MetricSetSource =
  (typeof MetricSetSource)[keyof typeof MetricSetSource];
export declare const AutoMLMetricExtendedEnum: {
  readonly ACCURACY: "Accuracy";
  readonly AUC: "AUC";
  readonly BALANCED_ACCURACY: "BalancedAccuracy";
  readonly F1: "F1";
  readonly F1_MACRO: "F1macro";
  readonly INFERENCE_LATENCY: "InferenceLatency";
  readonly LogLoss: "LogLoss";
  readonly MAE: "MAE";
  readonly MSE: "MSE";
  readonly PRECISION: "Precision";
  readonly PRECISION_MACRO: "PrecisionMacro";
  readonly R2: "R2";
  readonly RECALL: "Recall";
  readonly RECALL_MACRO: "RecallMacro";
  readonly RMSE: "RMSE";
};
export type AutoMLMetricExtendedEnum =
  (typeof AutoMLMetricExtendedEnum)[keyof typeof AutoMLMetricExtendedEnum];
export interface MetricDatum {
  MetricName?: AutoMLMetricEnum | string;
  Value?: number;
  Set?: MetricSetSource | string;
  StandardMetricName?: AutoMLMetricExtendedEnum | string;
}
export interface CandidateProperties {
  CandidateArtifactLocations?: CandidateArtifactLocations;
  CandidateMetrics?: MetricDatum[];
}
export declare const CandidateStatus: {
  readonly COMPLETED: "Completed";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
};
export type CandidateStatus =
  (typeof CandidateStatus)[keyof typeof CandidateStatus];
export declare const CandidateStepType: {
  readonly PROCESSING: "AWS::SageMaker::ProcessingJob";
  readonly TRAINING: "AWS::SageMaker::TrainingJob";
  readonly TRANSFORM: "AWS::SageMaker::TransformJob";
};
export type CandidateStepType =
  (typeof CandidateStepType)[keyof typeof CandidateStepType];
export interface AutoMLCandidateStep {
  CandidateStepType: CandidateStepType | string | undefined;
  CandidateStepArn: string | undefined;
  CandidateStepName: string | undefined;
}
export declare const AutoMLJobObjectiveType: {
  readonly MAXIMIZE: "Maximize";
  readonly MINIMIZE: "Minimize";
};
export type AutoMLJobObjectiveType =
  (typeof AutoMLJobObjectiveType)[keyof typeof AutoMLJobObjectiveType];
export interface FinalAutoMLJobObjectiveMetric {
  Type?: AutoMLJobObjectiveType | string;
  MetricName: AutoMLMetricEnum | string | undefined;
  Value: number | undefined;
  StandardMetricName?: AutoMLMetricEnum | string;
}
export declare const AutoMLProcessingUnit: {
  readonly CPU: "CPU";
  readonly GPU: "GPU";
};
export type AutoMLProcessingUnit =
  (typeof AutoMLProcessingUnit)[keyof typeof AutoMLProcessingUnit];
export interface AutoMLContainerDefinition {
  Image: string | undefined;
  ModelDataUrl: string | undefined;
  Environment?: Record<string, string>;
}
export declare const ObjectiveStatus: {
  readonly Failed: "Failed";
  readonly Pending: "Pending";
  readonly Succeeded: "Succeeded";
};
export type ObjectiveStatus =
  (typeof ObjectiveStatus)[keyof typeof ObjectiveStatus];
export interface AutoMLCandidate {
  CandidateName: string | undefined;
  FinalAutoMLJobObjectiveMetric?: FinalAutoMLJobObjectiveMetric;
  ObjectiveStatus: ObjectiveStatus | string | undefined;
  CandidateSteps: AutoMLCandidateStep[] | undefined;
  CandidateStatus: CandidateStatus | string | undefined;
  InferenceContainers?: AutoMLContainerDefinition[];
  CreationTime: Date | undefined;
  EndTime?: Date;
  LastModifiedTime: Date | undefined;
  FailureReason?: string;
  CandidateProperties?: CandidateProperties;
  InferenceContainerDefinitions?: Record<string, AutoMLContainerDefinition[]>;
}
export interface AutoMLCandidateGenerationConfig {
  FeatureSpecificationS3Uri?: string;
  AlgorithmsConfig?: AutoMLAlgorithmConfig[];
}
export declare const AutoMLChannelType: {
  readonly TRAINING: "training";
  readonly VALIDATION: "validation";
};
export type AutoMLChannelType =
  (typeof AutoMLChannelType)[keyof typeof AutoMLChannelType];
export declare const AutoMLS3DataType: {
  readonly AUGMENTED_MANIFEST_FILE: "AugmentedManifestFile";
  readonly MANIFEST_FILE: "ManifestFile";
  readonly S3_PREFIX: "S3Prefix";
};
export type AutoMLS3DataType =
  (typeof AutoMLS3DataType)[keyof typeof AutoMLS3DataType];
export interface AutoMLS3DataSource {
  S3DataType: AutoMLS3DataType | string | undefined;
  S3Uri: string | undefined;
}
export interface AutoMLDataSource {
  S3DataSource: AutoMLS3DataSource | undefined;
}
export interface AutoMLChannel {
  DataSource: AutoMLDataSource | undefined;
  CompressionType?: CompressionType | string;
  TargetAttributeName: string | undefined;
  ContentType?: string;
  ChannelType?: AutoMLChannelType | string;
}
export interface AutoMLDataSplitConfig {
  ValidationFraction?: number;
}
export interface AutoMLJobArtifacts {
  CandidateDefinitionNotebookLocation?: string;
  DataExplorationNotebookLocation?: string;
}
export interface AutoMLJobChannel {
  ChannelType?: AutoMLChannelType | string;
  ContentType?: string;
  CompressionType?: CompressionType | string;
  DataSource?: AutoMLDataSource;
}
export interface AutoMLJobCompletionCriteria {
  MaxCandidates?: number;
  MaxRuntimePerTrainingJobInSeconds?: number;
  MaxAutoMLJobRuntimeInSeconds?: number;
}
export declare const AutoMLMode: {
  readonly AUTO: "AUTO";
  readonly ENSEMBLING: "ENSEMBLING";
  readonly HYPERPARAMETER_TUNING: "HYPERPARAMETER_TUNING";
};
export type AutoMLMode = (typeof AutoMLMode)[keyof typeof AutoMLMode];
export interface VpcConfig {
  SecurityGroupIds: string[] | undefined;
  Subnets: string[] | undefined;
}
export interface AutoMLSecurityConfig {
  VolumeKmsKeyId?: string;
  EnableInterContainerTrafficEncryption?: boolean;
  VpcConfig?: VpcConfig;
}
export interface AutoMLJobConfig {
  CompletionCriteria?: AutoMLJobCompletionCriteria;
  SecurityConfig?: AutoMLSecurityConfig;
  DataSplitConfig?: AutoMLDataSplitConfig;
  CandidateGenerationConfig?: AutoMLCandidateGenerationConfig;
  Mode?: AutoMLMode | string;
}
export interface AutoMLJobObjective {
  MetricName: AutoMLMetricEnum | string | undefined;
}
export declare const AutoMLJobSecondaryStatus: {
  readonly ANALYZING_DATA: "AnalyzingData";
  readonly CANDIDATE_DEFINITIONS_GENERATED: "CandidateDefinitionsGenerated";
  readonly COMPLETED: "Completed";
  readonly DEPLOYING_MODEL: "DeployingModel";
  readonly EXPLAINABILITY_ERROR: "ExplainabilityError";
  readonly FAILED: "Failed";
  readonly FEATURE_ENGINEERING: "FeatureEngineering";
  readonly GENERATING_EXPLAINABILITY_REPORT: "GeneratingExplainabilityReport";
  readonly GENERATING_MODEL_INSIGHTS_REPORT: "GeneratingModelInsightsReport";
  readonly MAX_AUTO_ML_JOB_RUNTIME_REACHED: "MaxAutoMLJobRuntimeReached";
  readonly MAX_CANDIDATES_REACHED: "MaxCandidatesReached";
  readonly MODEL_DEPLOYMENT_ERROR: "ModelDeploymentError";
  readonly MODEL_INSIGHTS_ERROR: "ModelInsightsError";
  readonly MODEL_TUNING: "ModelTuning";
  readonly STARTING: "Starting";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
  readonly TRAINING_MODELS: "TrainingModels";
};
export type AutoMLJobSecondaryStatus =
  (typeof AutoMLJobSecondaryStatus)[keyof typeof AutoMLJobSecondaryStatus];
export declare const AutoMLJobStatus: {
  readonly COMPLETED: "Completed";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
};
export type AutoMLJobStatus =
  (typeof AutoMLJobStatus)[keyof typeof AutoMLJobStatus];
export interface AutoMLJobStepMetadata {
  Arn?: string;
}
export interface AutoMLPartialFailureReason {
  PartialFailureMessage?: string;
}
export interface AutoMLJobSummary {
  AutoMLJobName: string | undefined;
  AutoMLJobArn: string | undefined;
  AutoMLJobStatus: AutoMLJobStatus | string | undefined;
  AutoMLJobSecondaryStatus: AutoMLJobSecondaryStatus | string | undefined;
  CreationTime: Date | undefined;
  EndTime?: Date;
  LastModifiedTime: Date | undefined;
  FailureReason?: string;
  PartialFailureReasons?: AutoMLPartialFailureReason[];
}
export interface AutoMLOutputDataConfig {
  KmsKeyId?: string;
  S3OutputPath: string | undefined;
}
export interface ImageClassificationJobConfig {
  CompletionCriteria?: AutoMLJobCompletionCriteria;
}
export interface TextClassificationJobConfig {
  CompletionCriteria?: AutoMLJobCompletionCriteria;
  ContentColumn?: string;
  TargetLabelColumn?: string;
}
export type AutoMLProblemTypeConfig =
  | AutoMLProblemTypeConfig.ImageClassificationJobConfigMember
  | AutoMLProblemTypeConfig.TextClassificationJobConfigMember
  | AutoMLProblemTypeConfig.$UnknownMember;
export declare namespace AutoMLProblemTypeConfig {
  interface ImageClassificationJobConfigMember {
    ImageClassificationJobConfig: ImageClassificationJobConfig;
    TextClassificationJobConfig?: never;
    $unknown?: never;
  }
  interface TextClassificationJobConfigMember {
    ImageClassificationJobConfig?: never;
    TextClassificationJobConfig: TextClassificationJobConfig;
    $unknown?: never;
  }
  interface $UnknownMember {
    ImageClassificationJobConfig?: never;
    TextClassificationJobConfig?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    ImageClassificationJobConfig: (value: ImageClassificationJobConfig) => T;
    TextClassificationJobConfig: (value: TextClassificationJobConfig) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: AutoMLProblemTypeConfig, visitor: Visitor<T>) => T;
}
export declare const AutoMLSortBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
  readonly STATUS: "Status";
};
export type AutoMLSortBy = (typeof AutoMLSortBy)[keyof typeof AutoMLSortBy];
export declare const AutoMLSortOrder: {
  readonly ASCENDING: "Ascending";
  readonly DESCENDING: "Descending";
};
export type AutoMLSortOrder =
  (typeof AutoMLSortOrder)[keyof typeof AutoMLSortOrder];
export interface AutoRollbackConfig {
  Alarms?: Alarm[];
}
export declare const AwsManagedHumanLoopRequestSource: {
  readonly REKOGNITION_DETECT_MODERATION_LABELS_IMAGE_V3: "AWS/Rekognition/DetectModerationLabels/Image/V3";
  readonly TEXTRACT_ANALYZE_DOCUMENT_FORMS_V1: "AWS/Textract/AnalyzeDocument/Forms/V1";
};
export type AwsManagedHumanLoopRequestSource =
  (typeof AwsManagedHumanLoopRequestSource)[keyof typeof AwsManagedHumanLoopRequestSource];
export interface BatchDataCaptureConfig {
  DestinationS3Uri: string | undefined;
  KmsKeyId?: string;
  GenerateInferenceId?: boolean;
}
export interface BatchDescribeModelPackageInput {
  ModelPackageArnList: string[] | undefined;
}
export interface BatchDescribeModelPackageError {
  ErrorCode: string | undefined;
  ErrorResponse: string | undefined;
}
export interface InferenceSpecification {
  Containers: ModelPackageContainerDefinition[] | undefined;
  SupportedTransformInstanceTypes?: (TransformInstanceType | string)[];
  SupportedRealtimeInferenceInstanceTypes?: (
    | ProductionVariantInstanceType
    | string
  )[];
  SupportedContentTypes: string[] | undefined;
  SupportedResponseMIMETypes: string[] | undefined;
}
export declare const ModelApprovalStatus: {
  readonly APPROVED: "Approved";
  readonly PENDING_MANUAL_APPROVAL: "PendingManualApproval";
  readonly REJECTED: "Rejected";
};
export type ModelApprovalStatus =
  (typeof ModelApprovalStatus)[keyof typeof ModelApprovalStatus];
export declare const ModelPackageStatus: {
  readonly COMPLETED: "Completed";
  readonly DELETING: "Deleting";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly PENDING: "Pending";
};
export type ModelPackageStatus =
  (typeof ModelPackageStatus)[keyof typeof ModelPackageStatus];
export interface BatchDescribeModelPackageSummary {
  ModelPackageGroupName: string | undefined;
  ModelPackageVersion?: number;
  ModelPackageArn: string | undefined;
  ModelPackageDescription?: string;
  CreationTime: Date | undefined;
  InferenceSpecification: InferenceSpecification | undefined;
  ModelPackageStatus: ModelPackageStatus | string | undefined;
  ModelApprovalStatus?: ModelApprovalStatus | string;
}
export interface BatchDescribeModelPackageOutput {
  ModelPackageSummaries?: Record<string, BatchDescribeModelPackageSummary>;
  BatchDescribeModelPackageErrorMap?: Record<
    string,
    BatchDescribeModelPackageError
  >;
}
export interface MonitoringCsvDatasetFormat {
  Header?: boolean;
}
export interface MonitoringJsonDatasetFormat {
  Line?: boolean;
}
export interface MonitoringParquetDatasetFormat {}
export interface MonitoringDatasetFormat {
  Csv?: MonitoringCsvDatasetFormat;
  Json?: MonitoringJsonDatasetFormat;
  Parquet?: MonitoringParquetDatasetFormat;
}
export declare const ProcessingS3DataDistributionType: {
  readonly FULLYREPLICATED: "FullyReplicated";
  readonly SHARDEDBYS3KEY: "ShardedByS3Key";
};
export type ProcessingS3DataDistributionType =
  (typeof ProcessingS3DataDistributionType)[keyof typeof ProcessingS3DataDistributionType];
export declare const ProcessingS3InputMode: {
  readonly FILE: "File";
  readonly PIPE: "Pipe";
};
export type ProcessingS3InputMode =
  (typeof ProcessingS3InputMode)[keyof typeof ProcessingS3InputMode];
export interface BatchTransformInput {
  DataCapturedDestinationS3Uri: string | undefined;
  DatasetFormat: MonitoringDatasetFormat | undefined;
  LocalPath: string | undefined;
  S3InputMode?: ProcessingS3InputMode | string;
  S3DataDistributionType?: ProcessingS3DataDistributionType | string;
  FeaturesAttribute?: string;
  InferenceAttribute?: string;
  ProbabilityAttribute?: string;
  ProbabilityThresholdAttribute?: number;
  StartTimeOffset?: string;
  EndTimeOffset?: string;
}
export interface BestObjectiveNotImproving {
  MaxNumberOfTrainingJobsNotImproving?: number;
}
export interface MetricsSource {
  ContentType: string | undefined;
  ContentDigest?: string;
  S3Uri: string | undefined;
}
export interface Bias {
  Report?: MetricsSource;
  PreTrainingReport?: MetricsSource;
  PostTrainingReport?: MetricsSource;
}
export declare const CapacitySizeType: {
  readonly CAPACITY_PERCENT: "CAPACITY_PERCENT";
  readonly INSTANCE_COUNT: "INSTANCE_COUNT";
};
export type CapacitySizeType =
  (typeof CapacitySizeType)[keyof typeof CapacitySizeType];
export interface CapacitySize {
  Type: CapacitySizeType | string | undefined;
  Value: number | undefined;
}
export declare const TrafficRoutingConfigType: {
  readonly ALL_AT_ONCE: "ALL_AT_ONCE";
  readonly CANARY: "CANARY";
  readonly LINEAR: "LINEAR";
};
export type TrafficRoutingConfigType =
  (typeof TrafficRoutingConfigType)[keyof typeof TrafficRoutingConfigType];
export interface TrafficRoutingConfig {
  Type: TrafficRoutingConfigType | string | undefined;
  WaitIntervalInSeconds: number | undefined;
  CanarySize?: CapacitySize;
  LinearStepSize?: CapacitySize;
}
export interface BlueGreenUpdatePolicy {
  TrafficRoutingConfiguration: TrafficRoutingConfig | undefined;
  TerminationWaitInSeconds?: number;
  MaximumExecutionTimeoutInSeconds?: number;
}
export declare const BooleanOperator: {
  readonly AND: "And";
  readonly OR: "Or";
};
export type BooleanOperator =
  (typeof BooleanOperator)[keyof typeof BooleanOperator];
export interface CacheHitResult {
  SourcePipelineExecutionArn?: string;
}
export interface OutputParameter {
  Name: string | undefined;
  Value: string | undefined;
}
export interface CallbackStepMetadata {
  CallbackToken?: string;
  SqsQueueUrl?: string;
  OutputParameters?: OutputParameter[];
}
export declare const CandidateSortBy: {
  readonly CreationTime: "CreationTime";
  readonly FinalObjectiveMetricValue: "FinalObjectiveMetricValue";
  readonly Status: "Status";
};
export type CandidateSortBy =
  (typeof CandidateSortBy)[keyof typeof CandidateSortBy];
export declare const FeatureStatus: {
  readonly Disabled: "DISABLED";
  readonly Enabled: "ENABLED";
};
export type FeatureStatus = (typeof FeatureStatus)[keyof typeof FeatureStatus];
export interface TimeSeriesForecastingSettings {
  Status?: FeatureStatus | string;
  AmazonForecastRoleArn?: string;
}
export interface CanvasAppSettings {
  TimeSeriesForecastingSettings?: TimeSeriesForecastingSettings;
}
export interface CaptureContentTypeHeader {
  CsvContentTypes?: string[];
  JsonContentTypes?: string[];
}
export declare const CaptureMode: {
  readonly INPUT: "Input";
  readonly OUTPUT: "Output";
};
export type CaptureMode = (typeof CaptureMode)[keyof typeof CaptureMode];
export interface CaptureOption {
  CaptureMode: CaptureMode | string | undefined;
}
export declare const CaptureStatus: {
  readonly STARTED: "Started";
  readonly STOPPED: "Stopped";
};
export type CaptureStatus = (typeof CaptureStatus)[keyof typeof CaptureStatus];
export interface CategoricalParameter {
  Name: string | undefined;
  Value: string[] | undefined;
}
export interface CategoricalParameterRange {
  Name: string | undefined;
  Values: string[] | undefined;
}
export interface CategoricalParameterRangeSpecification {
  Values: string[] | undefined;
}
export interface ChannelSpecification {
  Name: string | undefined;
  Description?: string;
  IsRequired?: boolean;
  SupportedContentTypes: string[] | undefined;
  SupportedCompressionTypes?: (CompressionType | string)[];
  SupportedInputModes: (TrainingInputMode | string)[] | undefined;
}
export interface CheckpointConfig {
  S3Uri: string | undefined;
  LocalPath?: string;
}
export interface ClarifyCheckStepMetadata {
  CheckType?: string;
  BaselineUsedForDriftCheckConstraints?: string;
  CalculatedBaselineConstraints?: string;
  ModelPackageGroupName?: string;
  ViolationReport?: string;
  CheckJobArn?: string;
  SkipCheck?: boolean;
  RegisterNewBaseline?: boolean;
}
export declare const ClarifyFeatureType: {
  readonly CATEGORICAL: "categorical";
  readonly NUMERICAL: "numerical";
  readonly TEXT: "text";
};
export type ClarifyFeatureType =
  (typeof ClarifyFeatureType)[keyof typeof ClarifyFeatureType];
export interface ClarifyInferenceConfig {
  FeaturesAttribute?: string;
  ContentTemplate?: string;
  MaxRecordCount?: number;
  MaxPayloadInMB?: number;
  ProbabilityIndex?: number;
  LabelIndex?: number;
  ProbabilityAttribute?: string;
  LabelAttribute?: string;
  LabelHeaders?: string[];
  FeatureHeaders?: string[];
  FeatureTypes?: (ClarifyFeatureType | string)[];
}
export interface ClarifyShapBaselineConfig {
  MimeType?: string;
  ShapBaseline?: string;
  ShapBaselineUri?: string;
}
export declare const ClarifyTextGranularity: {
  readonly PARAGRAPH: "paragraph";
  readonly SENTENCE: "sentence";
  readonly TOKEN: "token";
};
export type ClarifyTextGranularity =
  (typeof ClarifyTextGranularity)[keyof typeof ClarifyTextGranularity];
export declare const ClarifyTextLanguage: {
  readonly AFRIKAANS: "af";
  readonly ALBANIAN: "sq";
  readonly ARABIC: "ar";
  readonly ARMENIAN: "hy";
  readonly BASQUE: "eu";
  readonly BENGALI: "bn";
  readonly BULGARIAN: "bg";
  readonly CATALAN: "ca";
  readonly CHINESE: "zh";
  readonly CROATIAN: "hr";
  readonly CZECH: "cs";
  readonly DANISH: "da";
  readonly DUTCH: "nl";
  readonly ENGLISH: "en";
  readonly ESTONIAN: "et";
  readonly FINNISH: "fi";
  readonly FRENCH: "fr";
  readonly GERMAN: "de";
  readonly GREEK: "el";
  readonly GUJARATI: "gu";
  readonly HEBREW: "he";
  readonly HINDI: "hi";
  readonly HUNGARIAN: "hu";
  readonly ICELANDIC: "is";
  readonly INDONESIAN: "id";
  readonly IRISH: "ga";
  readonly ITALIAN: "it";
  readonly KANNADA: "kn";
  readonly KYRGYZ: "ky";
  readonly LATVIAN: "lv";
  readonly LIGURIAN: "lij";
  readonly LITHUANIAN: "lt";
  readonly LUXEMBOURGISH: "lb";
  readonly MACEDONIAN: "mk";
  readonly MALAYALAM: "ml";
  readonly MARATHI: "mr";
  readonly MULTI_LANGUAGE: "xx";
  readonly NEPALI: "ne";
  readonly NORWEGIAN_BOKMAL: "nb";
  readonly PERSIAN: "fa";
  readonly POLISH: "pl";
  readonly PORTUGUESE: "pt";
  readonly ROMANIAN: "ro";
  readonly RUSSIAN: "ru";
  readonly SANSKRIT: "sa";
  readonly SERBIAN: "sr";
  readonly SETSWANA: "tn";
  readonly SINHALA: "si";
  readonly SLOVAK: "sk";
  readonly SLOVENIAN: "sl";
  readonly SPANISH: "es";
  readonly SWEDISH: "sv";
  readonly TAGALOG: "tl";
  readonly TAMIL: "ta";
  readonly TATAR: "tt";
  readonly TELUGU: "te";
  readonly TURKISH: "tr";
  readonly UKRAINIAN: "uk";
  readonly URDU: "ur";
  readonly YORUBA: "yo";
};
export type ClarifyTextLanguage =
  (typeof ClarifyTextLanguage)[keyof typeof ClarifyTextLanguage];
export interface ClarifyTextConfig {
  Language: ClarifyTextLanguage | string | undefined;
  Granularity: ClarifyTextGranularity | string | undefined;
}
export interface ClarifyShapConfig {
  ShapBaselineConfig: ClarifyShapBaselineConfig | undefined;
  NumberOfSamples?: number;
  UseLogit?: boolean;
  Seed?: number;
  TextConfig?: ClarifyTextConfig;
}
export interface ClarifyExplainerConfig {
  EnableExplanations?: string;
  InferenceConfig?: ClarifyInferenceConfig;
  ShapConfig: ClarifyShapConfig | undefined;
}
export interface CodeRepository {
  RepositoryUrl: string | undefined;
}
export declare const CodeRepositorySortBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly LAST_MODIFIED_TIME: "LastModifiedTime";
  readonly NAME: "Name";
};
export type CodeRepositorySortBy =
  (typeof CodeRepositorySortBy)[keyof typeof CodeRepositorySortBy];
export declare const CodeRepositorySortOrder: {
  readonly ASCENDING: "Ascending";
  readonly DESCENDING: "Descending";
};
export type CodeRepositorySortOrder =
  (typeof CodeRepositorySortOrder)[keyof typeof CodeRepositorySortOrder];
export interface GitConfig {
  RepositoryUrl: string | undefined;
  Branch?: string;
  SecretArn?: string;
}
export interface CodeRepositorySummary {
  CodeRepositoryName: string | undefined;
  CodeRepositoryArn: string | undefined;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  GitConfig?: GitConfig;
}
export interface CognitoConfig {
  UserPool: string | undefined;
  ClientId: string | undefined;
}
export interface CognitoMemberDefinition {
  UserPool: string | undefined;
  UserGroup: string | undefined;
  ClientId: string | undefined;
}
export interface CollectionConfiguration {
  CollectionName?: string;
  CollectionParameters?: Record<string, string>;
}
export declare const CompilationJobStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly INPROGRESS: "INPROGRESS";
  readonly STARTING: "STARTING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
};
export type CompilationJobStatus =
  (typeof CompilationJobStatus)[keyof typeof CompilationJobStatus];
export declare const TargetDevice: {
  readonly AISAGE: "aisage";
  readonly AMBA_CV2: "amba_cv2";
  readonly AMBA_CV22: "amba_cv22";
  readonly AMBA_CV25: "amba_cv25";
  readonly COREML: "coreml";
  readonly DEEPLENS: "deeplens";
  readonly IMX8MPLUS: "imx8mplus";
  readonly IMX8QM: "imx8qm";
  readonly JACINTO_TDA4VM: "jacinto_tda4vm";
  readonly JETSON_NANO: "jetson_nano";
  readonly JETSON_TX1: "jetson_tx1";
  readonly JETSON_TX2: "jetson_tx2";
  readonly JETSON_XAVIER: "jetson_xavier";
  readonly LAMBDA: "lambda";
  readonly ML_C4: "ml_c4";
  readonly ML_C5: "ml_c5";
  readonly ML_EIA2: "ml_eia2";
  readonly ML_G4DN: "ml_g4dn";
  readonly ML_INF1: "ml_inf1";
  readonly ML_M4: "ml_m4";
  readonly ML_M5: "ml_m5";
  readonly ML_P2: "ml_p2";
  readonly ML_P3: "ml_p3";
  readonly QCS603: "qcs603";
  readonly QCS605: "qcs605";
  readonly RASP3B: "rasp3b";
  readonly RK3288: "rk3288";
  readonly RK3399: "rk3399";
  readonly SBE_C: "sbe_c";
  readonly SITARA_AM57X: "sitara_am57x";
  readonly X86_WIN32: "x86_win32";
  readonly X86_WIN64: "x86_win64";
};
export type TargetDevice = (typeof TargetDevice)[keyof typeof TargetDevice];
export declare const TargetPlatformAccelerator: {
  readonly INTEL_GRAPHICS: "INTEL_GRAPHICS";
  readonly MALI: "MALI";
  readonly NNA: "NNA";
  readonly NVIDIA: "NVIDIA";
};
export type TargetPlatformAccelerator =
  (typeof TargetPlatformAccelerator)[keyof typeof TargetPlatformAccelerator];
export declare const TargetPlatformArch: {
  readonly ARM64: "ARM64";
  readonly ARM_EABI: "ARM_EABI";
  readonly ARM_EABIHF: "ARM_EABIHF";
  readonly X86: "X86";
  readonly X86_64: "X86_64";
};
export type TargetPlatformArch =
  (typeof TargetPlatformArch)[keyof typeof TargetPlatformArch];
export declare const TargetPlatformOs: {
  readonly ANDROID: "ANDROID";
  readonly LINUX: "LINUX";
};
export type TargetPlatformOs =
  (typeof TargetPlatformOs)[keyof typeof TargetPlatformOs];
export interface CompilationJobSummary {
  CompilationJobName: string | undefined;
  CompilationJobArn: string | undefined;
  CreationTime: Date | undefined;
  CompilationStartTime?: Date;
  CompilationEndTime?: Date;
  CompilationTargetDevice?: TargetDevice | string;
  CompilationTargetPlatformOs?: TargetPlatformOs | string;
  CompilationTargetPlatformArch?: TargetPlatformArch | string;
  CompilationTargetPlatformAccelerator?: TargetPlatformAccelerator | string;
  LastModifiedTime?: Date;
  CompilationJobStatus: CompilationJobStatus | string | undefined;
}
export declare const CompleteOnConvergence: {
  readonly DISABLED: "Disabled";
  readonly ENABLED: "Enabled";
};
export type CompleteOnConvergence =
  (typeof CompleteOnConvergence)[keyof typeof CompleteOnConvergence];
export declare const ConditionOutcome: {
  readonly FALSE: "False";
  readonly TRUE: "True";
};
export type ConditionOutcome =
  (typeof ConditionOutcome)[keyof typeof ConditionOutcome];
export interface ConditionStepMetadata {
  Outcome?: ConditionOutcome | string;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare const RepositoryAccessMode: {
  readonly PLATFORM: "Platform";
  readonly VPC: "Vpc";
};
export type RepositoryAccessMode =
  (typeof RepositoryAccessMode)[keyof typeof RepositoryAccessMode];
export interface RepositoryAuthConfig {
  RepositoryCredentialsProviderArn: string | undefined;
}
export interface ImageConfig {
  RepositoryAccessMode: RepositoryAccessMode | string | undefined;
  RepositoryAuthConfig?: RepositoryAuthConfig;
}
export declare const ContainerMode: {
  readonly MULTI_MODEL: "MultiModel";
  readonly SINGLE_MODEL: "SingleModel";
};
export type ContainerMode = (typeof ContainerMode)[keyof typeof ContainerMode];
export declare const ModelCacheSetting: {
  readonly DISABLED: "Disabled";
  readonly ENABLED: "Enabled";
};
export type ModelCacheSetting =
  (typeof ModelCacheSetting)[keyof typeof ModelCacheSetting];
export interface MultiModelConfig {
  ModelCacheSetting?: ModelCacheSetting | string;
}
export interface ContainerDefinition {
  ContainerHostname?: string;
  Image?: string;
  ImageConfig?: ImageConfig;
  Mode?: ContainerMode | string;
  ModelDataUrl?: string;
  Environment?: Record<string, string>;
  ModelPackageName?: string;
  InferenceSpecificationName?: string;
  MultiModelConfig?: MultiModelConfig;
}
export declare const ContentClassifier: {
  readonly FREE_OF_ADULT_CONTENT: "FreeOfAdultContent";
  readonly FREE_OF_PERSONALLY_IDENTIFIABLE_INFORMATION: "FreeOfPersonallyIdentifiableInformation";
};
export type ContentClassifier =
  (typeof ContentClassifier)[keyof typeof ContentClassifier];
export interface ContextSource {
  SourceUri: string | undefined;
  SourceType?: string;
  SourceId?: string;
}
export interface ContextSummary {
  ContextArn?: string;
  ContextName?: string;
  Source?: ContextSource;
  ContextType?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export declare const HyperParameterScalingType: {
  readonly AUTO: "Auto";
  readonly LINEAR: "Linear";
  readonly LOGARITHMIC: "Logarithmic";
  readonly REVERSE_LOGARITHMIC: "ReverseLogarithmic";
};
export type HyperParameterScalingType =
  (typeof HyperParameterScalingType)[keyof typeof HyperParameterScalingType];
export interface ContinuousParameterRange {
  Name: string | undefined;
  MinValue: string | undefined;
  MaxValue: string | undefined;
  ScalingType?: HyperParameterScalingType | string;
}
export interface ContinuousParameterRangeSpecification {
  MinValue: string | undefined;
  MaxValue: string | undefined;
}
export interface ConvergenceDetected {
  CompleteOnConvergence?: CompleteOnConvergence | string;
}
export interface MetadataProperties {
  CommitId?: string;
  Repository?: string;
  GeneratedBy?: string;
  ProjectId?: string;
}
export interface CreateActionRequest {
  ActionName: string | undefined;
  Source: ActionSource | undefined;
  ActionType: string | undefined;
  Description?: string;
  Status?: ActionStatus | string;
  Properties?: Record<string, string>;
  MetadataProperties?: MetadataProperties;
  Tags?: Tag[];
}
export interface CreateActionResponse {
  ActionArn?: string;
}
export interface IntegerParameterRangeSpecification {
  MinValue: string | undefined;
  MaxValue: string | undefined;
}
export interface ParameterRange {
  IntegerParameterRangeSpecification?: IntegerParameterRangeSpecification;
  ContinuousParameterRangeSpecification?: ContinuousParameterRangeSpecification;
  CategoricalParameterRangeSpecification?: CategoricalParameterRangeSpecification;
}
export declare const ParameterType: {
  readonly CATEGORICAL: "Categorical";
  readonly CONTINUOUS: "Continuous";
  readonly FREE_TEXT: "FreeText";
  readonly INTEGER: "Integer";
};
export type ParameterType = (typeof ParameterType)[keyof typeof ParameterType];
export interface HyperParameterSpecification {
  Name: string | undefined;
  Description?: string;
  Type: ParameterType | string | undefined;
  Range?: ParameterRange;
  IsTunable?: boolean;
  IsRequired?: boolean;
  DefaultValue?: string;
}
export declare const HyperParameterTuningJobObjectiveType: {
  readonly MAXIMIZE: "Maximize";
  readonly MINIMIZE: "Minimize";
};
export type HyperParameterTuningJobObjectiveType =
  (typeof HyperParameterTuningJobObjectiveType)[keyof typeof HyperParameterTuningJobObjectiveType];
export interface HyperParameterTuningJobObjective {
  Type: HyperParameterTuningJobObjectiveType | string | undefined;
  MetricName: string | undefined;
}
export interface TrainingSpecification {
  TrainingImage: string | undefined;
  TrainingImageDigest?: string;
  SupportedHyperParameters?: HyperParameterSpecification[];
  SupportedTrainingInstanceTypes: (TrainingInstanceType | string)[] | undefined;
  SupportsDistributedTraining?: boolean;
  MetricDefinitions?: MetricDefinition[];
  TrainingChannels: ChannelSpecification[] | undefined;
  SupportedTuningJobObjectiveMetrics?: HyperParameterTuningJobObjective[];
}
export interface CreateAlgorithmInput {
  AlgorithmName: string | undefined;
  AlgorithmDescription?: string;
  TrainingSpecification: TrainingSpecification | undefined;
  InferenceSpecification?: InferenceSpecification;
  ValidationSpecification?: AlgorithmValidationSpecification;
  CertifyForMarketplace?: boolean;
  Tags?: Tag[];
}
export interface CreateAlgorithmOutput {
  AlgorithmArn: string | undefined;
}
export interface ResourceSpec {
  SageMakerImageArn?: string;
  SageMakerImageVersionArn?: string;
  InstanceType?: AppInstanceType | string;
  LifecycleConfigArn?: string;
}
export interface CreateAppRequest {
  DomainId: string | undefined;
  UserProfileName?: string;
  AppType: AppType | string | undefined;
  AppName: string | undefined;
  Tags?: Tag[];
  ResourceSpec?: ResourceSpec;
  SpaceName?: string;
}
export interface CreateAppResponse {
  AppArn?: string;
}
export declare class ResourceInUse extends __BaseException {
  readonly name: "ResourceInUse";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ResourceInUse, __BaseException>);
}
export interface CreateAppImageConfigRequest {
  AppImageConfigName: string | undefined;
  Tags?: Tag[];
  KernelGatewayImageConfig?: KernelGatewayImageConfig;
}
export interface CreateAppImageConfigResponse {
  AppImageConfigArn?: string;
}
export interface CreateArtifactRequest {
  ArtifactName?: string;
  Source: ArtifactSource | undefined;
  ArtifactType: string | undefined;
  Properties?: Record<string, string>;
  MetadataProperties?: MetadataProperties;
  Tags?: Tag[];
}
export interface CreateArtifactResponse {
  ArtifactArn?: string;
}
export interface ModelDeployConfig {
  AutoGenerateEndpointName?: boolean;
  EndpointName?: string;
}
export declare const ProblemType: {
  readonly BINARY_CLASSIFICATION: "BinaryClassification";
  readonly MULTICLASS_CLASSIFICATION: "MulticlassClassification";
  readonly REGRESSION: "Regression";
};
export type ProblemType = (typeof ProblemType)[keyof typeof ProblemType];
export interface CreateAutoMLJobRequest {
  AutoMLJobName: string | undefined;
  InputDataConfig: AutoMLChannel[] | undefined;
  OutputDataConfig: AutoMLOutputDataConfig | undefined;
  ProblemType?: ProblemType | string;
  AutoMLJobObjective?: AutoMLJobObjective;
  AutoMLJobConfig?: AutoMLJobConfig;
  RoleArn: string | undefined;
  GenerateCandidateDefinitionsOnly?: boolean;
  Tags?: Tag[];
  ModelDeployConfig?: ModelDeployConfig;
}
export interface CreateAutoMLJobResponse {
  AutoMLJobArn: string | undefined;
}
export interface CreateAutoMLJobV2Request {
  AutoMLJobName: string | undefined;
  AutoMLJobInputDataConfig: AutoMLJobChannel[] | undefined;
  OutputDataConfig: AutoMLOutputDataConfig | undefined;
  AutoMLProblemTypeConfig: AutoMLProblemTypeConfig | undefined;
  RoleArn: string | undefined;
  Tags?: Tag[];
  SecurityConfig?: AutoMLSecurityConfig;
  AutoMLJobObjective?: AutoMLJobObjective;
  ModelDeployConfig?: ModelDeployConfig;
  DataSplitConfig?: AutoMLDataSplitConfig;
}
export interface CreateAutoMLJobV2Response {
  AutoMLJobArn: string | undefined;
}
export interface CreateCodeRepositoryInput {
  CodeRepositoryName: string | undefined;
  GitConfig: GitConfig | undefined;
  Tags?: Tag[];
}
export interface CreateCodeRepositoryOutput {
  CodeRepositoryArn: string | undefined;
}
export declare const Framework: {
  readonly DARKNET: "DARKNET";
  readonly KERAS: "KERAS";
  readonly MXNET: "MXNET";
  readonly ONNX: "ONNX";
  readonly PYTORCH: "PYTORCH";
  readonly SKLEARN: "SKLEARN";
  readonly TENSORFLOW: "TENSORFLOW";
  readonly TFLITE: "TFLITE";
  readonly XGBOOST: "XGBOOST";
};
export type Framework = (typeof Framework)[keyof typeof Framework];
export interface InputConfig {
  S3Uri: string | undefined;
  DataInputConfig: string | undefined;
  Framework: Framework | string | undefined;
  FrameworkVersion?: string;
}
export interface TargetPlatform {
  Os: TargetPlatformOs | string | undefined;
  Arch: TargetPlatformArch | string | undefined;
  Accelerator?: TargetPlatformAccelerator | string;
}
export interface OutputConfig {
  S3OutputLocation: string | undefined;
  TargetDevice?: TargetDevice | string;
  TargetPlatform?: TargetPlatform;
  CompilerOptions?: string;
  KmsKeyId?: string;
}
export interface NeoVpcConfig {
  SecurityGroupIds: string[] | undefined;
  Subnets: string[] | undefined;
}
export interface CreateCompilationJobRequest {
  CompilationJobName: string | undefined;
  RoleArn: string | undefined;
  ModelPackageVersionArn?: string;
  InputConfig?: InputConfig;
  OutputConfig: OutputConfig | undefined;
  VpcConfig?: NeoVpcConfig;
  StoppingCondition: StoppingCondition | undefined;
  Tags?: Tag[];
}
export interface CreateCompilationJobResponse {
  CompilationJobArn: string | undefined;
}
export interface CreateContextRequest {
  ContextName: string | undefined;
  Source: ContextSource | undefined;
  ContextType: string | undefined;
  Description?: string;
  Properties?: Record<string, string>;
  Tags?: Tag[];
}
export interface CreateContextResponse {
  ContextArn?: string;
}
export interface DataQualityAppSpecification {
  ImageUri: string | undefined;
  ContainerEntrypoint?: string[];
  ContainerArguments?: string[];
  RecordPreprocessorSourceUri?: string;
  PostAnalyticsProcessorSourceUri?: string;
  Environment?: Record<string, string>;
}
export interface MonitoringConstraintsResource {
  S3Uri?: string;
}
export interface MonitoringStatisticsResource {
  S3Uri?: string;
}
export interface DataQualityBaselineConfig {
  BaseliningJobName?: string;
  ConstraintsResource?: MonitoringConstraintsResource;
  StatisticsResource?: MonitoringStatisticsResource;
}
export interface EndpointInput {
  EndpointName: string | undefined;
  LocalPath: string | undefined;
  S3InputMode?: ProcessingS3InputMode | string;
  S3DataDistributionType?: ProcessingS3DataDistributionType | string;
  FeaturesAttribute?: string;
  InferenceAttribute?: string;
  ProbabilityAttribute?: string;
  ProbabilityThresholdAttribute?: number;
  StartTimeOffset?: string;
  EndTimeOffset?: string;
}
export interface DataQualityJobInput {
  EndpointInput?: EndpointInput;
  BatchTransformInput?: BatchTransformInput;
}
export declare const ProcessingS3UploadMode: {
  readonly CONTINUOUS: "Continuous";
  readonly END_OF_JOB: "EndOfJob";
};
export type ProcessingS3UploadMode =
  (typeof ProcessingS3UploadMode)[keyof typeof ProcessingS3UploadMode];
export interface MonitoringS3Output {
  S3Uri: string | undefined;
  LocalPath: string | undefined;
  S3UploadMode?: ProcessingS3UploadMode | string;
}
export interface MonitoringOutput {
  S3Output: MonitoringS3Output | undefined;
}
export interface MonitoringOutputConfig {
  MonitoringOutputs: MonitoringOutput[] | undefined;
  KmsKeyId?: string;
}
export declare const ProcessingInstanceType: {
  readonly ML_C4_2XLARGE: "ml.c4.2xlarge";
  readonly ML_C4_4XLARGE: "ml.c4.4xlarge";
  readonly ML_C4_8XLARGE: "ml.c4.8xlarge";
  readonly ML_C4_XLARGE: "ml.c4.xlarge";
  readonly ML_C5_18XLARGE: "ml.c5.18xlarge";
  readonly ML_C5_2XLARGE: "ml.c5.2xlarge";
  readonly ML_C5_4XLARGE: "ml.c5.4xlarge";
  readonly ML_C5_9XLARGE: "ml.c5.9xlarge";
  readonly ML_C5_XLARGE: "ml.c5.xlarge";
  readonly ML_G4DN_12XLARGE: "ml.g4dn.12xlarge";
  readonly ML_G4DN_16XLARGE: "ml.g4dn.16xlarge";
  readonly ML_G4DN_2XLARGE: "ml.g4dn.2xlarge";
  readonly ML_G4DN_4XLARGE: "ml.g4dn.4xlarge";
  readonly ML_G4DN_8XLARGE: "ml.g4dn.8xlarge";
  readonly ML_G4DN_XLARGE: "ml.g4dn.xlarge";
  readonly ML_M4_10XLARGE: "ml.m4.10xlarge";
  readonly ML_M4_16XLARGE: "ml.m4.16xlarge";
  readonly ML_M4_2XLARGE: "ml.m4.2xlarge";
  readonly ML_M4_4XLARGE: "ml.m4.4xlarge";
  readonly ML_M4_XLARGE: "ml.m4.xlarge";
  readonly ML_M5_12XLARGE: "ml.m5.12xlarge";
  readonly ML_M5_24XLARGE: "ml.m5.24xlarge";
  readonly ML_M5_2XLARGE: "ml.m5.2xlarge";
  readonly ML_M5_4XLARGE: "ml.m5.4xlarge";
  readonly ML_M5_LARGE: "ml.m5.large";
  readonly ML_M5_XLARGE: "ml.m5.xlarge";
  readonly ML_P2_16XLARGE: "ml.p2.16xlarge";
  readonly ML_P2_8XLARGE: "ml.p2.8xlarge";
  readonly ML_P2_XLARGE: "ml.p2.xlarge";
  readonly ML_P3_16XLARGE: "ml.p3.16xlarge";
  readonly ML_P3_2XLARGE: "ml.p3.2xlarge";
  readonly ML_P3_8XLARGE: "ml.p3.8xlarge";
  readonly ML_R5_12XLARGE: "ml.r5.12xlarge";
  readonly ML_R5_16XLARGE: "ml.r5.16xlarge";
  readonly ML_R5_24XLARGE: "ml.r5.24xlarge";
  readonly ML_R5_2XLARGE: "ml.r5.2xlarge";
  readonly ML_R5_4XLARGE: "ml.r5.4xlarge";
  readonly ML_R5_8XLARGE: "ml.r5.8xlarge";
  readonly ML_R5_LARGE: "ml.r5.large";
  readonly ML_R5_XLARGE: "ml.r5.xlarge";
  readonly ML_T3_2XLARGE: "ml.t3.2xlarge";
  readonly ML_T3_LARGE: "ml.t3.large";
  readonly ML_T3_MEDIUM: "ml.t3.medium";
  readonly ML_T3_XLARGE: "ml.t3.xlarge";
};
export type ProcessingInstanceType =
  (typeof ProcessingInstanceType)[keyof typeof ProcessingInstanceType];
export interface MonitoringClusterConfig {
  InstanceCount: number | undefined;
  InstanceType: ProcessingInstanceType | string | undefined;
  VolumeSizeInGB: number | undefined;
  VolumeKmsKeyId?: string;
}
export interface MonitoringResources {
  ClusterConfig: MonitoringClusterConfig | undefined;
}
export interface MonitoringNetworkConfig {
  EnableInterContainerTrafficEncryption?: boolean;
  EnableNetworkIsolation?: boolean;
  VpcConfig?: VpcConfig;
}
export interface MonitoringStoppingCondition {
  MaxRuntimeInSeconds: number | undefined;
}
export interface CreateDataQualityJobDefinitionRequest {
  JobDefinitionName: string | undefined;
  DataQualityBaselineConfig?: DataQualityBaselineConfig;
  DataQualityAppSpecification: DataQualityAppSpecification | undefined;
  DataQualityJobInput: DataQualityJobInput | undefined;
  DataQualityJobOutputConfig: MonitoringOutputConfig | undefined;
  JobResources: MonitoringResources | undefined;
  NetworkConfig?: MonitoringNetworkConfig;
  RoleArn: string | undefined;
  StoppingCondition?: MonitoringStoppingCondition;
  Tags?: Tag[];
}
export interface CreateDataQualityJobDefinitionResponse {
  JobDefinitionArn: string | undefined;
}
export declare const EdgePresetDeploymentType: {
  readonly GreengrassV2Component: "GreengrassV2Component";
};
export type EdgePresetDeploymentType =
  (typeof EdgePresetDeploymentType)[keyof typeof EdgePresetDeploymentType];
export interface EdgeOutputConfig {
  S3OutputLocation: string | undefined;
  KmsKeyId?: string;
  PresetDeploymentType?: EdgePresetDeploymentType | string;
  PresetDeploymentConfig?: string;
}
export interface CreateDeviceFleetRequest {
  DeviceFleetName: string | undefined;
  RoleArn?: string;
  Description?: string;
  OutputConfig: EdgeOutputConfig | undefined;
  Tags?: Tag[];
  EnableIotRoleAlias?: boolean;
}
export interface JupyterServerAppSettings {
  DefaultResourceSpec?: ResourceSpec;
  LifecycleConfigArns?: string[];
  CodeRepositories?: CodeRepository[];
}
export interface CustomImage {
  ImageName: string | undefined;
  ImageVersionNumber?: number;
  AppImageConfigName: string | undefined;
}
export interface KernelGatewayAppSettings {
  DefaultResourceSpec?: ResourceSpec;
  CustomImages?: CustomImage[];
  LifecycleConfigArns?: string[];
}
export interface DefaultSpaceSettings {
  ExecutionRole?: string;
  SecurityGroups?: string[];
  JupyterServerAppSettings?: JupyterServerAppSettings;
  KernelGatewayAppSettings?: KernelGatewayAppSettings;
}
export interface RSessionAppSettings {
  DefaultResourceSpec?: ResourceSpec;
  CustomImages?: CustomImage[];
}
export declare const RStudioServerProAccessStatus: {
  readonly Disabled: "DISABLED";
  readonly Enabled: "ENABLED";
};
export type RStudioServerProAccessStatus =
  (typeof RStudioServerProAccessStatus)[keyof typeof RStudioServerProAccessStatus];
export declare const RStudioServerProUserGroup: {
  readonly Admin: "R_STUDIO_ADMIN";
  readonly User: "R_STUDIO_USER";
};
export type RStudioServerProUserGroup =
  (typeof RStudioServerProUserGroup)[keyof typeof RStudioServerProUserGroup];
export interface RStudioServerProAppSettings {
  AccessStatus?: RStudioServerProAccessStatus | string;
  UserGroup?: RStudioServerProUserGroup | string;
}
export declare const NotebookOutputOption: {
  readonly Allowed: "Allowed";
  readonly Disabled: "Disabled";
};
export type NotebookOutputOption =
  (typeof NotebookOutputOption)[keyof typeof NotebookOutputOption];
export interface SharingSettings {
  NotebookOutputOption?: NotebookOutputOption | string;
  S3OutputPath?: string;
  S3KmsKeyId?: string;
}
export interface TensorBoardAppSettings {
  DefaultResourceSpec?: ResourceSpec;
}
export interface UserSettings {
  ExecutionRole?: string;
  SecurityGroups?: string[];
  SharingSettings?: SharingSettings;
  JupyterServerAppSettings?: JupyterServerAppSettings;
  KernelGatewayAppSettings?: KernelGatewayAppSettings;
  TensorBoardAppSettings?: TensorBoardAppSettings;
  RStudioServerProAppSettings?: RStudioServerProAppSettings;
  RSessionAppSettings?: RSessionAppSettings;
  CanvasAppSettings?: CanvasAppSettings;
}
export declare const ExecutionRoleIdentityConfig: {
  readonly DISABLED: "DISABLED";
  readonly USER_PROFILE_NAME: "USER_PROFILE_NAME";
};
export type ExecutionRoleIdentityConfig =
  (typeof ExecutionRoleIdentityConfig)[keyof typeof ExecutionRoleIdentityConfig];
export interface RStudioServerProDomainSettings {
  DomainExecutionRoleArn: string | undefined;
  RStudioConnectUrl?: string;
  RStudioPackageManagerUrl?: string;
  DefaultResourceSpec?: ResourceSpec;
}
export interface DomainSettings {
  SecurityGroupIds?: string[];
  RStudioServerProDomainSettings?: RStudioServerProDomainSettings;
  ExecutionRoleIdentityConfig?: ExecutionRoleIdentityConfig | string;
}
export interface CreateDomainRequest {
  DomainName: string | undefined;
  AuthMode: AuthMode | string | undefined;
  DefaultUserSettings: UserSettings | undefined;
  SubnetIds: string[] | undefined;
  VpcId: string | undefined;
  Tags?: Tag[];
  AppNetworkAccessType?: AppNetworkAccessType | string;
  HomeEfsFileSystemKmsKeyId?: string;
  KmsKeyId?: string;
  AppSecurityGroupManagement?: AppSecurityGroupManagement | string;
  DomainSettings?: DomainSettings;
  DefaultSpaceSettings?: DefaultSpaceSettings;
}
export interface CreateDomainResponse {
  DomainArn?: string;
  Url?: string;
}
export interface EdgeDeploymentModelConfig {
  ModelHandle: string | undefined;
  EdgePackagingJobName: string | undefined;
}
export declare const FailureHandlingPolicy: {
  readonly DoNothing: "DO_NOTHING";
  readonly RollbackOnFailure: "ROLLBACK_ON_FAILURE";
};
export type FailureHandlingPolicy =
  (typeof FailureHandlingPolicy)[keyof typeof FailureHandlingPolicy];
export interface EdgeDeploymentConfig {
  FailureHandlingPolicy: FailureHandlingPolicy | string | undefined;
}
export declare const DeviceSubsetType: {
  readonly NameContains: "NAMECONTAINS";
  readonly Percentage: "PERCENTAGE";
  readonly Selection: "SELECTION";
};
export type DeviceSubsetType =
  (typeof DeviceSubsetType)[keyof typeof DeviceSubsetType];
export interface DeviceSelectionConfig {
  DeviceSubsetType: DeviceSubsetType | string | undefined;
  Percentage?: number;
  DeviceNames?: string[];
  DeviceNameContains?: string;
}
export interface DeploymentStage {
  StageName: string | undefined;
  DeviceSelectionConfig: DeviceSelectionConfig | undefined;
  DeploymentConfig?: EdgeDeploymentConfig;
}
export interface CreateEdgeDeploymentPlanRequest {
  EdgeDeploymentPlanName: string | undefined;
  ModelConfigs: EdgeDeploymentModelConfig[] | undefined;
  DeviceFleetName: string | undefined;
  Stages?: DeploymentStage[];
  Tags?: Tag[];
}
export interface CreateEdgeDeploymentPlanResponse {
  EdgeDeploymentPlanArn: string | undefined;
}
export interface CreateEdgeDeploymentStageRequest {
  EdgeDeploymentPlanName: string | undefined;
  Stages: DeploymentStage[] | undefined;
}
export interface CreateEdgePackagingJobRequest {
  EdgePackagingJobName: string | undefined;
  CompilationJobName: string | undefined;
  ModelName: string | undefined;
  ModelVersion: string | undefined;
  RoleArn: string | undefined;
  OutputConfig: EdgeOutputConfig | undefined;
  ResourceKey?: string;
  Tags?: Tag[];
}
