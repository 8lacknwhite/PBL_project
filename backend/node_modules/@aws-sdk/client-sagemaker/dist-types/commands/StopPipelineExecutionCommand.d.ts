import { EndpointParameterInstructions } from "@aws-sdk/middleware-endpoint";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { StopPipelineExecutionRequest, StopPipelineExecutionResponse } from "../models/models_3";
import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../SageMakerClient";
/**
 * @public
 *
 * The input for {@link StopPipelineExecutionCommand}.
 */
export interface StopPipelineExecutionCommandInput extends StopPipelineExecutionRequest {
}
/**
 * @public
 *
 * The output of {@link StopPipelineExecutionCommand}.
 */
export interface StopPipelineExecutionCommandOutput extends StopPipelineExecutionResponse, __MetadataBearer {
}
/**
 * @public
 * <p>Stops a pipeline execution.</p>
 *          <p>
 *             <b>Callback Step</b>
 *          </p>
 *          <p>A pipeline execution won't stop while a callback step is running.
 *         When you call <code>StopPipelineExecution</code>
 *         on a pipeline execution with a running callback step, SageMaker Pipelines sends an
 *         additional Amazon SQS message to the specified SQS queue. The body of the SQS message
 *         contains a "Status" field which is set to "Stopping".</p>
 *          <p>You should add logic to your Amazon SQS message consumer to take any needed action (for
 *         example, resource cleanup) upon receipt of the message followed by a call to
 *         <code>SendPipelineExecutionStepSuccess</code> or
 *         <code>SendPipelineExecutionStepFailure</code>.</p>
 *          <p>Only when SageMaker Pipelines receives one of these calls will it stop the pipeline execution.</p>
 *          <p>
 *             <b>Lambda Step</b>
 *          </p>
 *          <p>A pipeline execution can't be stopped while a lambda step is running because the Lambda
 *         function invoked by the lambda step can't be stopped. If you attempt to stop the execution
 *         while the Lambda function is running, the pipeline waits for the Lambda function to finish
 *         or until the timeout is hit, whichever occurs first, and then stops. If the Lambda function
 *         finishes, the pipeline execution status is <code>Stopped</code>. If the timeout is hit
 *         the pipeline execution status is <code>Failed</code>.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { SageMakerClient, StopPipelineExecutionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
 * // const { SageMakerClient, StopPipelineExecutionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
 * const client = new SageMakerClient(config);
 * const input = { // StopPipelineExecutionRequest
 *   PipelineExecutionArn: "STRING_VALUE", // required
 *   ClientRequestToken: "STRING_VALUE", // required
 * };
 * const command = new StopPipelineExecutionCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @param StopPipelineExecutionCommandInput - {@link StopPipelineExecutionCommandInput}
 * @returns {@link StopPipelineExecutionCommandOutput}
 * @see {@link StopPipelineExecutionCommandInput} for command's `input` shape.
 * @see {@link StopPipelineExecutionCommandOutput} for command's `response` shape.
 * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
 *
 * @throws {@link ResourceNotFound} (client fault)
 *  <p>Resource being access is not found.</p>
 *
 *
 */
export declare class StopPipelineExecutionCommand extends $Command<StopPipelineExecutionCommandInput, StopPipelineExecutionCommandOutput, SageMakerClientResolvedConfig> {
    readonly input: StopPipelineExecutionCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    /**
     * @public
     */
    constructor(input: StopPipelineExecutionCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopPipelineExecutionCommandInput, StopPipelineExecutionCommandOutput>;
    /**
     * @internal
     */
    private serialize;
    /**
     * @internal
     */
    private deserialize;
}
