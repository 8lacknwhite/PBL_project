import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, map, resolvedPath as __resolvedPath, take, withBaseException, } from "@aws-sdk/smithy-client";
import { InternalDependencyException, InternalFailure, ModelError, ModelNotReadyException, ServiceUnavailable, ValidationError, } from "../models/models_0";
import { SageMakerRuntimeServiceException as __BaseException } from "../models/SageMakerRuntimeServiceException";
export const se_InvokeEndpointCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": input.ContentType || "application/octet-stream",
        accept: input.Accept,
        "x-amzn-sagemaker-custom-attributes": input.CustomAttributes,
        "x-amzn-sagemaker-target-model": input.TargetModel,
        "x-amzn-sagemaker-target-variant": input.TargetVariant,
        "x-amzn-sagemaker-target-container-hostname": input.TargetContainerHostname,
        "x-amzn-sagemaker-inference-id": input.InferenceId,
        "x-amzn-sagemaker-enable-explanations": input.EnableExplanations,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/endpoints/{EndpointName}/invocations";
    resolvedPath = __resolvedPath(resolvedPath, input, "EndpointName", () => input.EndpointName, "{EndpointName}", false);
    let body;
    if (input.Body !== undefined) {
        body = input.Body;
    }
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_InvokeEndpointAsyncCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amzn-sagemaker-content-type": input.ContentType,
        "x-amzn-sagemaker-accept": input.Accept,
        "x-amzn-sagemaker-custom-attributes": input.CustomAttributes,
        "x-amzn-sagemaker-inference-id": input.InferenceId,
        "x-amzn-sagemaker-inputlocation": input.InputLocation,
        "x-amzn-sagemaker-requestttlseconds": [
            () => isSerializableHeaderValue(input.RequestTTLSeconds),
            () => input.RequestTTLSeconds.toString(),
        ],
        "x-amzn-sagemaker-invocationtimeoutseconds": [
            () => isSerializableHeaderValue(input.InvocationTimeoutSeconds),
            () => input.InvocationTimeoutSeconds.toString(),
        ],
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/endpoints/{EndpointName}/async-invocations";
    resolvedPath = __resolvedPath(resolvedPath, input, "EndpointName", () => input.EndpointName, "{EndpointName}", false);
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
export const de_InvokeEndpointCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_InvokeEndpointCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        ContentType: [, output.headers["content-type"]],
        InvokedProductionVariant: [, output.headers["x-amzn-invoked-production-variant"]],
        CustomAttributes: [, output.headers["x-amzn-sagemaker-custom-attributes"]],
    });
    const data = await collectBody(output.body, context);
    contents.Body = data;
    return contents;
};
const de_InvokeEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalDependencyException":
        case "com.amazonaws.sagemakerruntime#InternalDependencyException":
            throw await de_InternalDependencyExceptionRes(parsedOutput, context);
        case "InternalFailure":
        case "com.amazonaws.sagemakerruntime#InternalFailure":
            throw await de_InternalFailureRes(parsedOutput, context);
        case "ModelError":
        case "com.amazonaws.sagemakerruntime#ModelError":
            throw await de_ModelErrorRes(parsedOutput, context);
        case "ModelNotReadyException":
        case "com.amazonaws.sagemakerruntime#ModelNotReadyException":
            throw await de_ModelNotReadyExceptionRes(parsedOutput, context);
        case "ServiceUnavailable":
        case "com.amazonaws.sagemakerruntime#ServiceUnavailable":
            throw await de_ServiceUnavailableRes(parsedOutput, context);
        case "ValidationError":
        case "com.amazonaws.sagemakerruntime#ValidationError":
            throw await de_ValidationErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_InvokeEndpointAsyncCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_InvokeEndpointAsyncCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        OutputLocation: [, output.headers["x-amzn-sagemaker-outputlocation"]],
        FailureLocation: [, output.headers["x-amzn-sagemaker-failurelocation"]],
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        InferenceId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_InvokeEndpointAsyncCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalFailure":
        case "com.amazonaws.sagemakerruntime#InternalFailure":
            throw await de_InternalFailureRes(parsedOutput, context);
        case "ServiceUnavailable":
        case "com.amazonaws.sagemakerruntime#ServiceUnavailable":
            throw await de_ServiceUnavailableRes(parsedOutput, context);
        case "ValidationError":
        case "com.amazonaws.sagemakerruntime#ValidationError":
            throw await de_ValidationErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_InternalDependencyExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalDependencyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalFailureRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalFailure({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ModelErrorRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        LogStreamArn: __expectString,
        Message: __expectString,
        OriginalMessage: __expectString,
        OriginalStatusCode: __expectInt32,
    });
    Object.assign(contents, doc);
    const exception = new ModelError({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ModelNotReadyExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ModelNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceUnavailableRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceUnavailable({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationErrorRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationError({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
