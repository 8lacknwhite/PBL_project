import {
  ActionSource,
  ActionStatus,
  AdditionalInferenceSpecificationDefinition,
  AgentVersion,
  AlgorithmSpecification,
  AlgorithmStatus,
  AlgorithmStatusDetails,
  AlgorithmValidationSpecification,
  AppNetworkAccessType,
  AppSecurityGroupManagement,
  AppSpecification,
  AppStatus,
  AppType,
  ArtifactSource,
  AssociationEdgeType,
  AsyncInferenceConfig,
  AuthMode,
  AutoMLCandidate,
  AutoMLChannel,
  AutoMLDataSplitConfig,
  AutoMLJobArtifacts,
  AutoMLJobChannel,
  AutoMLJobCompletionCriteria,
  AutoMLJobConfig,
  AutoMLJobObjective,
  AutoMLJobSecondaryStatus,
  AutoMLJobStatus,
  AutoMLOutputDataConfig,
  AutoMLPartialFailureReason,
  AutoMLProblemTypeConfig,
  AutoMLSecurityConfig,
  BatchDataCaptureConfig,
  BatchStrategy,
  Channel,
  CheckpointConfig,
  CognitoConfig,
  CompilationJobStatus,
  ContainerDefinition,
  ContextSource,
  DataQualityAppSpecification,
  DataQualityBaselineConfig,
  DataQualityJobInput,
  DefaultSpaceSettings,
  DeviceSelectionConfig,
  DomainSettings,
  EdgeDeploymentConfig,
  EdgeDeploymentModelConfig,
  EdgeOutputConfig,
  EdgePresetDeploymentType,
  ExecutionRoleIdentityConfig,
  GitConfig,
  HyperParameterTuningJobObjectiveType,
  InferenceSpecification,
  InputConfig,
  KernelGatewayImageConfig,
  MetadataProperties,
  ModelApprovalStatus,
  ModelDeployConfig,
  ModelPackageStatus,
  MonitoringNetworkConfig,
  MonitoringOutputConfig,
  MonitoringResources,
  MonitoringStoppingCondition,
  NeoVpcConfig,
  ObjectiveStatus,
  OutputConfig,
  OutputDataConfig,
  ProblemType,
  ProductionVariantInstanceType,
  ResourceConfig,
  ResourceSpec,
  StoppingCondition,
  Tag,
  TrainingSpecification,
  TransformInput,
  TransformOutput,
  TransformResources,
  UserContext,
  UserSettings,
  VpcConfig,
} from "./models_0";
import {
  _InstanceType,
  DataCaptureConfig,
  DataCaptureConfigSummary,
  DataProcessing,
  DebugHookConfig,
  DebugRuleConfiguration,
  DebugRuleEvaluationStatus,
  DeploymentConfig,
  DirectInternetAccess,
  DriftCheckBaselines,
  EndpointInfo,
  ExperimentConfig,
  ExplainerConfig,
  FeatureDefinition,
  FeatureType,
  FlowDefinitionOutputConfig,
  HubContentType,
  HubS3StorageConfig,
  HumanLoopActivationConfig,
  HumanLoopConfig,
  HumanLoopRequestSource,
  HumanTaskConfig,
  HyperParameterTrainingJobDefinition,
  HyperParameterTuningJobConfig,
  HyperParameterTuningJobStrategyType,
  HyperParameterTuningJobWarmStartConfig,
  InferenceExecutionConfig,
  InferenceExperimentDataStorageConfig,
  InferenceExperimentSchedule,
  InferenceExperimentType,
  InstanceMetadataServiceConfiguration,
  JobType,
  LabelingJobAlgorithmsConfig,
  LabelingJobInputConfig,
  LabelingJobOutputConfig,
  LabelingJobStoppingConditions,
  MemberDefinition,
  ModelBiasAppSpecification,
  ModelBiasBaselineConfig,
  ModelBiasJobInput,
  ModelCardExportOutputConfig,
  ModelCardSecurityConfig,
  ModelCardStatus,
  ModelClientConfig,
  ModelExplainabilityAppSpecification,
  ModelExplainabilityBaselineConfig,
  ModelExplainabilityJobInput,
  ModelInfrastructureConfig,
  ModelMetrics,
  ModelPackageValidationSpecification,
  ModelQualityAppSpecification,
  ModelQualityBaselineConfig,
  ModelQualityJobInput,
  MonitoringScheduleConfig,
  MonitoringType,
  NetworkConfig,
  NotebookInstanceAcceleratorType,
  NotebookInstanceLifecycleHook,
  NotificationConfiguration,
  OfflineStoreConfig,
  OnlineStoreConfig,
  ParallelismConfiguration,
  ProcessingInput,
  ProcessingOutputConfig,
  ProcessingResources,
  ProcessingStoppingCondition,
  Processor,
  ProductionVariant,
  ProductionVariantAcceleratorType,
  ProductionVariantServerlessConfig,
  ProfilerConfig,
  ProfilerRuleConfiguration,
  RecommendationJobInputConfig,
  RecommendationJobStoppingConditions,
  RecommendationJobType,
  ResourceLimits,
  RetryStrategy,
  RootAccess,
  RuleEvaluationStatus,
  ServiceCatalogProvisioningDetails,
  ShadowModeConfig,
  SourceAlgorithmSpecification,
  SourceIpConfig,
  SpaceSettings,
  StudioLifecycleConfigAppType,
  TensorBoardOutputConfig,
  TrialComponentArtifact,
  TrialComponentParameterValue,
  TrialComponentStatus,
  VendorGuidance,
} from "./models_1";
export interface DeleteTagsOutput {}
export interface DeleteTrialRequest {
  TrialName: string | undefined;
}
export interface DeleteTrialResponse {
  TrialArn?: string;
}
export interface DeleteTrialComponentRequest {
  TrialComponentName: string | undefined;
}
export interface DeleteTrialComponentResponse {
  TrialComponentArn?: string;
}
export interface DeleteUserProfileRequest {
  DomainId: string | undefined;
  UserProfileName: string | undefined;
}
export interface DeleteWorkforceRequest {
  WorkforceName: string | undefined;
}
export interface DeleteWorkforceResponse {}
export interface DeleteWorkteamRequest {
  WorkteamName: string | undefined;
}
export interface DeleteWorkteamResponse {
  Success: boolean | undefined;
}
export interface DeployedImage {
  SpecifiedImage?: string;
  ResolvedImage?: string;
  ResolutionTime?: Date;
}
export declare const StageStatus: {
  readonly Creating: "CREATING";
  readonly Deployed: "DEPLOYED";
  readonly Failed: "FAILED";
  readonly InProgress: "INPROGRESS";
  readonly ReadyToDeploy: "READYTODEPLOY";
  readonly Starting: "STARTING";
  readonly Stopped: "STOPPED";
  readonly Stopping: "STOPPING";
};
export type StageStatus = (typeof StageStatus)[keyof typeof StageStatus];
export interface EdgeDeploymentStatus {
  StageStatus: StageStatus | string | undefined;
  EdgeDeploymentSuccessInStage: number | undefined;
  EdgeDeploymentPendingInStage: number | undefined;
  EdgeDeploymentFailedInStage: number | undefined;
  EdgeDeploymentStatusMessage?: string;
  EdgeDeploymentStageStartTime?: Date;
}
export interface DeploymentStageStatusSummary {
  StageName: string | undefined;
  DeviceSelectionConfig: DeviceSelectionConfig | undefined;
  DeploymentConfig: EdgeDeploymentConfig | undefined;
  DeploymentStatus: EdgeDeploymentStatus | undefined;
}
export interface DeregisterDevicesRequest {
  DeviceFleetName: string | undefined;
  DeviceNames: string[] | undefined;
}
export interface DescribeActionRequest {
  ActionName: string | undefined;
}
export interface DescribeActionResponse {
  ActionName?: string;
  ActionArn?: string;
  Source?: ActionSource;
  ActionType?: string;
  Description?: string;
  Status?: ActionStatus | string;
  Properties?: Record<string, string>;
  CreationTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
  MetadataProperties?: MetadataProperties;
  LineageGroupArn?: string;
}
export interface DescribeAlgorithmInput {
  AlgorithmName: string | undefined;
}
export interface DescribeAlgorithmOutput {
  AlgorithmName: string | undefined;
  AlgorithmArn: string | undefined;
  AlgorithmDescription?: string;
  CreationTime: Date | undefined;
  TrainingSpecification: TrainingSpecification | undefined;
  InferenceSpecification?: InferenceSpecification;
  ValidationSpecification?: AlgorithmValidationSpecification;
  AlgorithmStatus: AlgorithmStatus | string | undefined;
  AlgorithmStatusDetails: AlgorithmStatusDetails | undefined;
  ProductId?: string;
  CertifyForMarketplace?: boolean;
}
export interface DescribeAppRequest {
  DomainId: string | undefined;
  UserProfileName?: string;
  AppType: AppType | string | undefined;
  AppName: string | undefined;
  SpaceName?: string;
}
export interface DescribeAppResponse {
  AppArn?: string;
  AppType?: AppType | string;
  AppName?: string;
  DomainId?: string;
  UserProfileName?: string;
  Status?: AppStatus | string;
  LastHealthCheckTimestamp?: Date;
  LastUserActivityTimestamp?: Date;
  CreationTime?: Date;
  FailureReason?: string;
  ResourceSpec?: ResourceSpec;
  SpaceName?: string;
}
export interface DescribeAppImageConfigRequest {
  AppImageConfigName: string | undefined;
}
export interface DescribeAppImageConfigResponse {
  AppImageConfigArn?: string;
  AppImageConfigName?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  KernelGatewayImageConfig?: KernelGatewayImageConfig;
}
export interface DescribeArtifactRequest {
  ArtifactArn: string | undefined;
}
export interface DescribeArtifactResponse {
  ArtifactName?: string;
  ArtifactArn?: string;
  Source?: ArtifactSource;
  ArtifactType?: string;
  Properties?: Record<string, string>;
  CreationTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
  MetadataProperties?: MetadataProperties;
  LineageGroupArn?: string;
}
export interface DescribeAutoMLJobRequest {
  AutoMLJobName: string | undefined;
}
export interface ModelDeployResult {
  EndpointName?: string;
}
export interface ResolvedAttributes {
  AutoMLJobObjective?: AutoMLJobObjective;
  ProblemType?: ProblemType | string;
  CompletionCriteria?: AutoMLJobCompletionCriteria;
}
export interface DescribeAutoMLJobResponse {
  AutoMLJobName: string | undefined;
  AutoMLJobArn: string | undefined;
  InputDataConfig: AutoMLChannel[] | undefined;
  OutputDataConfig: AutoMLOutputDataConfig | undefined;
  RoleArn: string | undefined;
  AutoMLJobObjective?: AutoMLJobObjective;
  ProblemType?: ProblemType | string;
  AutoMLJobConfig?: AutoMLJobConfig;
  CreationTime: Date | undefined;
  EndTime?: Date;
  LastModifiedTime: Date | undefined;
  FailureReason?: string;
  PartialFailureReasons?: AutoMLPartialFailureReason[];
  BestCandidate?: AutoMLCandidate;
  AutoMLJobStatus: AutoMLJobStatus | string | undefined;
  AutoMLJobSecondaryStatus: AutoMLJobSecondaryStatus | string | undefined;
  GenerateCandidateDefinitionsOnly?: boolean;
  AutoMLJobArtifacts?: AutoMLJobArtifacts;
  ResolvedAttributes?: ResolvedAttributes;
  ModelDeployConfig?: ModelDeployConfig;
  ModelDeployResult?: ModelDeployResult;
}
export interface DescribeAutoMLJobV2Request {
  AutoMLJobName: string | undefined;
}
export interface DescribeAutoMLJobV2Response {
  AutoMLJobName: string | undefined;
  AutoMLJobArn: string | undefined;
  AutoMLJobInputDataConfig: AutoMLJobChannel[] | undefined;
  OutputDataConfig: AutoMLOutputDataConfig | undefined;
  RoleArn: string | undefined;
  AutoMLJobObjective?: AutoMLJobObjective;
  AutoMLProblemTypeConfig?: AutoMLProblemTypeConfig;
  CreationTime: Date | undefined;
  EndTime?: Date;
  LastModifiedTime: Date | undefined;
  FailureReason?: string;
  PartialFailureReasons?: AutoMLPartialFailureReason[];
  BestCandidate?: AutoMLCandidate;
  AutoMLJobStatus: AutoMLJobStatus | string | undefined;
  AutoMLJobSecondaryStatus: AutoMLJobSecondaryStatus | string | undefined;
  ModelDeployConfig?: ModelDeployConfig;
  ModelDeployResult?: ModelDeployResult;
  DataSplitConfig?: AutoMLDataSplitConfig;
  SecurityConfig?: AutoMLSecurityConfig;
}
export interface DescribeCodeRepositoryInput {
  CodeRepositoryName: string | undefined;
}
export interface DescribeCodeRepositoryOutput {
  CodeRepositoryName: string | undefined;
  CodeRepositoryArn: string | undefined;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  GitConfig?: GitConfig;
}
export interface DescribeCompilationJobRequest {
  CompilationJobName: string | undefined;
}
export interface ModelArtifacts {
  S3ModelArtifacts: string | undefined;
}
export interface ModelDigests {
  ArtifactDigest?: string;
}
export interface DescribeCompilationJobResponse {
  CompilationJobName: string | undefined;
  CompilationJobArn: string | undefined;
  CompilationJobStatus: CompilationJobStatus | string | undefined;
  CompilationStartTime?: Date;
  CompilationEndTime?: Date;
  StoppingCondition: StoppingCondition | undefined;
  InferenceImage?: string;
  ModelPackageVersionArn?: string;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  FailureReason: string | undefined;
  ModelArtifacts: ModelArtifacts | undefined;
  ModelDigests?: ModelDigests;
  RoleArn: string | undefined;
  InputConfig: InputConfig | undefined;
  OutputConfig: OutputConfig | undefined;
  VpcConfig?: NeoVpcConfig;
}
export interface DescribeContextRequest {
  ContextName: string | undefined;
}
export interface DescribeContextResponse {
  ContextName?: string;
  ContextArn?: string;
  Source?: ContextSource;
  ContextType?: string;
  Description?: string;
  Properties?: Record<string, string>;
  CreationTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
  LineageGroupArn?: string;
}
export interface DescribeDataQualityJobDefinitionRequest {
  JobDefinitionName: string | undefined;
}
export interface DescribeDataQualityJobDefinitionResponse {
  JobDefinitionArn: string | undefined;
  JobDefinitionName: string | undefined;
  CreationTime: Date | undefined;
  DataQualityBaselineConfig?: DataQualityBaselineConfig;
  DataQualityAppSpecification: DataQualityAppSpecification | undefined;
  DataQualityJobInput: DataQualityJobInput | undefined;
  DataQualityJobOutputConfig: MonitoringOutputConfig | undefined;
  JobResources: MonitoringResources | undefined;
  NetworkConfig?: MonitoringNetworkConfig;
  RoleArn: string | undefined;
  StoppingCondition?: MonitoringStoppingCondition;
}
export interface DescribeDeviceRequest {
  NextToken?: string;
  DeviceName: string | undefined;
  DeviceFleetName: string | undefined;
}
export interface EdgeModel {
  ModelName: string | undefined;
  ModelVersion: string | undefined;
  LatestSampleTime?: Date;
  LatestInference?: Date;
}
export interface DescribeDeviceResponse {
  DeviceArn?: string;
  DeviceName: string | undefined;
  Description?: string;
  DeviceFleetName: string | undefined;
  IotThingName?: string;
  RegistrationTime: Date | undefined;
  LatestHeartbeat?: Date;
  Models?: EdgeModel[];
  MaxModels?: number;
  NextToken?: string;
  AgentVersion?: string;
}
export interface DescribeDeviceFleetRequest {
  DeviceFleetName: string | undefined;
}
export interface DescribeDeviceFleetResponse {
  DeviceFleetName: string | undefined;
  DeviceFleetArn: string | undefined;
  OutputConfig: EdgeOutputConfig | undefined;
  Description?: string;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  RoleArn?: string;
  IotRoleAlias?: string;
}
export interface DescribeDomainRequest {
  DomainId: string | undefined;
}
export declare const DomainStatus: {
  readonly Delete_Failed: "Delete_Failed";
  readonly Deleting: "Deleting";
  readonly Failed: "Failed";
  readonly InService: "InService";
  readonly Pending: "Pending";
  readonly Update_Failed: "Update_Failed";
  readonly Updating: "Updating";
};
export type DomainStatus = (typeof DomainStatus)[keyof typeof DomainStatus];
export interface DescribeDomainResponse {
  DomainArn?: string;
  DomainId?: string;
  DomainName?: string;
  HomeEfsFileSystemId?: string;
  SingleSignOnManagedApplicationInstanceId?: string;
  Status?: DomainStatus | string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  FailureReason?: string;
  AuthMode?: AuthMode | string;
  DefaultUserSettings?: UserSettings;
  AppNetworkAccessType?: AppNetworkAccessType | string;
  HomeEfsFileSystemKmsKeyId?: string;
  SubnetIds?: string[];
  Url?: string;
  VpcId?: string;
  KmsKeyId?: string;
  DomainSettings?: DomainSettings;
  AppSecurityGroupManagement?: AppSecurityGroupManagement | string;
  SecurityGroupIdForDomainBoundary?: string;
  DefaultSpaceSettings?: DefaultSpaceSettings;
}
export interface DescribeEdgeDeploymentPlanRequest {
  EdgeDeploymentPlanName: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface DescribeEdgeDeploymentPlanResponse {
  EdgeDeploymentPlanArn: string | undefined;
  EdgeDeploymentPlanName: string | undefined;
  ModelConfigs: EdgeDeploymentModelConfig[] | undefined;
  DeviceFleetName: string | undefined;
  EdgeDeploymentSuccess?: number;
  EdgeDeploymentPending?: number;
  EdgeDeploymentFailed?: number;
  Stages: DeploymentStageStatusSummary[] | undefined;
  NextToken?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface DescribeEdgePackagingJobRequest {
  EdgePackagingJobName: string | undefined;
}
export declare const EdgePackagingJobStatus: {
  readonly Completed: "COMPLETED";
  readonly Failed: "FAILED";
  readonly InProgress: "INPROGRESS";
  readonly Starting: "STARTING";
  readonly Stopped: "STOPPED";
  readonly Stopping: "STOPPING";
};
export type EdgePackagingJobStatus =
  (typeof EdgePackagingJobStatus)[keyof typeof EdgePackagingJobStatus];
export declare const EdgePresetDeploymentStatus: {
  readonly Completed: "COMPLETED";
  readonly Failed: "FAILED";
};
export type EdgePresetDeploymentStatus =
  (typeof EdgePresetDeploymentStatus)[keyof typeof EdgePresetDeploymentStatus];
export interface EdgePresetDeploymentOutput {
  Type: EdgePresetDeploymentType | string | undefined;
  Artifact?: string;
  Status?: EdgePresetDeploymentStatus | string;
  StatusMessage?: string;
}
export interface DescribeEdgePackagingJobResponse {
  EdgePackagingJobArn: string | undefined;
  EdgePackagingJobName: string | undefined;
  CompilationJobName?: string;
  ModelName?: string;
  ModelVersion?: string;
  RoleArn?: string;
  OutputConfig?: EdgeOutputConfig;
  ResourceKey?: string;
  EdgePackagingJobStatus: EdgePackagingJobStatus | string | undefined;
  EdgePackagingJobStatusMessage?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  ModelArtifact?: string;
  ModelSignature?: string;
  PresetDeploymentOutput?: EdgePresetDeploymentOutput;
}
export interface DescribeEndpointInput {
  EndpointName: string | undefined;
}
export declare const EndpointStatus: {
  readonly CREATING: "Creating";
  readonly DELETING: "Deleting";
  readonly FAILED: "Failed";
  readonly IN_SERVICE: "InService";
  readonly OUT_OF_SERVICE: "OutOfService";
  readonly ROLLING_BACK: "RollingBack";
  readonly SYSTEM_UPDATING: "SystemUpdating";
  readonly UPDATING: "Updating";
};
export type EndpointStatus =
  (typeof EndpointStatus)[keyof typeof EndpointStatus];
export declare const VariantStatus: {
  readonly ACTIVATING_TRAFFIC: "ActivatingTraffic";
  readonly BAKING: "Baking";
  readonly CREATING: "Creating";
  readonly DELETING: "Deleting";
  readonly UPDATING: "Updating";
};
export type VariantStatus = (typeof VariantStatus)[keyof typeof VariantStatus];
export interface ProductionVariantStatus {
  Status: VariantStatus | string | undefined;
  StatusMessage?: string;
  StartTime?: Date;
}
export interface PendingProductionVariantSummary {
  VariantName: string | undefined;
  DeployedImages?: DeployedImage[];
  CurrentWeight?: number;
  DesiredWeight?: number;
  CurrentInstanceCount?: number;
  DesiredInstanceCount?: number;
  InstanceType?: ProductionVariantInstanceType | string;
  AcceleratorType?: ProductionVariantAcceleratorType | string;
  VariantStatus?: ProductionVariantStatus[];
  CurrentServerlessConfig?: ProductionVariantServerlessConfig;
  DesiredServerlessConfig?: ProductionVariantServerlessConfig;
}
export interface PendingDeploymentSummary {
  EndpointConfigName: string | undefined;
  ProductionVariants?: PendingProductionVariantSummary[];
  StartTime?: Date;
  ShadowProductionVariants?: PendingProductionVariantSummary[];
}
export interface ProductionVariantSummary {
  VariantName: string | undefined;
  DeployedImages?: DeployedImage[];
  CurrentWeight?: number;
  DesiredWeight?: number;
  CurrentInstanceCount?: number;
  DesiredInstanceCount?: number;
  VariantStatus?: ProductionVariantStatus[];
  CurrentServerlessConfig?: ProductionVariantServerlessConfig;
  DesiredServerlessConfig?: ProductionVariantServerlessConfig;
}
export interface DescribeEndpointOutput {
  EndpointName: string | undefined;
  EndpointArn: string | undefined;
  EndpointConfigName: string | undefined;
  ProductionVariants?: ProductionVariantSummary[];
  DataCaptureConfig?: DataCaptureConfigSummary;
  EndpointStatus: EndpointStatus | string | undefined;
  FailureReason?: string;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  LastDeploymentConfig?: DeploymentConfig;
  AsyncInferenceConfig?: AsyncInferenceConfig;
  PendingDeploymentSummary?: PendingDeploymentSummary;
  ExplainerConfig?: ExplainerConfig;
  ShadowProductionVariants?: ProductionVariantSummary[];
}
export interface DescribeEndpointConfigInput {
  EndpointConfigName: string | undefined;
}
export interface DescribeEndpointConfigOutput {
  EndpointConfigName: string | undefined;
  EndpointConfigArn: string | undefined;
  ProductionVariants: ProductionVariant[] | undefined;
  DataCaptureConfig?: DataCaptureConfig;
  KmsKeyId?: string;
  CreationTime: Date | undefined;
  AsyncInferenceConfig?: AsyncInferenceConfig;
  ExplainerConfig?: ExplainerConfig;
  ShadowProductionVariants?: ProductionVariant[];
}
export interface DescribeExperimentRequest {
  ExperimentName: string | undefined;
}
export interface ExperimentSource {
  SourceArn: string | undefined;
  SourceType?: string;
}
export interface DescribeExperimentResponse {
  ExperimentName?: string;
  ExperimentArn?: string;
  DisplayName?: string;
  Source?: ExperimentSource;
  Description?: string;
  CreationTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
}
export interface DescribeFeatureGroupRequest {
  FeatureGroupName: string | undefined;
  NextToken?: string;
}
export declare const FeatureGroupStatus: {
  readonly CREATED: "Created";
  readonly CREATE_FAILED: "CreateFailed";
  readonly CREATING: "Creating";
  readonly DELETE_FAILED: "DeleteFailed";
  readonly DELETING: "Deleting";
};
export type FeatureGroupStatus =
  (typeof FeatureGroupStatus)[keyof typeof FeatureGroupStatus];
export declare const LastUpdateStatusValue: {
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly SUCCESSFUL: "Successful";
};
export type LastUpdateStatusValue =
  (typeof LastUpdateStatusValue)[keyof typeof LastUpdateStatusValue];
export interface LastUpdateStatus {
  Status: LastUpdateStatusValue | string | undefined;
  FailureReason?: string;
}
export declare const OfflineStoreStatusValue: {
  readonly ACTIVE: "Active";
  readonly BLOCKED: "Blocked";
  readonly DISABLED: "Disabled";
};
export type OfflineStoreStatusValue =
  (typeof OfflineStoreStatusValue)[keyof typeof OfflineStoreStatusValue];
export interface OfflineStoreStatus {
  Status: OfflineStoreStatusValue | string | undefined;
  BlockedReason?: string;
}
export interface DescribeFeatureGroupResponse {
  FeatureGroupArn: string | undefined;
  FeatureGroupName: string | undefined;
  RecordIdentifierFeatureName: string | undefined;
  EventTimeFeatureName: string | undefined;
  FeatureDefinitions: FeatureDefinition[] | undefined;
  CreationTime: Date | undefined;
  LastModifiedTime?: Date;
  OnlineStoreConfig?: OnlineStoreConfig;
  OfflineStoreConfig?: OfflineStoreConfig;
  RoleArn?: string;
  FeatureGroupStatus?: FeatureGroupStatus | string;
  OfflineStoreStatus?: OfflineStoreStatus;
  LastUpdateStatus?: LastUpdateStatus;
  FailureReason?: string;
  Description?: string;
  NextToken: string | undefined;
  OnlineStoreTotalSizeBytes?: number;
}
export interface DescribeFeatureMetadataRequest {
  FeatureGroupName: string | undefined;
  FeatureName: string | undefined;
}
export interface FeatureParameter {
  Key?: string;
  Value?: string;
}
export interface DescribeFeatureMetadataResponse {
  FeatureGroupArn: string | undefined;
  FeatureGroupName: string | undefined;
  FeatureName: string | undefined;
  FeatureType: FeatureType | string | undefined;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  Description?: string;
  Parameters?: FeatureParameter[];
}
export interface DescribeFlowDefinitionRequest {
  FlowDefinitionName: string | undefined;
}
export declare const FlowDefinitionStatus: {
  readonly ACTIVE: "Active";
  readonly DELETING: "Deleting";
  readonly FAILED: "Failed";
  readonly INITIALIZING: "Initializing";
};
export type FlowDefinitionStatus =
  (typeof FlowDefinitionStatus)[keyof typeof FlowDefinitionStatus];
export interface DescribeFlowDefinitionResponse {
  FlowDefinitionArn: string | undefined;
  FlowDefinitionName: string | undefined;
  FlowDefinitionStatus: FlowDefinitionStatus | string | undefined;
  CreationTime: Date | undefined;
  HumanLoopRequestSource?: HumanLoopRequestSource;
  HumanLoopActivationConfig?: HumanLoopActivationConfig;
  HumanLoopConfig: HumanLoopConfig | undefined;
  OutputConfig: FlowDefinitionOutputConfig | undefined;
  RoleArn: string | undefined;
  FailureReason?: string;
}
export interface DescribeHubRequest {
  HubName: string | undefined;
}
export declare const HubStatus: {
  readonly CREATE_FAILED: "CreateFailed";
  readonly CREATING: "Creating";
  readonly DELETE_FAILED: "DeleteFailed";
  readonly DELETING: "Deleting";
  readonly IN_SERVICE: "InService";
  readonly UPDATE_FAILED: "UpdateFailed";
  readonly UPDATING: "Updating";
};
export type HubStatus = (typeof HubStatus)[keyof typeof HubStatus];
export interface DescribeHubResponse {
  HubName: string | undefined;
  HubArn: string | undefined;
  HubDisplayName?: string;
  HubDescription?: string;
  HubSearchKeywords?: string[];
  S3StorageConfig?: HubS3StorageConfig;
  HubStatus: HubStatus | string | undefined;
  FailureReason?: string;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
}
export interface DescribeHubContentRequest {
  HubName: string | undefined;
  HubContentType: HubContentType | string | undefined;
  HubContentName: string | undefined;
  HubContentVersion?: string;
}
export interface HubContentDependency {
  DependencyOriginPath?: string;
  DependencyCopyPath?: string;
}
export declare const HubContentStatus: {
  readonly AVAILABLE: "Available";
  readonly DELETE_FAILED: "DeleteFailed";
  readonly DELETING: "Deleting";
  readonly IMPORTING: "Importing";
  readonly IMPORT_FAILED: "ImportFailed";
};
export type HubContentStatus =
  (typeof HubContentStatus)[keyof typeof HubContentStatus];
export interface DescribeHubContentResponse {
  HubContentName: string | undefined;
  HubContentArn: string | undefined;
  HubContentVersion: string | undefined;
  HubContentType: HubContentType | string | undefined;
  DocumentSchemaVersion: string | undefined;
  HubName: string | undefined;
  HubArn: string | undefined;
  HubContentDisplayName?: string;
  HubContentDescription?: string;
  HubContentMarkdown?: string;
  HubContentDocument: string | undefined;
  HubContentSearchKeywords?: string[];
  HubContentDependencies?: HubContentDependency[];
  HubContentStatus: HubContentStatus | string | undefined;
  FailureReason?: string;
  CreationTime: Date | undefined;
}
export interface DescribeHumanTaskUiRequest {
  HumanTaskUiName: string | undefined;
}
export declare const HumanTaskUiStatus: {
  readonly ACTIVE: "Active";
  readonly DELETING: "Deleting";
};
export type HumanTaskUiStatus =
  (typeof HumanTaskUiStatus)[keyof typeof HumanTaskUiStatus];
export interface UiTemplateInfo {
  Url?: string;
  ContentSha256?: string;
}
export interface DescribeHumanTaskUiResponse {
  HumanTaskUiArn: string | undefined;
  HumanTaskUiName: string | undefined;
  HumanTaskUiStatus?: HumanTaskUiStatus | string;
  CreationTime: Date | undefined;
  UiTemplate: UiTemplateInfo | undefined;
}
export interface DescribeHyperParameterTuningJobRequest {
  HyperParameterTuningJobName: string | undefined;
}
export interface FinalHyperParameterTuningJobObjectiveMetric {
  Type?: HyperParameterTuningJobObjectiveType | string;
  MetricName: string | undefined;
  Value: number | undefined;
}
export declare const TrainingJobStatus: {
  readonly COMPLETED: "Completed";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
};
export type TrainingJobStatus =
  (typeof TrainingJobStatus)[keyof typeof TrainingJobStatus];
export interface HyperParameterTrainingJobSummary {
  TrainingJobDefinitionName?: string;
  TrainingJobName: string | undefined;
  TrainingJobArn: string | undefined;
  TuningJobName?: string;
  CreationTime: Date | undefined;
  TrainingStartTime?: Date;
  TrainingEndTime?: Date;
  TrainingJobStatus: TrainingJobStatus | string | undefined;
  TunedHyperParameters: Record<string, string> | undefined;
  FailureReason?: string;
  FinalHyperParameterTuningJobObjectiveMetric?: FinalHyperParameterTuningJobObjectiveMetric;
  ObjectiveStatus?: ObjectiveStatus | string;
}
export interface HyperParameterTuningJobConsumedResources {
  RuntimeInSeconds?: number;
}
export declare const HyperParameterTuningJobStatus: {
  readonly COMPLETED: "Completed";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
};
export type HyperParameterTuningJobStatus =
  (typeof HyperParameterTuningJobStatus)[keyof typeof HyperParameterTuningJobStatus];
export interface ObjectiveStatusCounters {
  Succeeded?: number;
  Pending?: number;
  Failed?: number;
}
export interface TrainingJobStatusCounters {
  Completed?: number;
  InProgress?: number;
  RetryableError?: number;
  NonRetryableError?: number;
  Stopped?: number;
}
export interface HyperParameterTuningJobCompletionDetails {
  NumberOfTrainingJobsObjectiveNotImproving?: number;
  ConvergenceDetectedTime?: Date;
}
export interface DescribeHyperParameterTuningJobResponse {
  HyperParameterTuningJobName: string | undefined;
  HyperParameterTuningJobArn: string | undefined;
  HyperParameterTuningJobConfig: HyperParameterTuningJobConfig | undefined;
  TrainingJobDefinition?: HyperParameterTrainingJobDefinition;
  TrainingJobDefinitions?: HyperParameterTrainingJobDefinition[];
  HyperParameterTuningJobStatus:
    | HyperParameterTuningJobStatus
    | string
    | undefined;
  CreationTime: Date | undefined;
  HyperParameterTuningEndTime?: Date;
  LastModifiedTime?: Date;
  TrainingJobStatusCounters: TrainingJobStatusCounters | undefined;
  ObjectiveStatusCounters: ObjectiveStatusCounters | undefined;
  BestTrainingJob?: HyperParameterTrainingJobSummary;
  OverallBestTrainingJob?: HyperParameterTrainingJobSummary;
  WarmStartConfig?: HyperParameterTuningJobWarmStartConfig;
  FailureReason?: string;
  TuningJobCompletionDetails?: HyperParameterTuningJobCompletionDetails;
  ConsumedResources?: HyperParameterTuningJobConsumedResources;
}
export interface DescribeImageRequest {
  ImageName: string | undefined;
}
export declare const ImageStatus: {
  readonly CREATED: "CREATED";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATING: "CREATING";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETING: "DELETING";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATING: "UPDATING";
};
export type ImageStatus = (typeof ImageStatus)[keyof typeof ImageStatus];
export interface DescribeImageResponse {
  CreationTime?: Date;
  Description?: string;
  DisplayName?: string;
  FailureReason?: string;
  ImageArn?: string;
  ImageName?: string;
  ImageStatus?: ImageStatus | string;
  LastModifiedTime?: Date;
  RoleArn?: string;
}
export interface DescribeImageVersionRequest {
  ImageName: string | undefined;
  Version?: number;
  Alias?: string;
}
export declare const ImageVersionStatus: {
  readonly CREATED: "CREATED";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATING: "CREATING";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETING: "DELETING";
};
export type ImageVersionStatus =
  (typeof ImageVersionStatus)[keyof typeof ImageVersionStatus];
export interface DescribeImageVersionResponse {
  BaseImage?: string;
  ContainerImage?: string;
  CreationTime?: Date;
  FailureReason?: string;
  ImageArn?: string;
  ImageVersionArn?: string;
  ImageVersionStatus?: ImageVersionStatus | string;
  LastModifiedTime?: Date;
  Version?: number;
  VendorGuidance?: VendorGuidance | string;
  JobType?: JobType | string;
  MLFramework?: string;
  ProgrammingLang?: string;
  Processor?: Processor | string;
  Horovod?: boolean;
  ReleaseNotes?: string;
}
export interface DescribeInferenceExperimentRequest {
  Name: string | undefined;
}
export interface EndpointMetadata {
  EndpointName: string | undefined;
  EndpointConfigName?: string;
  EndpointStatus?: EndpointStatus | string;
  FailureReason?: string;
}
export declare const ModelVariantStatus: {
  readonly CREATING: "Creating";
  readonly DELETED: "Deleted";
  readonly DELETING: "Deleting";
  readonly IN_SERVICE: "InService";
  readonly UPDATING: "Updating";
};
export type ModelVariantStatus =
  (typeof ModelVariantStatus)[keyof typeof ModelVariantStatus];
export interface ModelVariantConfigSummary {
  ModelName: string | undefined;
  VariantName: string | undefined;
  InfrastructureConfig: ModelInfrastructureConfig | undefined;
  Status: ModelVariantStatus | string | undefined;
}
export declare const InferenceExperimentStatus: {
  readonly CANCELLED: "Cancelled";
  readonly COMPLETED: "Completed";
  readonly CREATED: "Created";
  readonly CREATING: "Creating";
  readonly RUNNING: "Running";
  readonly STARTING: "Starting";
  readonly STOPPING: "Stopping";
  readonly UPDATING: "Updating";
};
export type InferenceExperimentStatus =
  (typeof InferenceExperimentStatus)[keyof typeof InferenceExperimentStatus];
export interface DescribeInferenceExperimentResponse {
  Arn: string | undefined;
  Name: string | undefined;
  Type: InferenceExperimentType | string | undefined;
  Schedule?: InferenceExperimentSchedule;
  Status: InferenceExperimentStatus | string | undefined;
  StatusReason?: string;
  Description?: string;
  CreationTime?: Date;
  CompletionTime?: Date;
  LastModifiedTime?: Date;
  RoleArn?: string;
  EndpointMetadata: EndpointMetadata | undefined;
  ModelVariants: ModelVariantConfigSummary[] | undefined;
  DataStorageConfig?: InferenceExperimentDataStorageConfig;
  ShadowModeConfig?: ShadowModeConfig;
  KmsKey?: string;
}
export interface DescribeInferenceRecommendationsJobRequest {
  JobName: string | undefined;
}
export interface InferenceMetrics {
  MaxInvocations: number | undefined;
  ModelLatency: number | undefined;
}
export interface EndpointPerformance {
  Metrics: InferenceMetrics | undefined;
  EndpointInfo: EndpointInfo | undefined;
}
export interface EndpointOutputConfiguration {
  EndpointName: string | undefined;
  VariantName: string | undefined;
  InstanceType: ProductionVariantInstanceType | string | undefined;
  InitialInstanceCount: number | undefined;
}
export interface RecommendationMetrics {
  CostPerHour: number | undefined;
  CostPerInference: number | undefined;
  MaxInvocations: number | undefined;
  ModelLatency: number | undefined;
  CpuUtilization?: number;
  MemoryUtilization?: number;
}
export interface EnvironmentParameter {
  Key: string | undefined;
  ValueType: string | undefined;
  Value: string | undefined;
}
export interface ModelConfiguration {
  InferenceSpecificationName?: string;
  EnvironmentParameters?: EnvironmentParameter[];
  CompilationJobName?: string;
}
export interface InferenceRecommendation {
  Metrics: RecommendationMetrics | undefined;
  EndpointConfiguration: EndpointOutputConfiguration | undefined;
  ModelConfiguration: ModelConfiguration | undefined;
  RecommendationId?: string;
}
export declare const RecommendationJobStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly PENDING: "PENDING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
};
export type RecommendationJobStatus =
  (typeof RecommendationJobStatus)[keyof typeof RecommendationJobStatus];
export interface DescribeInferenceRecommendationsJobResponse {
  JobName: string | undefined;
  JobDescription?: string;
  JobType: RecommendationJobType | string | undefined;
  JobArn: string | undefined;
  RoleArn: string | undefined;
  Status: RecommendationJobStatus | string | undefined;
  CreationTime: Date | undefined;
  CompletionTime?: Date;
  LastModifiedTime: Date | undefined;
  FailureReason?: string;
  InputConfig: RecommendationJobInputConfig | undefined;
  StoppingConditions?: RecommendationJobStoppingConditions;
  InferenceRecommendations?: InferenceRecommendation[];
  EndpointPerformances?: EndpointPerformance[];
}
export interface DescribeLabelingJobRequest {
  LabelingJobName: string | undefined;
}
export interface LabelCounters {
  TotalLabeled?: number;
  HumanLabeled?: number;
  MachineLabeled?: number;
  FailedNonRetryableError?: number;
  Unlabeled?: number;
}
export interface LabelingJobOutput {
  OutputDatasetS3Uri: string | undefined;
  FinalActiveLearningModelArn?: string;
}
export declare const LabelingJobStatus: {
  readonly COMPLETED: "Completed";
  readonly FAILED: "Failed";
  readonly INITIALIZING: "Initializing";
  readonly IN_PROGRESS: "InProgress";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
};
export type LabelingJobStatus =
  (typeof LabelingJobStatus)[keyof typeof LabelingJobStatus];
export interface DescribeLabelingJobResponse {
  LabelingJobStatus: LabelingJobStatus | string | undefined;
  LabelCounters: LabelCounters | undefined;
  FailureReason?: string;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  JobReferenceCode: string | undefined;
  LabelingJobName: string | undefined;
  LabelingJobArn: string | undefined;
  LabelAttributeName?: string;
  InputConfig: LabelingJobInputConfig | undefined;
  OutputConfig: LabelingJobOutputConfig | undefined;
  RoleArn: string | undefined;
  LabelCategoryConfigS3Uri?: string;
  StoppingConditions?: LabelingJobStoppingConditions;
  LabelingJobAlgorithmsConfig?: LabelingJobAlgorithmsConfig;
  HumanTaskConfig: HumanTaskConfig | undefined;
  Tags?: Tag[];
  LabelingJobOutput?: LabelingJobOutput;
}
export interface DescribeLineageGroupRequest {
  LineageGroupName: string | undefined;
}
export interface DescribeLineageGroupResponse {
  LineageGroupName?: string;
  LineageGroupArn?: string;
  DisplayName?: string;
  Description?: string;
  CreationTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
}
export interface DescribeModelInput {
  ModelName: string | undefined;
}
export interface DescribeModelOutput {
  ModelName: string | undefined;
  PrimaryContainer?: ContainerDefinition;
  Containers?: ContainerDefinition[];
  InferenceExecutionConfig?: InferenceExecutionConfig;
  ExecutionRoleArn: string | undefined;
  VpcConfig?: VpcConfig;
  CreationTime: Date | undefined;
  ModelArn: string | undefined;
  EnableNetworkIsolation?: boolean;
}
export interface DescribeModelBiasJobDefinitionRequest {
  JobDefinitionName: string | undefined;
}
export interface DescribeModelBiasJobDefinitionResponse {
  JobDefinitionArn: string | undefined;
  JobDefinitionName: string | undefined;
  CreationTime: Date | undefined;
  ModelBiasBaselineConfig?: ModelBiasBaselineConfig;
  ModelBiasAppSpecification: ModelBiasAppSpecification | undefined;
  ModelBiasJobInput: ModelBiasJobInput | undefined;
  ModelBiasJobOutputConfig: MonitoringOutputConfig | undefined;
  JobResources: MonitoringResources | undefined;
  NetworkConfig?: MonitoringNetworkConfig;
  RoleArn: string | undefined;
  StoppingCondition?: MonitoringStoppingCondition;
}
export interface DescribeModelCardRequest {
  ModelCardName: string | undefined;
  ModelCardVersion?: number;
}
export declare const ModelCardProcessingStatus: {
  readonly CONTENT_DELETED: "ContentDeleted";
  readonly DELETE_COMPLETED: "DeleteCompleted";
  readonly DELETE_FAILED: "DeleteFailed";
  readonly DELETE_INPROGRESS: "DeleteInProgress";
  readonly DELETE_PENDING: "DeletePending";
  readonly EXPORTJOBS_DELETED: "ExportJobsDeleted";
};
export type ModelCardProcessingStatus =
  (typeof ModelCardProcessingStatus)[keyof typeof ModelCardProcessingStatus];
export interface DescribeModelCardResponse {
  ModelCardArn: string | undefined;
  ModelCardName: string | undefined;
  ModelCardVersion: number | undefined;
  Content: string | undefined;
  ModelCardStatus: ModelCardStatus | string | undefined;
  SecurityConfig?: ModelCardSecurityConfig;
  CreationTime: Date | undefined;
  CreatedBy: UserContext | undefined;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
  ModelCardProcessingStatus?: ModelCardProcessingStatus | string;
}
export interface DescribeModelCardExportJobRequest {
  ModelCardExportJobArn: string | undefined;
}
export interface ModelCardExportArtifacts {
  S3ExportArtifacts: string | undefined;
}
export declare const ModelCardExportJobStatus: {
  readonly COMPLETED: "Completed";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
};
export type ModelCardExportJobStatus =
  (typeof ModelCardExportJobStatus)[keyof typeof ModelCardExportJobStatus];
export interface DescribeModelCardExportJobResponse {
  ModelCardExportJobName: string | undefined;
  ModelCardExportJobArn: string | undefined;
  Status: ModelCardExportJobStatus | string | undefined;
  ModelCardName: string | undefined;
  ModelCardVersion: number | undefined;
  OutputConfig: ModelCardExportOutputConfig | undefined;
  CreatedAt: Date | undefined;
  LastModifiedAt: Date | undefined;
  FailureReason?: string;
  ExportArtifacts?: ModelCardExportArtifacts;
}
export interface DescribeModelExplainabilityJobDefinitionRequest {
  JobDefinitionName: string | undefined;
}
export interface DescribeModelExplainabilityJobDefinitionResponse {
  JobDefinitionArn: string | undefined;
  JobDefinitionName: string | undefined;
  CreationTime: Date | undefined;
  ModelExplainabilityBaselineConfig?: ModelExplainabilityBaselineConfig;
  ModelExplainabilityAppSpecification:
    | ModelExplainabilityAppSpecification
    | undefined;
  ModelExplainabilityJobInput: ModelExplainabilityJobInput | undefined;
  ModelExplainabilityJobOutputConfig: MonitoringOutputConfig | undefined;
  JobResources: MonitoringResources | undefined;
  NetworkConfig?: MonitoringNetworkConfig;
  RoleArn: string | undefined;
  StoppingCondition?: MonitoringStoppingCondition;
}
export interface DescribeModelPackageInput {
  ModelPackageName: string | undefined;
}
export declare const DetailedModelPackageStatus: {
  readonly COMPLETED: "Completed";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly NOT_STARTED: "NotStarted";
};
export type DetailedModelPackageStatus =
  (typeof DetailedModelPackageStatus)[keyof typeof DetailedModelPackageStatus];
export interface ModelPackageStatusItem {
  Name: string | undefined;
  Status: DetailedModelPackageStatus | string | undefined;
  FailureReason?: string;
}
export interface ModelPackageStatusDetails {
  ValidationStatuses: ModelPackageStatusItem[] | undefined;
  ImageScanStatuses?: ModelPackageStatusItem[];
}
export interface DescribeModelPackageOutput {
  ModelPackageName: string | undefined;
  ModelPackageGroupName?: string;
  ModelPackageVersion?: number;
  ModelPackageArn: string | undefined;
  ModelPackageDescription?: string;
  CreationTime: Date | undefined;
  InferenceSpecification?: InferenceSpecification;
  SourceAlgorithmSpecification?: SourceAlgorithmSpecification;
  ValidationSpecification?: ModelPackageValidationSpecification;
  ModelPackageStatus: ModelPackageStatus | string | undefined;
  ModelPackageStatusDetails: ModelPackageStatusDetails | undefined;
  CertifyForMarketplace?: boolean;
  ModelApprovalStatus?: ModelApprovalStatus | string;
  CreatedBy?: UserContext;
  MetadataProperties?: MetadataProperties;
  ModelMetrics?: ModelMetrics;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
  ApprovalDescription?: string;
  CustomerMetadataProperties?: Record<string, string>;
  DriftCheckBaselines?: DriftCheckBaselines;
  Domain?: string;
  Task?: string;
  SamplePayloadUrl?: string;
  AdditionalInferenceSpecifications?: AdditionalInferenceSpecificationDefinition[];
}
export interface DescribeModelPackageGroupInput {
  ModelPackageGroupName: string | undefined;
}
export declare const ModelPackageGroupStatus: {
  readonly COMPLETED: "Completed";
  readonly DELETE_FAILED: "DeleteFailed";
  readonly DELETING: "Deleting";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly PENDING: "Pending";
};
export type ModelPackageGroupStatus =
  (typeof ModelPackageGroupStatus)[keyof typeof ModelPackageGroupStatus];
export interface DescribeModelPackageGroupOutput {
  ModelPackageGroupName: string | undefined;
  ModelPackageGroupArn: string | undefined;
  ModelPackageGroupDescription?: string;
  CreationTime: Date | undefined;
  CreatedBy: UserContext | undefined;
  ModelPackageGroupStatus: ModelPackageGroupStatus | string | undefined;
}
export interface DescribeModelQualityJobDefinitionRequest {
  JobDefinitionName: string | undefined;
}
export interface DescribeModelQualityJobDefinitionResponse {
  JobDefinitionArn: string | undefined;
  JobDefinitionName: string | undefined;
  CreationTime: Date | undefined;
  ModelQualityBaselineConfig?: ModelQualityBaselineConfig;
  ModelQualityAppSpecification: ModelQualityAppSpecification | undefined;
  ModelQualityJobInput: ModelQualityJobInput | undefined;
  ModelQualityJobOutputConfig: MonitoringOutputConfig | undefined;
  JobResources: MonitoringResources | undefined;
  NetworkConfig?: MonitoringNetworkConfig;
  RoleArn: string | undefined;
  StoppingCondition?: MonitoringStoppingCondition;
}
export interface DescribeMonitoringScheduleRequest {
  MonitoringScheduleName: string | undefined;
}
export declare const ExecutionStatus: {
  readonly COMPLETED: "Completed";
  readonly COMPLETED_WITH_VIOLATIONS: "CompletedWithViolations";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly PENDING: "Pending";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
};
export type ExecutionStatus =
  (typeof ExecutionStatus)[keyof typeof ExecutionStatus];
export interface MonitoringExecutionSummary {
  MonitoringScheduleName: string | undefined;
  ScheduledTime: Date | undefined;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  MonitoringExecutionStatus: ExecutionStatus | string | undefined;
  ProcessingJobArn?: string;
  EndpointName?: string;
  FailureReason?: string;
  MonitoringJobDefinitionName?: string;
  MonitoringType?: MonitoringType | string;
}
export declare const ScheduleStatus: {
  readonly FAILED: "Failed";
  readonly PENDING: "Pending";
  readonly SCHEDULED: "Scheduled";
  readonly STOPPED: "Stopped";
};
export type ScheduleStatus =
  (typeof ScheduleStatus)[keyof typeof ScheduleStatus];
export interface DescribeMonitoringScheduleResponse {
  MonitoringScheduleArn: string | undefined;
  MonitoringScheduleName: string | undefined;
  MonitoringScheduleStatus: ScheduleStatus | string | undefined;
  MonitoringType?: MonitoringType | string;
  FailureReason?: string;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  MonitoringScheduleConfig: MonitoringScheduleConfig | undefined;
  EndpointName?: string;
  LastMonitoringExecutionSummary?: MonitoringExecutionSummary;
}
export interface DescribeNotebookInstanceInput {
  NotebookInstanceName: string | undefined;
}
export declare const NotebookInstanceStatus: {
  readonly Deleting: "Deleting";
  readonly Failed: "Failed";
  readonly InService: "InService";
  readonly Pending: "Pending";
  readonly Stopped: "Stopped";
  readonly Stopping: "Stopping";
  readonly Updating: "Updating";
};
export type NotebookInstanceStatus =
  (typeof NotebookInstanceStatus)[keyof typeof NotebookInstanceStatus];
export interface DescribeNotebookInstanceOutput {
  NotebookInstanceArn?: string;
  NotebookInstanceName?: string;
  NotebookInstanceStatus?: NotebookInstanceStatus | string;
  FailureReason?: string;
  Url?: string;
  InstanceType?: _InstanceType | string;
  SubnetId?: string;
  SecurityGroups?: string[];
  RoleArn?: string;
  KmsKeyId?: string;
  NetworkInterfaceId?: string;
  LastModifiedTime?: Date;
  CreationTime?: Date;
  NotebookInstanceLifecycleConfigName?: string;
  DirectInternetAccess?: DirectInternetAccess | string;
  VolumeSizeInGB?: number;
  AcceleratorTypes?: (NotebookInstanceAcceleratorType | string)[];
  DefaultCodeRepository?: string;
  AdditionalCodeRepositories?: string[];
  RootAccess?: RootAccess | string;
  PlatformIdentifier?: string;
  InstanceMetadataServiceConfiguration?: InstanceMetadataServiceConfiguration;
}
export interface DescribeNotebookInstanceLifecycleConfigInput {
  NotebookInstanceLifecycleConfigName: string | undefined;
}
export interface DescribeNotebookInstanceLifecycleConfigOutput {
  NotebookInstanceLifecycleConfigArn?: string;
  NotebookInstanceLifecycleConfigName?: string;
  OnCreate?: NotebookInstanceLifecycleHook[];
  OnStart?: NotebookInstanceLifecycleHook[];
  LastModifiedTime?: Date;
  CreationTime?: Date;
}
export interface DescribePipelineRequest {
  PipelineName: string | undefined;
}
export declare const PipelineStatus: {
  readonly ACTIVE: "Active";
};
export type PipelineStatus =
  (typeof PipelineStatus)[keyof typeof PipelineStatus];
export interface DescribePipelineResponse {
  PipelineArn?: string;
  PipelineName?: string;
  PipelineDisplayName?: string;
  PipelineDefinition?: string;
  PipelineDescription?: string;
  RoleArn?: string;
  PipelineStatus?: PipelineStatus | string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  LastRunTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedBy?: UserContext;
  ParallelismConfiguration?: ParallelismConfiguration;
}
export interface DescribePipelineDefinitionForExecutionRequest {
  PipelineExecutionArn: string | undefined;
}
export interface DescribePipelineDefinitionForExecutionResponse {
  PipelineDefinition?: string;
  CreationTime?: Date;
}
export interface DescribePipelineExecutionRequest {
  PipelineExecutionArn: string | undefined;
}
export declare const PipelineExecutionStatus: {
  readonly EXECUTING: "Executing";
  readonly FAILED: "Failed";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
  readonly SUCCEEDED: "Succeeded";
};
export type PipelineExecutionStatus =
  (typeof PipelineExecutionStatus)[keyof typeof PipelineExecutionStatus];
export interface PipelineExperimentConfig {
  ExperimentName?: string;
  TrialName?: string;
}
export interface DescribePipelineExecutionResponse {
  PipelineArn?: string;
  PipelineExecutionArn?: string;
  PipelineExecutionDisplayName?: string;
  PipelineExecutionStatus?: PipelineExecutionStatus | string;
  PipelineExecutionDescription?: string;
  PipelineExperimentConfig?: PipelineExperimentConfig;
  FailureReason?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedBy?: UserContext;
  ParallelismConfiguration?: ParallelismConfiguration;
}
export interface DescribeProcessingJobRequest {
  ProcessingJobName: string | undefined;
}
export declare const ProcessingJobStatus: {
  readonly COMPLETED: "Completed";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
};
export type ProcessingJobStatus =
  (typeof ProcessingJobStatus)[keyof typeof ProcessingJobStatus];
export interface DescribeProcessingJobResponse {
  ProcessingInputs?: ProcessingInput[];
  ProcessingOutputConfig?: ProcessingOutputConfig;
  ProcessingJobName: string | undefined;
  ProcessingResources: ProcessingResources | undefined;
  StoppingCondition?: ProcessingStoppingCondition;
  AppSpecification: AppSpecification | undefined;
  Environment?: Record<string, string>;
  NetworkConfig?: NetworkConfig;
  RoleArn?: string;
  ExperimentConfig?: ExperimentConfig;
  ProcessingJobArn: string | undefined;
  ProcessingJobStatus: ProcessingJobStatus | string | undefined;
  ExitMessage?: string;
  FailureReason?: string;
  ProcessingEndTime?: Date;
  ProcessingStartTime?: Date;
  LastModifiedTime?: Date;
  CreationTime: Date | undefined;
  MonitoringScheduleArn?: string;
  AutoMLJobArn?: string;
  TrainingJobArn?: string;
}
export interface DescribeProjectInput {
  ProjectName: string | undefined;
}
export declare const ProjectStatus: {
  readonly CREATE_COMPLETED: "CreateCompleted";
  readonly CREATE_FAILED: "CreateFailed";
  readonly CREATE_IN_PROGRESS: "CreateInProgress";
  readonly DELETE_COMPLETED: "DeleteCompleted";
  readonly DELETE_FAILED: "DeleteFailed";
  readonly DELETE_IN_PROGRESS: "DeleteInProgress";
  readonly PENDING: "Pending";
  readonly UPDATE_COMPLETED: "UpdateCompleted";
  readonly UPDATE_FAILED: "UpdateFailed";
  readonly UPDATE_IN_PROGRESS: "UpdateInProgress";
};
export type ProjectStatus = (typeof ProjectStatus)[keyof typeof ProjectStatus];
export interface ServiceCatalogProvisionedProductDetails {
  ProvisionedProductId?: string;
  ProvisionedProductStatusMessage?: string;
}
export interface DescribeProjectOutput {
  ProjectArn: string | undefined;
  ProjectName: string | undefined;
  ProjectId: string | undefined;
  ProjectDescription?: string;
  ServiceCatalogProvisioningDetails:
    | ServiceCatalogProvisioningDetails
    | undefined;
  ServiceCatalogProvisionedProductDetails?: ServiceCatalogProvisionedProductDetails;
  ProjectStatus: ProjectStatus | string | undefined;
  CreatedBy?: UserContext;
  CreationTime: Date | undefined;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
}
export interface DescribeSpaceRequest {
  DomainId: string | undefined;
  SpaceName: string | undefined;
}
export declare const SpaceStatus: {
  readonly Delete_Failed: "Delete_Failed";
  readonly Deleting: "Deleting";
  readonly Failed: "Failed";
  readonly InService: "InService";
  readonly Pending: "Pending";
  readonly Update_Failed: "Update_Failed";
  readonly Updating: "Updating";
};
export type SpaceStatus = (typeof SpaceStatus)[keyof typeof SpaceStatus];
export interface DescribeSpaceResponse {
  DomainId?: string;
  SpaceArn?: string;
  SpaceName?: string;
  HomeEfsFileSystemUid?: string;
  Status?: SpaceStatus | string;
  LastModifiedTime?: Date;
  CreationTime?: Date;
  FailureReason?: string;
  SpaceSettings?: SpaceSettings;
}
export interface DescribeStudioLifecycleConfigRequest {
  StudioLifecycleConfigName: string | undefined;
}
export interface DescribeStudioLifecycleConfigResponse {
  StudioLifecycleConfigArn?: string;
  StudioLifecycleConfigName?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  StudioLifecycleConfigContent?: string;
  StudioLifecycleConfigAppType?: StudioLifecycleConfigAppType | string;
}
export interface DescribeSubscribedWorkteamRequest {
  WorkteamArn: string | undefined;
}
export interface SubscribedWorkteam {
  WorkteamArn: string | undefined;
  MarketplaceTitle?: string;
  SellerName?: string;
  MarketplaceDescription?: string;
  ListingId?: string;
}
export interface DescribeSubscribedWorkteamResponse {
  SubscribedWorkteam: SubscribedWorkteam | undefined;
}
export interface DescribeTrainingJobRequest {
  TrainingJobName: string | undefined;
}
export interface MetricData {
  MetricName?: string;
  Value?: number;
  Timestamp?: Date;
}
export interface ProfilerRuleEvaluationStatus {
  RuleConfigurationName?: string;
  RuleEvaluationJobArn?: string;
  RuleEvaluationStatus?: RuleEvaluationStatus | string;
  StatusDetails?: string;
  LastModifiedTime?: Date;
}
export declare const ProfilingStatus: {
  readonly DISABLED: "Disabled";
  readonly ENABLED: "Enabled";
};
export type ProfilingStatus =
  (typeof ProfilingStatus)[keyof typeof ProfilingStatus];
export declare const SecondaryStatus: {
  readonly COMPLETED: "Completed";
  readonly DOWNLOADING: "Downloading";
  readonly DOWNLOADING_TRAINING_IMAGE: "DownloadingTrainingImage";
  readonly FAILED: "Failed";
  readonly INTERRUPTED: "Interrupted";
  readonly LAUNCHING_ML_INSTANCES: "LaunchingMLInstances";
  readonly MAX_RUNTIME_EXCEEDED: "MaxRuntimeExceeded";
  readonly MAX_WAIT_TIME_EXCEEDED: "MaxWaitTimeExceeded";
  readonly PREPARING_TRAINING_STACK: "PreparingTrainingStack";
  readonly RESTARTING: "Restarting";
  readonly STARTING: "Starting";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
  readonly TRAINING: "Training";
  readonly UPDATING: "Updating";
  readonly UPLOADING: "Uploading";
};
export type SecondaryStatus =
  (typeof SecondaryStatus)[keyof typeof SecondaryStatus];
export interface SecondaryStatusTransition {
  Status: SecondaryStatus | string | undefined;
  StartTime: Date | undefined;
  EndTime?: Date;
  StatusMessage?: string;
}
export declare const WarmPoolResourceStatus: {
  readonly AVAILABLE: "Available";
  readonly INUSE: "InUse";
  readonly REUSED: "Reused";
  readonly TERMINATED: "Terminated";
};
export type WarmPoolResourceStatus =
  (typeof WarmPoolResourceStatus)[keyof typeof WarmPoolResourceStatus];
export interface WarmPoolStatus {
  Status: WarmPoolResourceStatus | string | undefined;
  ResourceRetainedBillableTimeInSeconds?: number;
  ReusedByJob?: string;
}
export interface DescribeTrainingJobResponse {
  TrainingJobName: string | undefined;
  TrainingJobArn: string | undefined;
  TuningJobArn?: string;
  LabelingJobArn?: string;
  AutoMLJobArn?: string;
  ModelArtifacts: ModelArtifacts | undefined;
  TrainingJobStatus: TrainingJobStatus | string | undefined;
  SecondaryStatus: SecondaryStatus | string | undefined;
  FailureReason?: string;
  HyperParameters?: Record<string, string>;
  AlgorithmSpecification: AlgorithmSpecification | undefined;
  RoleArn?: string;
  InputDataConfig?: Channel[];
  OutputDataConfig?: OutputDataConfig;
  ResourceConfig: ResourceConfig | undefined;
  VpcConfig?: VpcConfig;
  StoppingCondition: StoppingCondition | undefined;
  CreationTime: Date | undefined;
  TrainingStartTime?: Date;
  TrainingEndTime?: Date;
  LastModifiedTime?: Date;
  SecondaryStatusTransitions?: SecondaryStatusTransition[];
  FinalMetricDataList?: MetricData[];
  EnableNetworkIsolation?: boolean;
  EnableInterContainerTrafficEncryption?: boolean;
  EnableManagedSpotTraining?: boolean;
  CheckpointConfig?: CheckpointConfig;
  TrainingTimeInSeconds?: number;
  BillableTimeInSeconds?: number;
  DebugHookConfig?: DebugHookConfig;
  ExperimentConfig?: ExperimentConfig;
  DebugRuleConfigurations?: DebugRuleConfiguration[];
  TensorBoardOutputConfig?: TensorBoardOutputConfig;
  DebugRuleEvaluationStatuses?: DebugRuleEvaluationStatus[];
  ProfilerConfig?: ProfilerConfig;
  ProfilerRuleConfigurations?: ProfilerRuleConfiguration[];
  ProfilerRuleEvaluationStatuses?: ProfilerRuleEvaluationStatus[];
  ProfilingStatus?: ProfilingStatus | string;
  RetryStrategy?: RetryStrategy;
  Environment?: Record<string, string>;
  WarmPoolStatus?: WarmPoolStatus;
}
export interface DescribeTransformJobRequest {
  TransformJobName: string | undefined;
}
export declare const TransformJobStatus: {
  readonly COMPLETED: "Completed";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
};
export type TransformJobStatus =
  (typeof TransformJobStatus)[keyof typeof TransformJobStatus];
export interface DescribeTransformJobResponse {
  TransformJobName: string | undefined;
  TransformJobArn: string | undefined;
  TransformJobStatus: TransformJobStatus | string | undefined;
  FailureReason?: string;
  ModelName: string | undefined;
  MaxConcurrentTransforms?: number;
  ModelClientConfig?: ModelClientConfig;
  MaxPayloadInMB?: number;
  BatchStrategy?: BatchStrategy | string;
  Environment?: Record<string, string>;
  TransformInput: TransformInput | undefined;
  TransformOutput?: TransformOutput;
  DataCaptureConfig?: BatchDataCaptureConfig;
  TransformResources: TransformResources | undefined;
  CreationTime: Date | undefined;
  TransformStartTime?: Date;
  TransformEndTime?: Date;
  LabelingJobArn?: string;
  AutoMLJobArn?: string;
  DataProcessing?: DataProcessing;
  ExperimentConfig?: ExperimentConfig;
}
export interface DescribeTrialRequest {
  TrialName: string | undefined;
}
export interface TrialSource {
  SourceArn: string | undefined;
  SourceType?: string;
}
export interface DescribeTrialResponse {
  TrialName?: string;
  TrialArn?: string;
  DisplayName?: string;
  ExperimentName?: string;
  Source?: TrialSource;
  CreationTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
  MetadataProperties?: MetadataProperties;
}
export interface DescribeTrialComponentRequest {
  TrialComponentName: string | undefined;
}
export interface TrialComponentMetricSummary {
  MetricName?: string;
  SourceArn?: string;
  TimeStamp?: Date;
  Max?: number;
  Min?: number;
  Last?: number;
  Count?: number;
  Avg?: number;
  StdDev?: number;
}
export interface TrialComponentSource {
  SourceArn: string | undefined;
  SourceType?: string;
}
export interface DescribeTrialComponentResponse {
  TrialComponentName?: string;
  TrialComponentArn?: string;
  DisplayName?: string;
  Source?: TrialComponentSource;
  Status?: TrialComponentStatus;
  StartTime?: Date;
  EndTime?: Date;
  CreationTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
  Parameters?: Record<string, TrialComponentParameterValue>;
  InputArtifacts?: Record<string, TrialComponentArtifact>;
  OutputArtifacts?: Record<string, TrialComponentArtifact>;
  MetadataProperties?: MetadataProperties;
  Metrics?: TrialComponentMetricSummary[];
  LineageGroupArn?: string;
  Sources?: TrialComponentSource[];
}
export interface DescribeUserProfileRequest {
  DomainId: string | undefined;
  UserProfileName: string | undefined;
}
export declare const UserProfileStatus: {
  readonly Delete_Failed: "Delete_Failed";
  readonly Deleting: "Deleting";
  readonly Failed: "Failed";
  readonly InService: "InService";
  readonly Pending: "Pending";
  readonly Update_Failed: "Update_Failed";
  readonly Updating: "Updating";
};
export type UserProfileStatus =
  (typeof UserProfileStatus)[keyof typeof UserProfileStatus];
export interface DescribeUserProfileResponse {
  DomainId?: string;
  UserProfileArn?: string;
  UserProfileName?: string;
  HomeEfsFileSystemUid?: string;
  Status?: UserProfileStatus | string;
  LastModifiedTime?: Date;
  CreationTime?: Date;
  FailureReason?: string;
  SingleSignOnUserIdentifier?: string;
  SingleSignOnUserValue?: string;
  UserSettings?: UserSettings;
}
export interface DescribeWorkforceRequest {
  WorkforceName: string | undefined;
}
export interface OidcConfigForResponse {
  ClientId?: string;
  Issuer?: string;
  AuthorizationEndpoint?: string;
  TokenEndpoint?: string;
  UserInfoEndpoint?: string;
  LogoutEndpoint?: string;
  JwksUri?: string;
}
export declare const WorkforceStatus: {
  readonly ACTIVE: "Active";
  readonly DELETING: "Deleting";
  readonly FAILED: "Failed";
  readonly INITIALIZING: "Initializing";
  readonly UPDATING: "Updating";
};
export type WorkforceStatus =
  (typeof WorkforceStatus)[keyof typeof WorkforceStatus];
export interface WorkforceVpcConfigResponse {
  VpcId: string | undefined;
  SecurityGroupIds: string[] | undefined;
  Subnets: string[] | undefined;
  VpcEndpointId?: string;
}
export interface Workforce {
  WorkforceName: string | undefined;
  WorkforceArn: string | undefined;
  LastUpdatedDate?: Date;
  SourceIpConfig?: SourceIpConfig;
  SubDomain?: string;
  CognitoConfig?: CognitoConfig;
  OidcConfig?: OidcConfigForResponse;
  CreateDate?: Date;
  WorkforceVpcConfig?: WorkforceVpcConfigResponse;
  Status?: WorkforceStatus | string;
  FailureReason?: string;
}
export interface DescribeWorkforceResponse {
  Workforce: Workforce | undefined;
}
export interface DescribeWorkteamRequest {
  WorkteamName: string | undefined;
}
export interface Workteam {
  WorkteamName: string | undefined;
  MemberDefinitions: MemberDefinition[] | undefined;
  WorkteamArn: string | undefined;
  WorkforceArn?: string;
  ProductListingIds?: string[];
  Description: string | undefined;
  SubDomain?: string;
  CreateDate?: Date;
  LastUpdatedDate?: Date;
  NotificationConfiguration?: NotificationConfiguration;
}
export interface DescribeWorkteamResponse {
  Workteam: Workteam | undefined;
}
export interface DesiredWeightAndCapacity {
  VariantName: string | undefined;
  DesiredWeight?: number;
  DesiredInstanceCount?: number;
}
export interface Device {
  DeviceName: string | undefined;
  Description?: string;
  IotThingName?: string;
}
export declare const DeviceDeploymentStatus: {
  readonly Deployed: "DEPLOYED";
  readonly Failed: "FAILED";
  readonly InProgress: "INPROGRESS";
  readonly ReadyToDeploy: "READYTODEPLOY";
  readonly Stopped: "STOPPED";
  readonly Stopping: "STOPPING";
};
export type DeviceDeploymentStatus =
  (typeof DeviceDeploymentStatus)[keyof typeof DeviceDeploymentStatus];
export interface DeviceDeploymentSummary {
  EdgeDeploymentPlanArn: string | undefined;
  EdgeDeploymentPlanName: string | undefined;
  StageName: string | undefined;
  DeployedStageName?: string;
  DeviceFleetName?: string;
  DeviceName: string | undefined;
  DeviceArn: string | undefined;
  DeviceDeploymentStatus?: DeviceDeploymentStatus | string;
  DeviceDeploymentStatusMessage?: string;
  Description?: string;
  DeploymentStartTime?: Date;
}
export interface DeviceFleetSummary {
  DeviceFleetArn: string | undefined;
  DeviceFleetName: string | undefined;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface DeviceStats {
  ConnectedDeviceCount: number | undefined;
  RegisteredDeviceCount: number | undefined;
}
export interface EdgeModelSummary {
  ModelName: string | undefined;
  ModelVersion: string | undefined;
}
export interface DeviceSummary {
  DeviceName: string | undefined;
  DeviceArn: string | undefined;
  Description?: string;
  DeviceFleetName?: string;
  IotThingName?: string;
  RegistrationTime?: Date;
  LatestHeartbeat?: Date;
  Models?: EdgeModelSummary[];
  AgentVersion?: string;
}
export declare const Direction: {
  readonly ASCENDANTS: "Ascendants";
  readonly BOTH: "Both";
  readonly DESCENDANTS: "Descendants";
};
export type Direction = (typeof Direction)[keyof typeof Direction];
export interface DisableSagemakerServicecatalogPortfolioInput {}
export interface DisableSagemakerServicecatalogPortfolioOutput {}
export interface DisassociateTrialComponentRequest {
  TrialComponentName: string | undefined;
  TrialName: string | undefined;
}
export interface DisassociateTrialComponentResponse {
  TrialComponentArn?: string;
  TrialArn?: string;
}
export interface DomainDetails {
  DomainArn?: string;
  DomainId?: string;
  DomainName?: string;
  Status?: DomainStatus | string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  Url?: string;
}
export interface RStudioServerProDomainSettingsForUpdate {
  DomainExecutionRoleArn: string | undefined;
  DefaultResourceSpec?: ResourceSpec;
  RStudioConnectUrl?: string;
  RStudioPackageManagerUrl?: string;
}
export interface DomainSettingsForUpdate {
  RStudioServerProDomainSettingsForUpdate?: RStudioServerProDomainSettingsForUpdate;
  ExecutionRoleIdentityConfig?: ExecutionRoleIdentityConfig | string;
  SecurityGroupIds?: string[];
}
export interface Edge {
  SourceArn?: string;
  DestinationArn?: string;
  AssociationType?: AssociationEdgeType | string;
}
export interface EdgeDeploymentPlanSummary {
  EdgeDeploymentPlanArn: string | undefined;
  EdgeDeploymentPlanName: string | undefined;
  DeviceFleetName: string | undefined;
  EdgeDeploymentSuccess: number | undefined;
  EdgeDeploymentPending: number | undefined;
  EdgeDeploymentFailed: number | undefined;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface EdgeModelStat {
  ModelName: string | undefined;
  ModelVersion: string | undefined;
  OfflineDeviceCount: number | undefined;
  ConnectedDeviceCount: number | undefined;
  ActiveDeviceCount: number | undefined;
  SamplingDeviceCount: number | undefined;
}
export interface EdgePackagingJobSummary {
  EdgePackagingJobArn: string | undefined;
  EdgePackagingJobName: string | undefined;
  EdgePackagingJobStatus: EdgePackagingJobStatus | string | undefined;
  CompilationJobName?: string;
  ModelName?: string;
  ModelVersion?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface EMRStepMetadata {
  ClusterId?: string;
  StepId?: string;
  StepName?: string;
  LogFilePath?: string;
}
export interface EnableSagemakerServicecatalogPortfolioInput {}
export interface EnableSagemakerServicecatalogPortfolioOutput {}
export interface MonitoringSchedule {
  MonitoringScheduleArn?: string;
  MonitoringScheduleName?: string;
  MonitoringScheduleStatus?: ScheduleStatus | string;
  MonitoringType?: MonitoringType | string;
  FailureReason?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  MonitoringScheduleConfig?: MonitoringScheduleConfig;
  EndpointName?: string;
  LastMonitoringExecutionSummary?: MonitoringExecutionSummary;
  Tags?: Tag[];
}
export interface Endpoint {
  EndpointName: string | undefined;
  EndpointArn: string | undefined;
  EndpointConfigName: string | undefined;
  ProductionVariants?: ProductionVariantSummary[];
  DataCaptureConfig?: DataCaptureConfigSummary;
  EndpointStatus: EndpointStatus | string | undefined;
  FailureReason?: string;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  MonitoringSchedules?: MonitoringSchedule[];
  Tags?: Tag[];
  ShadowProductionVariants?: ProductionVariantSummary[];
}
export declare const EndpointConfigSortKey: {
  readonly CreationTime: "CreationTime";
  readonly Name: "Name";
};
export type EndpointConfigSortKey =
  (typeof EndpointConfigSortKey)[keyof typeof EndpointConfigSortKey];
export interface EndpointConfigSummary {
  EndpointConfigName: string | undefined;
  EndpointConfigArn: string | undefined;
  CreationTime: Date | undefined;
}
export declare const EndpointSortKey: {
  readonly CreationTime: "CreationTime";
  readonly Name: "Name";
  readonly Status: "Status";
};
export type EndpointSortKey =
  (typeof EndpointSortKey)[keyof typeof EndpointSortKey];
export interface EndpointSummary {
  EndpointName: string | undefined;
  EndpointArn: string | undefined;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  EndpointStatus: EndpointStatus | string | undefined;
}
export interface Experiment {
  ExperimentName?: string;
  ExperimentArn?: string;
  DisplayName?: string;
  Source?: ExperimentSource;
  Description?: string;
  CreationTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
  Tags?: Tag[];
}
export interface ExperimentSummary {
  ExperimentArn?: string;
  ExperimentName?: string;
  DisplayName?: string;
  ExperimentSource?: ExperimentSource;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface FailStepMetadata {
  ErrorMessage?: string;
}
export interface FeatureGroup {
  FeatureGroupArn?: string;
  FeatureGroupName?: string;
  RecordIdentifierFeatureName?: string;
  EventTimeFeatureName?: string;
  FeatureDefinitions?: FeatureDefinition[];
  CreationTime?: Date;
  LastModifiedTime?: Date;
  OnlineStoreConfig?: OnlineStoreConfig;
  OfflineStoreConfig?: OfflineStoreConfig;
  RoleArn?: string;
  FeatureGroupStatus?: FeatureGroupStatus | string;
  OfflineStoreStatus?: OfflineStoreStatus;
  LastUpdateStatus?: LastUpdateStatus;
  FailureReason?: string;
  Description?: string;
  Tags?: Tag[];
}
export declare const FeatureGroupSortBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly FEATURE_GROUP_STATUS: "FeatureGroupStatus";
  readonly NAME: "Name";
  readonly OFFLINE_STORE_STATUS: "OfflineStoreStatus";
};
export type FeatureGroupSortBy =
  (typeof FeatureGroupSortBy)[keyof typeof FeatureGroupSortBy];
export declare const FeatureGroupSortOrder: {
  readonly ASCENDING: "Ascending";
  readonly DESCENDING: "Descending";
};
export type FeatureGroupSortOrder =
  (typeof FeatureGroupSortOrder)[keyof typeof FeatureGroupSortOrder];
export interface FeatureGroupSummary {
  FeatureGroupName: string | undefined;
  FeatureGroupArn: string | undefined;
  CreationTime: Date | undefined;
  FeatureGroupStatus?: FeatureGroupStatus | string;
  OfflineStoreStatus?: OfflineStoreStatus;
}
export interface FeatureMetadata {
  FeatureGroupArn?: string;
  FeatureGroupName?: string;
  FeatureName?: string;
  FeatureType?: FeatureType | string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  Description?: string;
  Parameters?: FeatureParameter[];
}
export declare const Operator: {
  readonly CONTAINS: "Contains";
  readonly EQUALS: "Equals";
  readonly EXISTS: "Exists";
  readonly GREATER_THAN: "GreaterThan";
  readonly GREATER_THAN_OR_EQUAL_TO: "GreaterThanOrEqualTo";
  readonly IN: "In";
  readonly LESS_THAN: "LessThan";
  readonly LESS_THAN_OR_EQUAL_TO: "LessThanOrEqualTo";
  readonly NOT_EQUALS: "NotEquals";
  readonly NOT_EXISTS: "NotExists";
};
export type Operator = (typeof Operator)[keyof typeof Operator];
export interface Filter {
  Name: string | undefined;
  Operator?: Operator | string;
  Value?: string;
}
export interface FlowDefinitionSummary {
  FlowDefinitionName: string | undefined;
  FlowDefinitionArn: string | undefined;
  FlowDefinitionStatus: FlowDefinitionStatus | string | undefined;
  CreationTime: Date | undefined;
  FailureReason?: string;
}
export interface GetDeviceFleetReportRequest {
  DeviceFleetName: string | undefined;
}
export interface GetDeviceFleetReportResponse {
  DeviceFleetArn: string | undefined;
  DeviceFleetName: string | undefined;
  OutputConfig?: EdgeOutputConfig;
  Description?: string;
  ReportGenerated?: Date;
  DeviceStats?: DeviceStats;
  AgentVersions?: AgentVersion[];
  ModelStats?: EdgeModelStat[];
}
export interface GetLineageGroupPolicyRequest {
  LineageGroupName: string | undefined;
}
export interface GetLineageGroupPolicyResponse {
  LineageGroupArn?: string;
  ResourcePolicy?: string;
}
export interface GetModelPackageGroupPolicyInput {
  ModelPackageGroupName: string | undefined;
}
export interface GetModelPackageGroupPolicyOutput {
  ResourcePolicy: string | undefined;
}
export interface GetSagemakerServicecatalogPortfolioStatusInput {}
export declare const SagemakerServicecatalogStatus: {
  readonly DISABLED: "Disabled";
  readonly ENABLED: "Enabled";
};
export type SagemakerServicecatalogStatus =
  (typeof SagemakerServicecatalogStatus)[keyof typeof SagemakerServicecatalogStatus];
export interface GetSagemakerServicecatalogPortfolioStatusOutput {
  Status?: SagemakerServicecatalogStatus | string;
}
export declare const ResourceType: {
  readonly ENDPOINT: "Endpoint";
  readonly EXPERIMENT: "Experiment";
  readonly EXPERIMENT_TRIAL: "ExperimentTrial";
  readonly EXPERIMENT_TRIAL_COMPONENT: "ExperimentTrialComponent";
  readonly FEATURE_GROUP: "FeatureGroup";
  readonly FEATURE_METADATA: "FeatureMetadata";
  readonly HYPER_PARAMETER_TUNING_JOB: "HyperParameterTuningJob";
  readonly MODEL: "Model";
  readonly MODEL_CARD: "ModelCard";
  readonly MODEL_PACKAGE: "ModelPackage";
  readonly MODEL_PACKAGE_GROUP: "ModelPackageGroup";
  readonly PIPELINE: "Pipeline";
  readonly PIPELINE_EXECUTION: "PipelineExecution";
  readonly PROJECT: "Project";
  readonly TRAINING_JOB: "TrainingJob";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export interface PropertyNameQuery {
  PropertyNameHint: string | undefined;
}
export interface SuggestionQuery {
  PropertyNameQuery?: PropertyNameQuery;
}
export interface GetSearchSuggestionsRequest {
  Resource: ResourceType | string | undefined;
  SuggestionQuery?: SuggestionQuery;
}
export interface PropertyNameSuggestion {
  PropertyName?: string;
}
export interface GetSearchSuggestionsResponse {
  PropertyNameSuggestions?: PropertyNameSuggestion[];
}
export interface GitConfigForUpdate {
  SecretArn?: string;
}
export interface HubContentInfo {
  HubContentName: string | undefined;
  HubContentArn: string | undefined;
  HubContentVersion: string | undefined;
  HubContentType: HubContentType | string | undefined;
  DocumentSchemaVersion: string | undefined;
  HubContentDisplayName?: string;
  HubContentDescription?: string;
  HubContentSearchKeywords?: string[];
  HubContentStatus: HubContentStatus | string | undefined;
  CreationTime: Date | undefined;
}
export declare const HubContentSortBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly HUB_CONTENT_NAME: "HubContentName";
  readonly HUB_CONTENT_STATUS: "HubContentStatus";
};
export type HubContentSortBy =
  (typeof HubContentSortBy)[keyof typeof HubContentSortBy];
export interface HubInfo {
  HubName: string | undefined;
  HubArn: string | undefined;
  HubDisplayName?: string;
  HubDescription?: string;
  HubSearchKeywords?: string[];
  HubStatus: HubStatus | string | undefined;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
}
export declare const HubSortBy: {
  readonly ACCOUNT_ID_OWNER: "AccountIdOwner";
  readonly CREATION_TIME: "CreationTime";
  readonly HUB_NAME: "HubName";
  readonly HUB_STATUS: "HubStatus";
};
export type HubSortBy = (typeof HubSortBy)[keyof typeof HubSortBy];
export interface HumanTaskUiSummary {
  HumanTaskUiName: string | undefined;
  HumanTaskUiArn: string | undefined;
  CreationTime: Date | undefined;
}
export interface HyperParameterTuningJobSearchEntity {
  HyperParameterTuningJobName?: string;
  HyperParameterTuningJobArn?: string;
  HyperParameterTuningJobConfig?: HyperParameterTuningJobConfig;
  TrainingJobDefinition?: HyperParameterTrainingJobDefinition;
  TrainingJobDefinitions?: HyperParameterTrainingJobDefinition[];
  HyperParameterTuningJobStatus?: HyperParameterTuningJobStatus | string;
  CreationTime?: Date;
  HyperParameterTuningEndTime?: Date;
  LastModifiedTime?: Date;
  TrainingJobStatusCounters?: TrainingJobStatusCounters;
  ObjectiveStatusCounters?: ObjectiveStatusCounters;
  BestTrainingJob?: HyperParameterTrainingJobSummary;
  OverallBestTrainingJob?: HyperParameterTrainingJobSummary;
  WarmStartConfig?: HyperParameterTuningJobWarmStartConfig;
  FailureReason?: string;
  Tags?: Tag[];
  TuningJobCompletionDetails?: HyperParameterTuningJobCompletionDetails;
  ConsumedResources?: HyperParameterTuningJobConsumedResources;
}
export declare const HyperParameterTuningJobSortByOptions: {
  readonly CreationTime: "CreationTime";
  readonly Name: "Name";
  readonly Status: "Status";
};
export type HyperParameterTuningJobSortByOptions =
  (typeof HyperParameterTuningJobSortByOptions)[keyof typeof HyperParameterTuningJobSortByOptions];
export interface HyperParameterTuningJobSummary {
  HyperParameterTuningJobName: string | undefined;
  HyperParameterTuningJobArn: string | undefined;
  HyperParameterTuningJobStatus:
    | HyperParameterTuningJobStatus
    | string
    | undefined;
  Strategy: HyperParameterTuningJobStrategyType | string | undefined;
  CreationTime: Date | undefined;
  HyperParameterTuningEndTime?: Date;
  LastModifiedTime?: Date;
  TrainingJobStatusCounters: TrainingJobStatusCounters | undefined;
  ObjectiveStatusCounters: ObjectiveStatusCounters | undefined;
  ResourceLimits?: ResourceLimits;
}
export interface Image {
  CreationTime: Date | undefined;
  Description?: string;
  DisplayName?: string;
  FailureReason?: string;
  ImageArn: string | undefined;
  ImageName: string | undefined;
  ImageStatus: ImageStatus | string | undefined;
  LastModifiedTime: Date | undefined;
}
export declare const ImageSortBy: {
  readonly CREATION_TIME: "CREATION_TIME";
  readonly IMAGE_NAME: "IMAGE_NAME";
  readonly LAST_MODIFIED_TIME: "LAST_MODIFIED_TIME";
};
export type ImageSortBy = (typeof ImageSortBy)[keyof typeof ImageSortBy];
export declare const ImageSortOrder: {
  readonly ASCENDING: "ASCENDING";
  readonly DESCENDING: "DESCENDING";
};
export type ImageSortOrder =
  (typeof ImageSortOrder)[keyof typeof ImageSortOrder];
export interface ImageVersion {
  CreationTime: Date | undefined;
  FailureReason?: string;
  ImageArn: string | undefined;
  ImageVersionArn: string | undefined;
  ImageVersionStatus: ImageVersionStatus | string | undefined;
  LastModifiedTime: Date | undefined;
  Version: number | undefined;
}
export declare const ImageVersionSortBy: {
  readonly CREATION_TIME: "CREATION_TIME";
  readonly LAST_MODIFIED_TIME: "LAST_MODIFIED_TIME";
  readonly VERSION: "VERSION";
};
export type ImageVersionSortBy =
  (typeof ImageVersionSortBy)[keyof typeof ImageVersionSortBy];
export declare const ImageVersionSortOrder: {
  readonly ASCENDING: "ASCENDING";
  readonly DESCENDING: "DESCENDING";
};
export type ImageVersionSortOrder =
  (typeof ImageVersionSortOrder)[keyof typeof ImageVersionSortOrder];
export interface ImportHubContentRequest {
  HubContentName: string | undefined;
  HubContentVersion?: string;
  HubContentType: HubContentType | string | undefined;
  DocumentSchemaVersion: string | undefined;
  HubName: string | undefined;
  HubContentDisplayName?: string;
  HubContentDescription?: string;
  HubContentMarkdown?: string;
  HubContentDocument: string | undefined;
  HubContentSearchKeywords?: string[];
  Tags?: Tag[];
}
export interface ImportHubContentResponse {
  HubArn: string | undefined;
  HubContentArn: string | undefined;
}
export interface InferenceExperimentSummary {
  Name: string | undefined;
  Type: InferenceExperimentType | string | undefined;
  Schedule?: InferenceExperimentSchedule;
  Status: InferenceExperimentStatus | string | undefined;
  StatusReason?: string;
  Description?: string;
  CreationTime: Date | undefined;
  CompletionTime?: Date;
  LastModifiedTime: Date | undefined;
  RoleArn?: string;
}
export declare const InferenceExperimentStopDesiredState: {
  readonly CANCELLED: "Cancelled";
  readonly COMPLETED: "Completed";
};
export type InferenceExperimentStopDesiredState =
  (typeof InferenceExperimentStopDesiredState)[keyof typeof InferenceExperimentStopDesiredState];
export interface InferenceRecommendationsJob {
  JobName: string | undefined;
  JobDescription: string | undefined;
  JobType: RecommendationJobType | string | undefined;
  JobArn: string | undefined;
  Status: RecommendationJobStatus | string | undefined;
  CreationTime: Date | undefined;
  CompletionTime?: Date;
  RoleArn: string | undefined;
  LastModifiedTime: Date | undefined;
  FailureReason?: string;
}
export interface RecommendationJobInferenceBenchmark {
  Metrics?: RecommendationMetrics;
  EndpointConfiguration?: EndpointOutputConfiguration;
  ModelConfiguration: ModelConfiguration | undefined;
  FailureReason?: string;
  EndpointMetrics?: InferenceMetrics;
}
export declare const RecommendationStepType: {
  readonly BENCHMARK: "BENCHMARK";
};
export type RecommendationStepType =
  (typeof RecommendationStepType)[keyof typeof RecommendationStepType];
export interface InferenceRecommendationsJobStep {
  StepType: RecommendationStepType | string | undefined;
  JobName: string | undefined;
  Status: RecommendationJobStatus | string | undefined;
  InferenceBenchmark?: RecommendationJobInferenceBenchmark;
}
export interface LabelCountersForWorkteam {
  HumanLabeled?: number;
  PendingHuman?: number;
  Total?: number;
}
export interface LabelingJobForWorkteamSummary {
  LabelingJobName?: string;
  JobReferenceCode: string | undefined;
  WorkRequesterAccountId: string | undefined;
  CreationTime: Date | undefined;
  LabelCounters?: LabelCountersForWorkteam;
  NumberOfHumanWorkersPerDataObject?: number;
}
export declare const DescribeModelCardResponseFilterSensitiveLog: (
  obj: DescribeModelCardResponse
) => any;
