import { LazyJsonString as __LazyJsonString } from "@aws-sdk/smithy-client";
import {
  AdditionalInferenceSpecificationDefinition,
  AlgorithmSpecification,
  AnnotationConsolidationConfig,
  AppSpecification,
  AppType,
  ArtifactSource,
  AsyncInferenceConfig,
  AthenaDatasetDefinition,
  AutoRollbackConfig,
  AwsManagedHumanLoopRequestSource,
  BatchDataCaptureConfig,
  BatchStrategy,
  BatchTransformInput,
  BestObjectiveNotImproving,
  Bias,
  BlueGreenUpdatePolicy,
  CaptureContentTypeHeader,
  CaptureOption,
  CaptureStatus,
  CategoricalParameter,
  CategoricalParameterRange,
  Channel,
  CheckpointConfig,
  ClarifyExplainerConfig,
  CognitoConfig,
  CognitoMemberDefinition,
  CollectionConfiguration,
  ContainerDefinition,
  ContentClassifier,
  ContinuousParameterRange,
  ConvergenceDetected,
  EndpointInput,
  HyperParameterScalingType,
  HyperParameterTuningJobObjective,
  InferenceSpecification,
  JupyterServerAppSettings,
  KernelGatewayAppSettings,
  MetadataProperties,
  MetricDefinition,
  MetricsSource,
  ModelApprovalStatus,
  MonitoringConstraintsResource,
  MonitoringNetworkConfig,
  MonitoringOutputConfig,
  MonitoringResources,
  MonitoringStatisticsResource,
  MonitoringStoppingCondition,
  OutputDataConfig,
  ProcessingInstanceType,
  ProcessingS3DataDistributionType,
  ProcessingS3InputMode,
  ProcessingS3UploadMode,
  ProductionVariantInstanceType,
  ResourceConfig,
  StoppingCondition,
  Tag,
  TrainingInputMode,
  TrainingInstanceType,
  TransformInput,
  TransformJobDefinition,
  TransformOutput,
  TransformResources,
  UserSettings,
  VpcConfig,
} from "./models_0";
export interface DeploymentConfig {
  BlueGreenUpdatePolicy: BlueGreenUpdatePolicy | undefined;
  AutoRollbackConfiguration?: AutoRollbackConfig;
}
export interface CreateEndpointInput {
  EndpointName: string | undefined;
  EndpointConfigName: string | undefined;
  DeploymentConfig?: DeploymentConfig;
  Tags?: Tag[];
}
export interface CreateEndpointOutput {
  EndpointArn: string | undefined;
}
export interface DataCaptureConfig {
  EnableCapture?: boolean;
  InitialSamplingPercentage: number | undefined;
  DestinationS3Uri: string | undefined;
  KmsKeyId?: string;
  CaptureOptions: CaptureOption[] | undefined;
  CaptureContentTypeHeader?: CaptureContentTypeHeader;
}
export interface ExplainerConfig {
  ClarifyExplainerConfig?: ClarifyExplainerConfig;
}
export declare const ProductionVariantAcceleratorType: {
  readonly ML_EIA1_LARGE: "ml.eia1.large";
  readonly ML_EIA1_MEDIUM: "ml.eia1.medium";
  readonly ML_EIA1_XLARGE: "ml.eia1.xlarge";
  readonly ML_EIA2_LARGE: "ml.eia2.large";
  readonly ML_EIA2_MEDIUM: "ml.eia2.medium";
  readonly ML_EIA2_XLARGE: "ml.eia2.xlarge";
};
export type ProductionVariantAcceleratorType =
  (typeof ProductionVariantAcceleratorType)[keyof typeof ProductionVariantAcceleratorType];
export interface ProductionVariantCoreDumpConfig {
  DestinationS3Uri: string | undefined;
  KmsKeyId?: string;
}
export interface ProductionVariantServerlessConfig {
  MemorySizeInMB: number | undefined;
  MaxConcurrency: number | undefined;
}
export interface ProductionVariant {
  VariantName: string | undefined;
  ModelName: string | undefined;
  InitialInstanceCount?: number;
  InstanceType?: ProductionVariantInstanceType | string;
  InitialVariantWeight?: number;
  AcceleratorType?: ProductionVariantAcceleratorType | string;
  CoreDumpConfig?: ProductionVariantCoreDumpConfig;
  ServerlessConfig?: ProductionVariantServerlessConfig;
  VolumeSizeInGB?: number;
  ModelDataDownloadTimeoutInSeconds?: number;
  ContainerStartupHealthCheckTimeoutInSeconds?: number;
  EnableSSMAccess?: boolean;
}
export interface CreateEndpointConfigInput {
  EndpointConfigName: string | undefined;
  ProductionVariants: ProductionVariant[] | undefined;
  DataCaptureConfig?: DataCaptureConfig;
  Tags?: Tag[];
  KmsKeyId?: string;
  AsyncInferenceConfig?: AsyncInferenceConfig;
  ExplainerConfig?: ExplainerConfig;
  ShadowProductionVariants?: ProductionVariant[];
}
export interface CreateEndpointConfigOutput {
  EndpointConfigArn: string | undefined;
}
export interface CreateExperimentRequest {
  ExperimentName: string | undefined;
  DisplayName?: string;
  Description?: string;
  Tags?: Tag[];
}
export interface CreateExperimentResponse {
  ExperimentArn?: string;
}
export declare const FeatureType: {
  readonly FRACTIONAL: "Fractional";
  readonly INTEGRAL: "Integral";
  readonly STRING: "String";
};
export type FeatureType = (typeof FeatureType)[keyof typeof FeatureType];
export interface FeatureDefinition {
  FeatureName?: string;
  FeatureType?: FeatureType | string;
}
export interface DataCatalogConfig {
  TableName: string | undefined;
  Catalog: string | undefined;
  Database: string | undefined;
}
export interface S3StorageConfig {
  S3Uri: string | undefined;
  KmsKeyId?: string;
  ResolvedOutputS3Uri?: string;
}
export declare const TableFormat: {
  readonly GLUE: "Glue";
  readonly ICEBERG: "Iceberg";
};
export type TableFormat = (typeof TableFormat)[keyof typeof TableFormat];
export interface OfflineStoreConfig {
  S3StorageConfig: S3StorageConfig | undefined;
  DisableGlueTableCreation?: boolean;
  DataCatalogConfig?: DataCatalogConfig;
  TableFormat?: TableFormat | string;
}
export interface OnlineStoreSecurityConfig {
  KmsKeyId?: string;
}
export interface OnlineStoreConfig {
  SecurityConfig?: OnlineStoreSecurityConfig;
  EnableOnlineStore?: boolean;
}
export interface CreateFeatureGroupRequest {
  FeatureGroupName: string | undefined;
  RecordIdentifierFeatureName: string | undefined;
  EventTimeFeatureName: string | undefined;
  FeatureDefinitions: FeatureDefinition[] | undefined;
  OnlineStoreConfig?: OnlineStoreConfig;
  OfflineStoreConfig?: OfflineStoreConfig;
  RoleArn?: string;
  Description?: string;
  Tags?: Tag[];
}
export interface CreateFeatureGroupResponse {
  FeatureGroupArn: string | undefined;
}
export interface HumanLoopActivationConditionsConfig {
  HumanLoopActivationConditions: __LazyJsonString | string | undefined;
}
export interface HumanLoopActivationConfig {
  HumanLoopActivationConditionsConfig:
    | HumanLoopActivationConditionsConfig
    | undefined;
}
export interface USD {
  Dollars?: number;
  Cents?: number;
  TenthFractionsOfACent?: number;
}
export interface PublicWorkforceTaskPrice {
  AmountInUsd?: USD;
}
export interface HumanLoopConfig {
  WorkteamArn: string | undefined;
  HumanTaskUiArn: string | undefined;
  TaskTitle: string | undefined;
  TaskDescription: string | undefined;
  TaskCount: number | undefined;
  TaskAvailabilityLifetimeInSeconds?: number;
  TaskTimeLimitInSeconds?: number;
  TaskKeywords?: string[];
  PublicWorkforceTaskPrice?: PublicWorkforceTaskPrice;
}
export interface HumanLoopRequestSource {
  AwsManagedHumanLoopRequestSource:
    | AwsManagedHumanLoopRequestSource
    | string
    | undefined;
}
export interface FlowDefinitionOutputConfig {
  S3OutputPath: string | undefined;
  KmsKeyId?: string;
}
export interface CreateFlowDefinitionRequest {
  FlowDefinitionName: string | undefined;
  HumanLoopRequestSource?: HumanLoopRequestSource;
  HumanLoopActivationConfig?: HumanLoopActivationConfig;
  HumanLoopConfig: HumanLoopConfig | undefined;
  OutputConfig: FlowDefinitionOutputConfig | undefined;
  RoleArn: string | undefined;
  Tags?: Tag[];
}
export interface CreateFlowDefinitionResponse {
  FlowDefinitionArn: string | undefined;
}
export interface HubS3StorageConfig {
  S3OutputPath?: string;
}
export interface CreateHubRequest {
  HubName: string | undefined;
  HubDescription: string | undefined;
  HubDisplayName?: string;
  HubSearchKeywords?: string[];
  S3StorageConfig?: HubS3StorageConfig;
  Tags?: Tag[];
}
export interface CreateHubResponse {
  HubArn: string | undefined;
}
export interface UiTemplate {
  Content: string | undefined;
}
export interface CreateHumanTaskUiRequest {
  HumanTaskUiName: string | undefined;
  UiTemplate: UiTemplate | undefined;
  Tags?: Tag[];
}
export interface CreateHumanTaskUiResponse {
  HumanTaskUiArn: string | undefined;
}
export interface IntegerParameterRange {
  Name: string | undefined;
  MinValue: string | undefined;
  MaxValue: string | undefined;
  ScalingType?: HyperParameterScalingType | string;
}
export interface ParameterRanges {
  IntegerParameterRanges?: IntegerParameterRange[];
  ContinuousParameterRanges?: ContinuousParameterRange[];
  CategoricalParameterRanges?: CategoricalParameterRange[];
}
export interface ResourceLimits {
  MaxNumberOfTrainingJobs?: number;
  MaxParallelTrainingJobs: number | undefined;
  MaxRuntimeInSeconds?: number;
}
export declare const HyperParameterTuningJobStrategyType: {
  readonly BAYESIAN: "Bayesian";
  readonly GRID: "Grid";
  readonly HYPERBAND: "Hyperband";
  readonly RANDOM: "Random";
};
export type HyperParameterTuningJobStrategyType =
  (typeof HyperParameterTuningJobStrategyType)[keyof typeof HyperParameterTuningJobStrategyType];
export interface HyperbandStrategyConfig {
  MinResource?: number;
  MaxResource?: number;
}
export interface HyperParameterTuningJobStrategyConfig {
  HyperbandStrategyConfig?: HyperbandStrategyConfig;
}
export declare const TrainingJobEarlyStoppingType: {
  readonly AUTO: "Auto";
  readonly OFF: "Off";
};
export type TrainingJobEarlyStoppingType =
  (typeof TrainingJobEarlyStoppingType)[keyof typeof TrainingJobEarlyStoppingType];
export interface TuningJobCompletionCriteria {
  TargetObjectiveMetricValue?: number;
  BestObjectiveNotImproving?: BestObjectiveNotImproving;
  ConvergenceDetected?: ConvergenceDetected;
}
export interface HyperParameterTuningJobConfig {
  Strategy: HyperParameterTuningJobStrategyType | string | undefined;
  StrategyConfig?: HyperParameterTuningJobStrategyConfig;
  HyperParameterTuningJobObjective?: HyperParameterTuningJobObjective;
  ResourceLimits: ResourceLimits | undefined;
  ParameterRanges?: ParameterRanges;
  TrainingJobEarlyStoppingType?: TrainingJobEarlyStoppingType | string;
  TuningJobCompletionCriteria?: TuningJobCompletionCriteria;
  RandomSeed?: number;
}
export interface HyperParameterAlgorithmSpecification {
  TrainingImage?: string;
  TrainingInputMode: TrainingInputMode | string | undefined;
  AlgorithmName?: string;
  MetricDefinitions?: MetricDefinition[];
}
export declare const HyperParameterTuningAllocationStrategy: {
  readonly PRIORITIZED: "Prioritized";
};
export type HyperParameterTuningAllocationStrategy =
  (typeof HyperParameterTuningAllocationStrategy)[keyof typeof HyperParameterTuningAllocationStrategy];
export interface HyperParameterTuningInstanceConfig {
  InstanceType: TrainingInstanceType | string | undefined;
  InstanceCount: number | undefined;
  VolumeSizeInGB: number | undefined;
}
export interface HyperParameterTuningResourceConfig {
  InstanceType?: TrainingInstanceType | string;
  InstanceCount?: number;
  VolumeSizeInGB?: number;
  VolumeKmsKeyId?: string;
  AllocationStrategy?: HyperParameterTuningAllocationStrategy | string;
  InstanceConfigs?: HyperParameterTuningInstanceConfig[];
}
export interface RetryStrategy {
  MaximumRetryAttempts: number | undefined;
}
export interface HyperParameterTrainingJobDefinition {
  DefinitionName?: string;
  TuningObjective?: HyperParameterTuningJobObjective;
  HyperParameterRanges?: ParameterRanges;
  StaticHyperParameters?: Record<string, string>;
  AlgorithmSpecification: HyperParameterAlgorithmSpecification | undefined;
  RoleArn: string | undefined;
  InputDataConfig?: Channel[];
  VpcConfig?: VpcConfig;
  OutputDataConfig: OutputDataConfig | undefined;
  ResourceConfig?: ResourceConfig;
  StoppingCondition: StoppingCondition | undefined;
  EnableNetworkIsolation?: boolean;
  EnableInterContainerTrafficEncryption?: boolean;
  EnableManagedSpotTraining?: boolean;
  CheckpointConfig?: CheckpointConfig;
  RetryStrategy?: RetryStrategy;
  HyperParameterTuningResourceConfig?: HyperParameterTuningResourceConfig;
  Environment?: Record<string, string>;
}
export interface ParentHyperParameterTuningJob {
  HyperParameterTuningJobName?: string;
}
export declare const HyperParameterTuningJobWarmStartType: {
  readonly IDENTICAL_DATA_AND_ALGORITHM: "IdenticalDataAndAlgorithm";
  readonly TRANSFER_LEARNING: "TransferLearning";
};
export type HyperParameterTuningJobWarmStartType =
  (typeof HyperParameterTuningJobWarmStartType)[keyof typeof HyperParameterTuningJobWarmStartType];
export interface HyperParameterTuningJobWarmStartConfig {
  ParentHyperParameterTuningJobs: ParentHyperParameterTuningJob[] | undefined;
  WarmStartType: HyperParameterTuningJobWarmStartType | string | undefined;
}
export interface CreateHyperParameterTuningJobRequest {
  HyperParameterTuningJobName: string | undefined;
  HyperParameterTuningJobConfig: HyperParameterTuningJobConfig | undefined;
  TrainingJobDefinition?: HyperParameterTrainingJobDefinition;
  TrainingJobDefinitions?: HyperParameterTrainingJobDefinition[];
  WarmStartConfig?: HyperParameterTuningJobWarmStartConfig;
  Tags?: Tag[];
}
export interface CreateHyperParameterTuningJobResponse {
  HyperParameterTuningJobArn: string | undefined;
}
export interface CreateImageRequest {
  Description?: string;
  DisplayName?: string;
  ImageName: string | undefined;
  RoleArn: string | undefined;
  Tags?: Tag[];
}
export interface CreateImageResponse {
  ImageArn?: string;
}
export declare const JobType: {
  readonly INFERENCE: "INFERENCE";
  readonly NOTEBOOK_KERNEL: "NOTEBOOK_KERNEL";
  readonly TRAINING: "TRAINING";
};
export type JobType = (typeof JobType)[keyof typeof JobType];
export declare const Processor: {
  readonly CPU: "CPU";
  readonly GPU: "GPU";
};
export type Processor = (typeof Processor)[keyof typeof Processor];
export declare const VendorGuidance: {
  readonly ARCHIVED: "ARCHIVED";
  readonly NOT_PROVIDED: "NOT_PROVIDED";
  readonly STABLE: "STABLE";
  readonly TO_BE_ARCHIVED: "TO_BE_ARCHIVED";
};
export type VendorGuidance =
  (typeof VendorGuidance)[keyof typeof VendorGuidance];
export interface CreateImageVersionRequest {
  BaseImage: string | undefined;
  ClientToken?: string;
  ImageName: string | undefined;
  Aliases?: string[];
  VendorGuidance?: VendorGuidance | string;
  JobType?: JobType | string;
  MLFramework?: string;
  ProgrammingLang?: string;
  Processor?: Processor | string;
  Horovod?: boolean;
  ReleaseNotes?: string;
}
export interface CreateImageVersionResponse {
  ImageVersionArn?: string;
}
export interface InferenceExperimentDataStorageConfig {
  Destination: string | undefined;
  KmsKey?: string;
  ContentType?: CaptureContentTypeHeader;
}
export declare const ModelInfrastructureType: {
  readonly REAL_TIME_INFERENCE: "RealTimeInference";
};
export type ModelInfrastructureType =
  (typeof ModelInfrastructureType)[keyof typeof ModelInfrastructureType];
export declare const _InstanceType: {
  readonly ML_C4_2XLARGE: "ml.c4.2xlarge";
  readonly ML_C4_4XLARGE: "ml.c4.4xlarge";
  readonly ML_C4_8XLARGE: "ml.c4.8xlarge";
  readonly ML_C4_XLARGE: "ml.c4.xlarge";
  readonly ML_C5D_18XLARGE: "ml.c5d.18xlarge";
  readonly ML_C5D_2XLARGE: "ml.c5d.2xlarge";
  readonly ML_C5D_4XLARGE: "ml.c5d.4xlarge";
  readonly ML_C5D_9XLARGE: "ml.c5d.9xlarge";
  readonly ML_C5D_XLARGE: "ml.c5d.xlarge";
  readonly ML_C5_18XLARGE: "ml.c5.18xlarge";
  readonly ML_C5_2XLARGE: "ml.c5.2xlarge";
  readonly ML_C5_4XLARGE: "ml.c5.4xlarge";
  readonly ML_C5_9XLARGE: "ml.c5.9xlarge";
  readonly ML_C5_XLARGE: "ml.c5.xlarge";
  readonly ML_G4DN_12XLARGE: "ml.g4dn.12xlarge";
  readonly ML_G4DN_16XLARGE: "ml.g4dn.16xlarge";
  readonly ML_G4DN_2XLARGE: "ml.g4dn.2xlarge";
  readonly ML_G4DN_4XLARGE: "ml.g4dn.4xlarge";
  readonly ML_G4DN_8XLARGE: "ml.g4dn.8xlarge";
  readonly ML_G4DN_XLARGE: "ml.g4dn.xlarge";
  readonly ML_G5_12XLARGE: "ml.g5.12xlarge";
  readonly ML_G5_16XLARGE: "ml.g5.16xlarge";
  readonly ML_G5_24XLARGE: "ml.g5.24xlarge";
  readonly ML_G5_2XLARGE: "ml.g5.2xlarge";
  readonly ML_G5_48XLARGE: "ml.g5.48xlarge";
  readonly ML_G5_4XLARGE: "ml.g5.4xlarge";
  readonly ML_G5_8XLARGE: "ml.g5.8xlarge";
  readonly ML_G5_XLARGE: "ml.g5.xlarge";
  readonly ML_M4_10XLARGE: "ml.m4.10xlarge";
  readonly ML_M4_16XLARGE: "ml.m4.16xlarge";
  readonly ML_M4_2XLARGE: "ml.m4.2xlarge";
  readonly ML_M4_4XLARGE: "ml.m4.4xlarge";
  readonly ML_M4_XLARGE: "ml.m4.xlarge";
  readonly ML_M5D_12XLARGE: "ml.m5d.12xlarge";
  readonly ML_M5D_16XLARGE: "ml.m5d.16xlarge";
  readonly ML_M5D_24XLARGE: "ml.m5d.24xlarge";
  readonly ML_M5D_2XLARGE: "ml.m5d.2xlarge";
  readonly ML_M5D_4XLARGE: "ml.m5d.4xlarge";
  readonly ML_M5D_8XLARGE: "ml.m5d.8xlarge";
  readonly ML_M5D_LARGE: "ml.m5d.large";
  readonly ML_M5D_XLARGE: "ml.m5d.xlarge";
  readonly ML_M5_12XLARGE: "ml.m5.12xlarge";
  readonly ML_M5_24XLARGE: "ml.m5.24xlarge";
  readonly ML_M5_2XLARGE: "ml.m5.2xlarge";
  readonly ML_M5_4XLARGE: "ml.m5.4xlarge";
  readonly ML_M5_XLARGE: "ml.m5.xlarge";
  readonly ML_P2_16XLARGE: "ml.p2.16xlarge";
  readonly ML_P2_8XLARGE: "ml.p2.8xlarge";
  readonly ML_P2_XLARGE: "ml.p2.xlarge";
  readonly ML_P3DN_24XLARGE: "ml.p3dn.24xlarge";
  readonly ML_P3_16XLARGE: "ml.p3.16xlarge";
  readonly ML_P3_2XLARGE: "ml.p3.2xlarge";
  readonly ML_P3_8XLARGE: "ml.p3.8xlarge";
  readonly ML_R5_12XLARGE: "ml.r5.12xlarge";
  readonly ML_R5_16XLARGE: "ml.r5.16xlarge";
  readonly ML_R5_24XLARGE: "ml.r5.24xlarge";
  readonly ML_R5_2XLARGE: "ml.r5.2xlarge";
  readonly ML_R5_4XLARGE: "ml.r5.4xlarge";
  readonly ML_R5_8XLARGE: "ml.r5.8xlarge";
  readonly ML_R5_LARGE: "ml.r5.large";
  readonly ML_R5_XLARGE: "ml.r5.xlarge";
  readonly ML_T2_2XLARGE: "ml.t2.2xlarge";
  readonly ML_T2_LARGE: "ml.t2.large";
  readonly ML_T2_MEDIUM: "ml.t2.medium";
  readonly ML_T2_XLARGE: "ml.t2.xlarge";
  readonly ML_T3_2XLARGE: "ml.t3.2xlarge";
  readonly ML_T3_LARGE: "ml.t3.large";
  readonly ML_T3_MEDIUM: "ml.t3.medium";
  readonly ML_T3_XLARGE: "ml.t3.xlarge";
};
export type _InstanceType = (typeof _InstanceType)[keyof typeof _InstanceType];
export interface RealTimeInferenceConfig {
  InstanceType: _InstanceType | string | undefined;
  InstanceCount: number | undefined;
}
export interface ModelInfrastructureConfig {
  InfrastructureType: ModelInfrastructureType | string | undefined;
  RealTimeInferenceConfig: RealTimeInferenceConfig | undefined;
}
export interface ModelVariantConfig {
  ModelName: string | undefined;
  VariantName: string | undefined;
  InfrastructureConfig: ModelInfrastructureConfig | undefined;
}
export interface InferenceExperimentSchedule {
  StartTime?: Date;
  EndTime?: Date;
}
export interface ShadowModelVariantConfig {
  ShadowModelVariantName: string | undefined;
  SamplingPercentage: number | undefined;
}
export interface ShadowModeConfig {
  SourceModelVariantName: string | undefined;
  ShadowModelVariants: ShadowModelVariantConfig[] | undefined;
}
export declare const InferenceExperimentType: {
  readonly SHADOW_MODE: "ShadowMode";
};
export type InferenceExperimentType =
  (typeof InferenceExperimentType)[keyof typeof InferenceExperimentType];
export interface CreateInferenceExperimentRequest {
  Name: string | undefined;
  Type: InferenceExperimentType | string | undefined;
  Schedule?: InferenceExperimentSchedule;
  Description?: string;
  RoleArn: string | undefined;
  EndpointName: string | undefined;
  ModelVariants: ModelVariantConfig[] | undefined;
  DataStorageConfig?: InferenceExperimentDataStorageConfig;
  ShadowModeConfig: ShadowModeConfig | undefined;
  KmsKey?: string;
  Tags?: Tag[];
}
export interface CreateInferenceExperimentResponse {
  InferenceExperimentArn: string | undefined;
}
export interface RecommendationJobPayloadConfig {
  SamplePayloadUrl?: string;
  SupportedContentTypes?: string[];
}
export interface RecommendationJobContainerConfig {
  Domain?: string;
  Task?: string;
  Framework?: string;
  FrameworkVersion?: string;
  PayloadConfig?: RecommendationJobPayloadConfig;
  NearestModelName?: string;
  SupportedInstanceTypes?: string[];
  DataInputConfig?: string;
}
export interface EnvironmentParameterRanges {
  CategoricalParameterRanges?: CategoricalParameter[];
}
export interface EndpointInputConfiguration {
  InstanceType: ProductionVariantInstanceType | string | undefined;
  InferenceSpecificationName?: string;
  EnvironmentParameterRanges?: EnvironmentParameterRanges;
}
export interface EndpointInfo {
  EndpointName: string | undefined;
}
export interface RecommendationJobResourceLimit {
  MaxNumberOfTests?: number;
  MaxParallelOfTests?: number;
}
export interface Phase {
  InitialNumberOfUsers?: number;
  SpawnRate?: number;
  DurationInSeconds?: number;
}
export declare const TrafficType: {
  readonly PHASES: "PHASES";
};
export type TrafficType = (typeof TrafficType)[keyof typeof TrafficType];
export interface TrafficPattern {
  TrafficType?: TrafficType | string;
  Phases?: Phase[];
}
export interface RecommendationJobVpcConfig {
  SecurityGroupIds: string[] | undefined;
  Subnets: string[] | undefined;
}
export interface RecommendationJobInputConfig {
  ModelPackageVersionArn?: string;
  JobDurationInSeconds?: number;
  TrafficPattern?: TrafficPattern;
  ResourceLimit?: RecommendationJobResourceLimit;
  EndpointConfigurations?: EndpointInputConfiguration[];
  VolumeKmsKeyId?: string;
  ContainerConfig?: RecommendationJobContainerConfig;
  Endpoints?: EndpointInfo[];
  VpcConfig?: RecommendationJobVpcConfig;
  ModelName?: string;
}
export declare const RecommendationJobType: {
  readonly ADVANCED: "Advanced";
  readonly DEFAULT: "Default";
};
export type RecommendationJobType =
  (typeof RecommendationJobType)[keyof typeof RecommendationJobType];
export interface RecommendationJobCompiledOutputConfig {
  S3OutputUri?: string;
}
export interface RecommendationJobOutputConfig {
  KmsKeyId?: string;
  CompiledOutputConfig?: RecommendationJobCompiledOutputConfig;
}
export interface ModelLatencyThreshold {
  Percentile?: string;
  ValueInMilliseconds?: number;
}
export interface RecommendationJobStoppingConditions {
  MaxInvocations?: number;
  ModelLatencyThresholds?: ModelLatencyThreshold[];
}
export interface CreateInferenceRecommendationsJobRequest {
  JobName: string | undefined;
  JobType: RecommendationJobType | string | undefined;
  RoleArn: string | undefined;
  InputConfig: RecommendationJobInputConfig | undefined;
  JobDescription?: string;
  StoppingConditions?: RecommendationJobStoppingConditions;
  OutputConfig?: RecommendationJobOutputConfig;
  Tags?: Tag[];
}
export interface CreateInferenceRecommendationsJobResponse {
  JobArn: string | undefined;
}
export interface UiConfig {
  UiTemplateS3Uri?: string;
  HumanTaskUiArn?: string;
}
export interface HumanTaskConfig {
  WorkteamArn: string | undefined;
  UiConfig: UiConfig | undefined;
  PreHumanTaskLambdaArn: string | undefined;
  TaskKeywords?: string[];
  TaskTitle: string | undefined;
  TaskDescription: string | undefined;
  NumberOfHumanWorkersPerDataObject: number | undefined;
  TaskTimeLimitInSeconds: number | undefined;
  TaskAvailabilityLifetimeInSeconds?: number;
  MaxConcurrentTaskCount?: number;
  AnnotationConsolidationConfig: AnnotationConsolidationConfig | undefined;
  PublicWorkforceTaskPrice?: PublicWorkforceTaskPrice;
}
export interface LabelingJobDataAttributes {
  ContentClassifiers?: (ContentClassifier | string)[];
}
export interface LabelingJobS3DataSource {
  ManifestS3Uri: string | undefined;
}
export interface LabelingJobSnsDataSource {
  SnsTopicArn: string | undefined;
}
export interface LabelingJobDataSource {
  S3DataSource?: LabelingJobS3DataSource;
  SnsDataSource?: LabelingJobSnsDataSource;
}
export interface LabelingJobInputConfig {
  DataSource: LabelingJobDataSource | undefined;
  DataAttributes?: LabelingJobDataAttributes;
}
export interface LabelingJobResourceConfig {
  VolumeKmsKeyId?: string;
  VpcConfig?: VpcConfig;
}
export interface LabelingJobAlgorithmsConfig {
  LabelingJobAlgorithmSpecificationArn: string | undefined;
  InitialActiveLearningModelArn?: string;
  LabelingJobResourceConfig?: LabelingJobResourceConfig;
}
export interface LabelingJobOutputConfig {
  S3OutputPath: string | undefined;
  KmsKeyId?: string;
  SnsTopicArn?: string;
}
export interface LabelingJobStoppingConditions {
  MaxHumanLabeledObjectCount?: number;
  MaxPercentageOfInputDatasetLabeled?: number;
}
export interface CreateLabelingJobRequest {
  LabelingJobName: string | undefined;
  LabelAttributeName: string | undefined;
  InputConfig: LabelingJobInputConfig | undefined;
  OutputConfig: LabelingJobOutputConfig | undefined;
  RoleArn: string | undefined;
  LabelCategoryConfigS3Uri?: string;
  StoppingConditions?: LabelingJobStoppingConditions;
  LabelingJobAlgorithmsConfig?: LabelingJobAlgorithmsConfig;
  HumanTaskConfig: HumanTaskConfig | undefined;
  Tags?: Tag[];
}
export interface CreateLabelingJobResponse {
  LabelingJobArn: string | undefined;
}
export declare const InferenceExecutionMode: {
  readonly DIRECT: "Direct";
  readonly SERIAL: "Serial";
};
export type InferenceExecutionMode =
  (typeof InferenceExecutionMode)[keyof typeof InferenceExecutionMode];
export interface InferenceExecutionConfig {
  Mode: InferenceExecutionMode | string | undefined;
}
export interface CreateModelInput {
  ModelName: string | undefined;
  PrimaryContainer?: ContainerDefinition;
  Containers?: ContainerDefinition[];
  InferenceExecutionConfig?: InferenceExecutionConfig;
  ExecutionRoleArn: string | undefined;
  Tags?: Tag[];
  VpcConfig?: VpcConfig;
  EnableNetworkIsolation?: boolean;
}
export interface CreateModelOutput {
  ModelArn: string | undefined;
}
export interface ModelBiasAppSpecification {
  ImageUri: string | undefined;
  ConfigUri: string | undefined;
  Environment?: Record<string, string>;
}
export interface ModelBiasBaselineConfig {
  BaseliningJobName?: string;
  ConstraintsResource?: MonitoringConstraintsResource;
}
export interface MonitoringGroundTruthS3Input {
  S3Uri?: string;
}
export interface ModelBiasJobInput {
  EndpointInput?: EndpointInput;
  BatchTransformInput?: BatchTransformInput;
  GroundTruthS3Input: MonitoringGroundTruthS3Input | undefined;
}
export interface CreateModelBiasJobDefinitionRequest {
  JobDefinitionName: string | undefined;
  ModelBiasBaselineConfig?: ModelBiasBaselineConfig;
  ModelBiasAppSpecification: ModelBiasAppSpecification | undefined;
  ModelBiasJobInput: ModelBiasJobInput | undefined;
  ModelBiasJobOutputConfig: MonitoringOutputConfig | undefined;
  JobResources: MonitoringResources | undefined;
  NetworkConfig?: MonitoringNetworkConfig;
  RoleArn: string | undefined;
  StoppingCondition?: MonitoringStoppingCondition;
  Tags?: Tag[];
}
export interface CreateModelBiasJobDefinitionResponse {
  JobDefinitionArn: string | undefined;
}
export declare const ModelCardStatus: {
  readonly APPROVED: "Approved";
  readonly ARCHIVED: "Archived";
  readonly DRAFT: "Draft";
  readonly PENDINGREVIEW: "PendingReview";
};
export type ModelCardStatus =
  (typeof ModelCardStatus)[keyof typeof ModelCardStatus];
export interface ModelCardSecurityConfig {
  KmsKeyId?: string;
}
export interface CreateModelCardRequest {
  ModelCardName: string | undefined;
  SecurityConfig?: ModelCardSecurityConfig;
  Content: string | undefined;
  ModelCardStatus: ModelCardStatus | string | undefined;
  Tags?: Tag[];
}
export interface CreateModelCardResponse {
  ModelCardArn: string | undefined;
}
export interface ModelCardExportOutputConfig {
  S3OutputPath: string | undefined;
}
export interface CreateModelCardExportJobRequest {
  ModelCardName: string | undefined;
  ModelCardVersion?: number;
  ModelCardExportJobName: string | undefined;
  OutputConfig: ModelCardExportOutputConfig | undefined;
}
export interface CreateModelCardExportJobResponse {
  ModelCardExportJobArn: string | undefined;
}
export interface ModelExplainabilityAppSpecification {
  ImageUri: string | undefined;
  ConfigUri: string | undefined;
  Environment?: Record<string, string>;
}
export interface ModelExplainabilityBaselineConfig {
  BaseliningJobName?: string;
  ConstraintsResource?: MonitoringConstraintsResource;
}
export interface ModelExplainabilityJobInput {
  EndpointInput?: EndpointInput;
  BatchTransformInput?: BatchTransformInput;
}
export interface CreateModelExplainabilityJobDefinitionRequest {
  JobDefinitionName: string | undefined;
  ModelExplainabilityBaselineConfig?: ModelExplainabilityBaselineConfig;
  ModelExplainabilityAppSpecification:
    | ModelExplainabilityAppSpecification
    | undefined;
  ModelExplainabilityJobInput: ModelExplainabilityJobInput | undefined;
  ModelExplainabilityJobOutputConfig: MonitoringOutputConfig | undefined;
  JobResources: MonitoringResources | undefined;
  NetworkConfig?: MonitoringNetworkConfig;
  RoleArn: string | undefined;
  StoppingCondition?: MonitoringStoppingCondition;
  Tags?: Tag[];
}
export interface CreateModelExplainabilityJobDefinitionResponse {
  JobDefinitionArn: string | undefined;
}
export interface FileSource {
  ContentType?: string;
  ContentDigest?: string;
  S3Uri: string | undefined;
}
export interface DriftCheckBias {
  ConfigFile?: FileSource;
  PreTrainingConstraints?: MetricsSource;
  PostTrainingConstraints?: MetricsSource;
}
export interface DriftCheckExplainability {
  Constraints?: MetricsSource;
  ConfigFile?: FileSource;
}
export interface DriftCheckModelDataQuality {
  Statistics?: MetricsSource;
  Constraints?: MetricsSource;
}
export interface DriftCheckModelQuality {
  Statistics?: MetricsSource;
  Constraints?: MetricsSource;
}
export interface DriftCheckBaselines {
  Bias?: DriftCheckBias;
  Explainability?: DriftCheckExplainability;
  ModelQuality?: DriftCheckModelQuality;
  ModelDataQuality?: DriftCheckModelDataQuality;
}
export interface Explainability {
  Report?: MetricsSource;
}
export interface ModelDataQuality {
  Statistics?: MetricsSource;
  Constraints?: MetricsSource;
}
export interface ModelQuality {
  Statistics?: MetricsSource;
  Constraints?: MetricsSource;
}
export interface ModelMetrics {
  ModelQuality?: ModelQuality;
  ModelDataQuality?: ModelDataQuality;
  Bias?: Bias;
  Explainability?: Explainability;
}
export interface SourceAlgorithm {
  ModelDataUrl?: string;
  AlgorithmName: string | undefined;
}
export interface SourceAlgorithmSpecification {
  SourceAlgorithms: SourceAlgorithm[] | undefined;
}
export interface ModelPackageValidationProfile {
  ProfileName: string | undefined;
  TransformJobDefinition: TransformJobDefinition | undefined;
}
export interface ModelPackageValidationSpecification {
  ValidationRole: string | undefined;
  ValidationProfiles: ModelPackageValidationProfile[] | undefined;
}
export interface CreateModelPackageInput {
  ModelPackageName?: string;
  ModelPackageGroupName?: string;
  ModelPackageDescription?: string;
  InferenceSpecification?: InferenceSpecification;
  ValidationSpecification?: ModelPackageValidationSpecification;
  SourceAlgorithmSpecification?: SourceAlgorithmSpecification;
  CertifyForMarketplace?: boolean;
  Tags?: Tag[];
  ModelApprovalStatus?: ModelApprovalStatus | string;
  MetadataProperties?: MetadataProperties;
  ModelMetrics?: ModelMetrics;
  ClientToken?: string;
  CustomerMetadataProperties?: Record<string, string>;
  DriftCheckBaselines?: DriftCheckBaselines;
  Domain?: string;
  Task?: string;
  SamplePayloadUrl?: string;
  AdditionalInferenceSpecifications?: AdditionalInferenceSpecificationDefinition[];
}
export interface CreateModelPackageOutput {
  ModelPackageArn: string | undefined;
}
export interface CreateModelPackageGroupInput {
  ModelPackageGroupName: string | undefined;
  ModelPackageGroupDescription?: string;
  Tags?: Tag[];
}
export interface CreateModelPackageGroupOutput {
  ModelPackageGroupArn: string | undefined;
}
export declare const MonitoringProblemType: {
  readonly BINARY_CLASSIFICATION: "BinaryClassification";
  readonly MULTICLASS_CLASSIFICATION: "MulticlassClassification";
  readonly REGRESSION: "Regression";
};
export type MonitoringProblemType =
  (typeof MonitoringProblemType)[keyof typeof MonitoringProblemType];
export interface ModelQualityAppSpecification {
  ImageUri: string | undefined;
  ContainerEntrypoint?: string[];
  ContainerArguments?: string[];
  RecordPreprocessorSourceUri?: string;
  PostAnalyticsProcessorSourceUri?: string;
  ProblemType?: MonitoringProblemType | string;
  Environment?: Record<string, string>;
}
export interface ModelQualityBaselineConfig {
  BaseliningJobName?: string;
  ConstraintsResource?: MonitoringConstraintsResource;
}
export interface ModelQualityJobInput {
  EndpointInput?: EndpointInput;
  BatchTransformInput?: BatchTransformInput;
  GroundTruthS3Input: MonitoringGroundTruthS3Input | undefined;
}
export interface CreateModelQualityJobDefinitionRequest {
  JobDefinitionName: string | undefined;
  ModelQualityBaselineConfig?: ModelQualityBaselineConfig;
  ModelQualityAppSpecification: ModelQualityAppSpecification | undefined;
  ModelQualityJobInput: ModelQualityJobInput | undefined;
  ModelQualityJobOutputConfig: MonitoringOutputConfig | undefined;
  JobResources: MonitoringResources | undefined;
  NetworkConfig?: MonitoringNetworkConfig;
  RoleArn: string | undefined;
  StoppingCondition?: MonitoringStoppingCondition;
  Tags?: Tag[];
}
export interface CreateModelQualityJobDefinitionResponse {
  JobDefinitionArn: string | undefined;
}
export interface MonitoringBaselineConfig {
  BaseliningJobName?: string;
  ConstraintsResource?: MonitoringConstraintsResource;
  StatisticsResource?: MonitoringStatisticsResource;
}
export interface MonitoringAppSpecification {
  ImageUri: string | undefined;
  ContainerEntrypoint?: string[];
  ContainerArguments?: string[];
  RecordPreprocessorSourceUri?: string;
  PostAnalyticsProcessorSourceUri?: string;
}
export interface MonitoringInput {
  EndpointInput?: EndpointInput;
  BatchTransformInput?: BatchTransformInput;
}
export interface NetworkConfig {
  EnableInterContainerTrafficEncryption?: boolean;
  EnableNetworkIsolation?: boolean;
  VpcConfig?: VpcConfig;
}
export interface MonitoringJobDefinition {
  BaselineConfig?: MonitoringBaselineConfig;
  MonitoringInputs: MonitoringInput[] | undefined;
  MonitoringOutputConfig: MonitoringOutputConfig | undefined;
  MonitoringResources: MonitoringResources | undefined;
  MonitoringAppSpecification: MonitoringAppSpecification | undefined;
  StoppingCondition?: MonitoringStoppingCondition;
  Environment?: Record<string, string>;
  NetworkConfig?: NetworkConfig;
  RoleArn: string | undefined;
}
export declare const MonitoringType: {
  readonly DATA_QUALITY: "DataQuality";
  readonly MODEL_BIAS: "ModelBias";
  readonly MODEL_EXPLAINABILITY: "ModelExplainability";
  readonly MODEL_QUALITY: "ModelQuality";
};
export type MonitoringType =
  (typeof MonitoringType)[keyof typeof MonitoringType];
export interface ScheduleConfig {
  ScheduleExpression: string | undefined;
}
export interface MonitoringScheduleConfig {
  ScheduleConfig?: ScheduleConfig;
  MonitoringJobDefinition?: MonitoringJobDefinition;
  MonitoringJobDefinitionName?: string;
  MonitoringType?: MonitoringType | string;
}
export interface CreateMonitoringScheduleRequest {
  MonitoringScheduleName: string | undefined;
  MonitoringScheduleConfig: MonitoringScheduleConfig | undefined;
  Tags?: Tag[];
}
export interface CreateMonitoringScheduleResponse {
  MonitoringScheduleArn: string | undefined;
}
export declare const NotebookInstanceAcceleratorType: {
  readonly ML_EIA1_LARGE: "ml.eia1.large";
  readonly ML_EIA1_MEDIUM: "ml.eia1.medium";
  readonly ML_EIA1_XLARGE: "ml.eia1.xlarge";
  readonly ML_EIA2_LARGE: "ml.eia2.large";
  readonly ML_EIA2_MEDIUM: "ml.eia2.medium";
  readonly ML_EIA2_XLARGE: "ml.eia2.xlarge";
};
export type NotebookInstanceAcceleratorType =
  (typeof NotebookInstanceAcceleratorType)[keyof typeof NotebookInstanceAcceleratorType];
export declare const DirectInternetAccess: {
  readonly DISABLED: "Disabled";
  readonly ENABLED: "Enabled";
};
export type DirectInternetAccess =
  (typeof DirectInternetAccess)[keyof typeof DirectInternetAccess];
export interface InstanceMetadataServiceConfiguration {
  MinimumInstanceMetadataServiceVersion: string | undefined;
}
export declare const RootAccess: {
  readonly DISABLED: "Disabled";
  readonly ENABLED: "Enabled";
};
export type RootAccess = (typeof RootAccess)[keyof typeof RootAccess];
export interface CreateNotebookInstanceInput {
  NotebookInstanceName: string | undefined;
  InstanceType: _InstanceType | string | undefined;
  SubnetId?: string;
  SecurityGroupIds?: string[];
  RoleArn: string | undefined;
  KmsKeyId?: string;
  Tags?: Tag[];
  LifecycleConfigName?: string;
  DirectInternetAccess?: DirectInternetAccess | string;
  VolumeSizeInGB?: number;
  AcceleratorTypes?: (NotebookInstanceAcceleratorType | string)[];
  DefaultCodeRepository?: string;
  AdditionalCodeRepositories?: string[];
  RootAccess?: RootAccess | string;
  PlatformIdentifier?: string;
  InstanceMetadataServiceConfiguration?: InstanceMetadataServiceConfiguration;
}
export interface CreateNotebookInstanceOutput {
  NotebookInstanceArn?: string;
}
export interface NotebookInstanceLifecycleHook {
  Content?: string;
}
export interface CreateNotebookInstanceLifecycleConfigInput {
  NotebookInstanceLifecycleConfigName: string | undefined;
  OnCreate?: NotebookInstanceLifecycleHook[];
  OnStart?: NotebookInstanceLifecycleHook[];
}
export interface CreateNotebookInstanceLifecycleConfigOutput {
  NotebookInstanceLifecycleConfigArn?: string;
}
export interface ParallelismConfiguration {
  MaxParallelExecutionSteps: number | undefined;
}
export interface PipelineDefinitionS3Location {
  Bucket: string | undefined;
  ObjectKey: string | undefined;
  VersionId?: string;
}
export interface CreatePipelineRequest {
  PipelineName: string | undefined;
  PipelineDisplayName?: string;
  PipelineDefinition?: string;
  PipelineDefinitionS3Location?: PipelineDefinitionS3Location;
  PipelineDescription?: string;
  ClientRequestToken?: string;
  RoleArn: string | undefined;
  Tags?: Tag[];
  ParallelismConfiguration?: ParallelismConfiguration;
}
export interface CreatePipelineResponse {
  PipelineArn?: string;
}
export interface CreatePresignedDomainUrlRequest {
  DomainId: string | undefined;
  UserProfileName: string | undefined;
  SessionExpirationDurationInSeconds?: number;
  ExpiresInSeconds?: number;
  SpaceName?: string;
}
export interface CreatePresignedDomainUrlResponse {
  AuthorizedUrl?: string;
}
export interface CreatePresignedNotebookInstanceUrlInput {
  NotebookInstanceName: string | undefined;
  SessionExpirationDurationInSeconds?: number;
}
export interface CreatePresignedNotebookInstanceUrlOutput {
  AuthorizedUrl?: string;
}
export interface ExperimentConfig {
  ExperimentName?: string;
  TrialName?: string;
  TrialComponentDisplayName?: string;
  RunName?: string;
}
export declare const DataDistributionType: {
  readonly FULLYREPLICATED: "FullyReplicated";
  readonly SHARDEDBYS3KEY: "ShardedByS3Key";
};
export type DataDistributionType =
  (typeof DataDistributionType)[keyof typeof DataDistributionType];
export declare const InputMode: {
  readonly FILE: "File";
  readonly PIPE: "Pipe";
};
export type InputMode = (typeof InputMode)[keyof typeof InputMode];
export declare const RedshiftResultCompressionType: {
  readonly BZIP2: "BZIP2";
  readonly GZIP: "GZIP";
  readonly NONE: "None";
  readonly SNAPPY: "SNAPPY";
  readonly ZSTD: "ZSTD";
};
export type RedshiftResultCompressionType =
  (typeof RedshiftResultCompressionType)[keyof typeof RedshiftResultCompressionType];
export declare const RedshiftResultFormat: {
  readonly CSV: "CSV";
  readonly PARQUET: "PARQUET";
};
export type RedshiftResultFormat =
  (typeof RedshiftResultFormat)[keyof typeof RedshiftResultFormat];
export interface RedshiftDatasetDefinition {
  ClusterId: string | undefined;
  Database: string | undefined;
  DbUser: string | undefined;
  QueryString: string | undefined;
  ClusterRoleArn: string | undefined;
  OutputS3Uri: string | undefined;
  KmsKeyId?: string;
  OutputFormat: RedshiftResultFormat | string | undefined;
  OutputCompression?: RedshiftResultCompressionType | string;
}
export interface DatasetDefinition {
  AthenaDatasetDefinition?: AthenaDatasetDefinition;
  RedshiftDatasetDefinition?: RedshiftDatasetDefinition;
  LocalPath?: string;
  DataDistributionType?: DataDistributionType | string;
  InputMode?: InputMode | string;
}
export declare const ProcessingS3CompressionType: {
  readonly GZIP: "Gzip";
  readonly NONE: "None";
};
export type ProcessingS3CompressionType =
  (typeof ProcessingS3CompressionType)[keyof typeof ProcessingS3CompressionType];
export declare const ProcessingS3DataType: {
  readonly MANIFEST_FILE: "ManifestFile";
  readonly S3_PREFIX: "S3Prefix";
};
export type ProcessingS3DataType =
  (typeof ProcessingS3DataType)[keyof typeof ProcessingS3DataType];
export interface ProcessingS3Input {
  S3Uri: string | undefined;
  LocalPath?: string;
  S3DataType: ProcessingS3DataType | string | undefined;
  S3InputMode?: ProcessingS3InputMode | string;
  S3DataDistributionType?: ProcessingS3DataDistributionType | string;
  S3CompressionType?: ProcessingS3CompressionType | string;
}
export interface ProcessingInput {
  InputName: string | undefined;
  AppManaged?: boolean;
  S3Input?: ProcessingS3Input;
  DatasetDefinition?: DatasetDefinition;
}
export interface ProcessingFeatureStoreOutput {
  FeatureGroupName: string | undefined;
}
export interface ProcessingS3Output {
  S3Uri: string | undefined;
  LocalPath: string | undefined;
  S3UploadMode: ProcessingS3UploadMode | string | undefined;
}
export interface ProcessingOutput {
  OutputName: string | undefined;
  S3Output?: ProcessingS3Output;
  FeatureStoreOutput?: ProcessingFeatureStoreOutput;
  AppManaged?: boolean;
}
export interface ProcessingOutputConfig {
  Outputs: ProcessingOutput[] | undefined;
  KmsKeyId?: string;
}
export interface ProcessingClusterConfig {
  InstanceCount: number | undefined;
  InstanceType: ProcessingInstanceType | string | undefined;
  VolumeSizeInGB: number | undefined;
  VolumeKmsKeyId?: string;
}
export interface ProcessingResources {
  ClusterConfig: ProcessingClusterConfig | undefined;
}
export interface ProcessingStoppingCondition {
  MaxRuntimeInSeconds: number | undefined;
}
export interface CreateProcessingJobRequest {
  ProcessingInputs?: ProcessingInput[];
  ProcessingOutputConfig?: ProcessingOutputConfig;
  ProcessingJobName: string | undefined;
  ProcessingResources: ProcessingResources | undefined;
  StoppingCondition?: ProcessingStoppingCondition;
  AppSpecification: AppSpecification | undefined;
  Environment?: Record<string, string>;
  NetworkConfig?: NetworkConfig;
  RoleArn: string | undefined;
  Tags?: Tag[];
  ExperimentConfig?: ExperimentConfig;
}
export interface CreateProcessingJobResponse {
  ProcessingJobArn: string | undefined;
}
export interface ProvisioningParameter {
  Key?: string;
  Value?: string;
}
export interface ServiceCatalogProvisioningDetails {
  ProductId: string | undefined;
  ProvisioningArtifactId?: string;
  PathId?: string;
  ProvisioningParameters?: ProvisioningParameter[];
}
export interface CreateProjectInput {
  ProjectName: string | undefined;
  ProjectDescription?: string;
  ServiceCatalogProvisioningDetails:
    | ServiceCatalogProvisioningDetails
    | undefined;
  Tags?: Tag[];
}
export interface CreateProjectOutput {
  ProjectArn: string | undefined;
  ProjectId: string | undefined;
}
export interface SpaceSettings {
  JupyterServerAppSettings?: JupyterServerAppSettings;
  KernelGatewayAppSettings?: KernelGatewayAppSettings;
}
export interface CreateSpaceRequest {
  DomainId: string | undefined;
  SpaceName: string | undefined;
  Tags?: Tag[];
  SpaceSettings?: SpaceSettings;
}
export interface CreateSpaceResponse {
  SpaceArn?: string;
}
export declare const StudioLifecycleConfigAppType: {
  readonly JupyterServer: "JupyterServer";
  readonly KernelGateway: "KernelGateway";
};
export type StudioLifecycleConfigAppType =
  (typeof StudioLifecycleConfigAppType)[keyof typeof StudioLifecycleConfigAppType];
export interface CreateStudioLifecycleConfigRequest {
  StudioLifecycleConfigName: string | undefined;
  StudioLifecycleConfigContent: string | undefined;
  StudioLifecycleConfigAppType:
    | StudioLifecycleConfigAppType
    | string
    | undefined;
  Tags?: Tag[];
}
export interface CreateStudioLifecycleConfigResponse {
  StudioLifecycleConfigArn?: string;
}
export interface DebugHookConfig {
  LocalPath?: string;
  S3OutputPath: string | undefined;
  HookParameters?: Record<string, string>;
  CollectionConfigurations?: CollectionConfiguration[];
}
export interface DebugRuleConfiguration {
  RuleConfigurationName: string | undefined;
  LocalPath?: string;
  S3OutputPath?: string;
  RuleEvaluatorImage: string | undefined;
  InstanceType?: ProcessingInstanceType | string;
  VolumeSizeInGB?: number;
  RuleParameters?: Record<string, string>;
}
export interface ProfilerConfig {
  S3OutputPath?: string;
  ProfilingIntervalInMilliseconds?: number;
  ProfilingParameters?: Record<string, string>;
  DisableProfiler?: boolean;
}
export interface ProfilerRuleConfiguration {
  RuleConfigurationName: string | undefined;
  LocalPath?: string;
  S3OutputPath?: string;
  RuleEvaluatorImage: string | undefined;
  InstanceType?: ProcessingInstanceType | string;
  VolumeSizeInGB?: number;
  RuleParameters?: Record<string, string>;
}
export interface TensorBoardOutputConfig {
  LocalPath?: string;
  S3OutputPath: string | undefined;
}
export interface CreateTrainingJobRequest {
  TrainingJobName: string | undefined;
  HyperParameters?: Record<string, string>;
  AlgorithmSpecification: AlgorithmSpecification | undefined;
  RoleArn: string | undefined;
  InputDataConfig?: Channel[];
  OutputDataConfig: OutputDataConfig | undefined;
  ResourceConfig: ResourceConfig | undefined;
  VpcConfig?: VpcConfig;
  StoppingCondition: StoppingCondition | undefined;
  Tags?: Tag[];
  EnableNetworkIsolation?: boolean;
  EnableInterContainerTrafficEncryption?: boolean;
  EnableManagedSpotTraining?: boolean;
  CheckpointConfig?: CheckpointConfig;
  DebugHookConfig?: DebugHookConfig;
  DebugRuleConfigurations?: DebugRuleConfiguration[];
  TensorBoardOutputConfig?: TensorBoardOutputConfig;
  ExperimentConfig?: ExperimentConfig;
  ProfilerConfig?: ProfilerConfig;
  ProfilerRuleConfigurations?: ProfilerRuleConfiguration[];
  Environment?: Record<string, string>;
  RetryStrategy?: RetryStrategy;
}
export interface CreateTrainingJobResponse {
  TrainingJobArn: string | undefined;
}
export declare const JoinSource: {
  readonly INPUT: "Input";
  readonly NONE: "None";
};
export type JoinSource = (typeof JoinSource)[keyof typeof JoinSource];
export interface DataProcessing {
  InputFilter?: string;
  OutputFilter?: string;
  JoinSource?: JoinSource | string;
}
export interface ModelClientConfig {
  InvocationsTimeoutInSeconds?: number;
  InvocationsMaxRetries?: number;
}
export interface CreateTransformJobRequest {
  TransformJobName: string | undefined;
  ModelName: string | undefined;
  MaxConcurrentTransforms?: number;
  ModelClientConfig?: ModelClientConfig;
  MaxPayloadInMB?: number;
  BatchStrategy?: BatchStrategy | string;
  Environment?: Record<string, string>;
  TransformInput: TransformInput | undefined;
  TransformOutput: TransformOutput | undefined;
  DataCaptureConfig?: BatchDataCaptureConfig;
  TransformResources: TransformResources | undefined;
  DataProcessing?: DataProcessing;
  Tags?: Tag[];
  ExperimentConfig?: ExperimentConfig;
}
export interface CreateTransformJobResponse {
  TransformJobArn: string | undefined;
}
export interface CreateTrialRequest {
  TrialName: string | undefined;
  DisplayName?: string;
  ExperimentName: string | undefined;
  MetadataProperties?: MetadataProperties;
  Tags?: Tag[];
}
export interface CreateTrialResponse {
  TrialArn?: string;
}
export interface TrialComponentArtifact {
  MediaType?: string;
  Value: string | undefined;
}
export type TrialComponentParameterValue =
  | TrialComponentParameterValue.NumberValueMember
  | TrialComponentParameterValue.StringValueMember
  | TrialComponentParameterValue.$UnknownMember;
export declare namespace TrialComponentParameterValue {
  interface StringValueMember {
    StringValue: string;
    NumberValue?: never;
    $unknown?: never;
  }
  interface NumberValueMember {
    StringValue?: never;
    NumberValue: number;
    $unknown?: never;
  }
  interface $UnknownMember {
    StringValue?: never;
    NumberValue?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    StringValue: (value: string) => T;
    NumberValue: (value: number) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: TrialComponentParameterValue,
    visitor: Visitor<T>
  ) => T;
}
export declare const TrialComponentPrimaryStatus: {
  readonly COMPLETED: "Completed";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
};
export type TrialComponentPrimaryStatus =
  (typeof TrialComponentPrimaryStatus)[keyof typeof TrialComponentPrimaryStatus];
export interface TrialComponentStatus {
  PrimaryStatus?: TrialComponentPrimaryStatus | string;
  Message?: string;
}
export interface CreateTrialComponentRequest {
  TrialComponentName: string | undefined;
  DisplayName?: string;
  Status?: TrialComponentStatus;
  StartTime?: Date;
  EndTime?: Date;
  Parameters?: Record<string, TrialComponentParameterValue>;
  InputArtifacts?: Record<string, TrialComponentArtifact>;
  OutputArtifacts?: Record<string, TrialComponentArtifact>;
  MetadataProperties?: MetadataProperties;
  Tags?: Tag[];
}
export interface CreateTrialComponentResponse {
  TrialComponentArn?: string;
}
export interface CreateUserProfileRequest {
  DomainId: string | undefined;
  UserProfileName: string | undefined;
  SingleSignOnUserIdentifier?: string;
  SingleSignOnUserValue?: string;
  Tags?: Tag[];
  UserSettings?: UserSettings;
}
export interface CreateUserProfileResponse {
  UserProfileArn?: string;
}
export interface OidcConfig {
  ClientId: string | undefined;
  ClientSecret: string | undefined;
  Issuer: string | undefined;
  AuthorizationEndpoint: string | undefined;
  TokenEndpoint: string | undefined;
  UserInfoEndpoint: string | undefined;
  LogoutEndpoint: string | undefined;
  JwksUri: string | undefined;
}
export interface SourceIpConfig {
  Cidrs: string[] | undefined;
}
export interface WorkforceVpcConfigRequest {
  VpcId?: string;
  SecurityGroupIds?: string[];
  Subnets?: string[];
}
export interface CreateWorkforceRequest {
  CognitoConfig?: CognitoConfig;
  OidcConfig?: OidcConfig;
  SourceIpConfig?: SourceIpConfig;
  WorkforceName: string | undefined;
  Tags?: Tag[];
  WorkforceVpcConfig?: WorkforceVpcConfigRequest;
}
export interface CreateWorkforceResponse {
  WorkforceArn: string | undefined;
}
export interface OidcMemberDefinition {
  Groups: string[] | undefined;
}
export interface MemberDefinition {
  CognitoMemberDefinition?: CognitoMemberDefinition;
  OidcMemberDefinition?: OidcMemberDefinition;
}
export interface NotificationConfiguration {
  NotificationTopicArn?: string;
}
export interface CreateWorkteamRequest {
  WorkteamName: string | undefined;
  WorkforceName?: string;
  MemberDefinitions: MemberDefinition[] | undefined;
  Description: string | undefined;
  NotificationConfiguration?: NotificationConfiguration;
  Tags?: Tag[];
}
export interface CreateWorkteamResponse {
  WorkteamArn?: string;
}
export interface DataCaptureConfigSummary {
  EnableCapture: boolean | undefined;
  CaptureStatus: CaptureStatus | string | undefined;
  CurrentSamplingPercentage: number | undefined;
  DestinationS3Uri: string | undefined;
  KmsKeyId: string | undefined;
}
export declare const RuleEvaluationStatus: {
  readonly ERROR: "Error";
  readonly IN_PROGRESS: "InProgress";
  readonly ISSUES_FOUND: "IssuesFound";
  readonly NO_ISSUES_FOUND: "NoIssuesFound";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
};
export type RuleEvaluationStatus =
  (typeof RuleEvaluationStatus)[keyof typeof RuleEvaluationStatus];
export interface DebugRuleEvaluationStatus {
  RuleConfigurationName?: string;
  RuleEvaluationJobArn?: string;
  RuleEvaluationStatus?: RuleEvaluationStatus | string;
  StatusDetails?: string;
  LastModifiedTime?: Date;
}
export interface DeleteActionRequest {
  ActionName: string | undefined;
}
export interface DeleteActionResponse {
  ActionArn?: string;
}
export interface DeleteAlgorithmInput {
  AlgorithmName: string | undefined;
}
export interface DeleteAppRequest {
  DomainId: string | undefined;
  UserProfileName?: string;
  AppType: AppType | string | undefined;
  AppName: string | undefined;
  SpaceName?: string;
}
export interface DeleteAppImageConfigRequest {
  AppImageConfigName: string | undefined;
}
export interface DeleteArtifactRequest {
  ArtifactArn?: string;
  Source?: ArtifactSource;
}
export interface DeleteArtifactResponse {
  ArtifactArn?: string;
}
export interface DeleteAssociationRequest {
  SourceArn: string | undefined;
  DestinationArn: string | undefined;
}
export interface DeleteAssociationResponse {
  SourceArn?: string;
  DestinationArn?: string;
}
export interface DeleteCodeRepositoryInput {
  CodeRepositoryName: string | undefined;
}
export interface DeleteContextRequest {
  ContextName: string | undefined;
}
export interface DeleteContextResponse {
  ContextArn?: string;
}
export interface DeleteDataQualityJobDefinitionRequest {
  JobDefinitionName: string | undefined;
}
export interface DeleteDeviceFleetRequest {
  DeviceFleetName: string | undefined;
}
export declare const RetentionType: {
  readonly Delete: "Delete";
  readonly Retain: "Retain";
};
export type RetentionType = (typeof RetentionType)[keyof typeof RetentionType];
export interface RetentionPolicy {
  HomeEfsFileSystem?: RetentionType | string;
}
export interface DeleteDomainRequest {
  DomainId: string | undefined;
  RetentionPolicy?: RetentionPolicy;
}
export interface DeleteEdgeDeploymentPlanRequest {
  EdgeDeploymentPlanName: string | undefined;
}
export interface DeleteEdgeDeploymentStageRequest {
  EdgeDeploymentPlanName: string | undefined;
  StageName: string | undefined;
}
export interface DeleteEndpointInput {
  EndpointName: string | undefined;
}
export interface DeleteEndpointConfigInput {
  EndpointConfigName: string | undefined;
}
export interface DeleteExperimentRequest {
  ExperimentName: string | undefined;
}
export interface DeleteExperimentResponse {
  ExperimentArn?: string;
}
export interface DeleteFeatureGroupRequest {
  FeatureGroupName: string | undefined;
}
export interface DeleteFlowDefinitionRequest {
  FlowDefinitionName: string | undefined;
}
export interface DeleteFlowDefinitionResponse {}
export interface DeleteHubRequest {
  HubName: string | undefined;
}
export declare const HubContentType: {
  readonly MODEL: "Model";
  readonly NOTEBOOK: "Notebook";
};
export type HubContentType =
  (typeof HubContentType)[keyof typeof HubContentType];
export interface DeleteHubContentRequest {
  HubName: string | undefined;
  HubContentType: HubContentType | string | undefined;
  HubContentName: string | undefined;
  HubContentVersion: string | undefined;
}
export interface DeleteHumanTaskUiRequest {
  HumanTaskUiName: string | undefined;
}
export interface DeleteHumanTaskUiResponse {}
export interface DeleteImageRequest {
  ImageName: string | undefined;
}
export interface DeleteImageResponse {}
export interface DeleteImageVersionRequest {
  ImageName: string | undefined;
  Version?: number;
  Alias?: string;
}
export interface DeleteImageVersionResponse {}
export interface DeleteInferenceExperimentRequest {
  Name: string | undefined;
}
export interface DeleteInferenceExperimentResponse {
  InferenceExperimentArn: string | undefined;
}
export interface DeleteModelInput {
  ModelName: string | undefined;
}
export interface DeleteModelBiasJobDefinitionRequest {
  JobDefinitionName: string | undefined;
}
export interface DeleteModelCardRequest {
  ModelCardName: string | undefined;
}
export interface DeleteModelExplainabilityJobDefinitionRequest {
  JobDefinitionName: string | undefined;
}
export interface DeleteModelPackageInput {
  ModelPackageName: string | undefined;
}
export interface DeleteModelPackageGroupInput {
  ModelPackageGroupName: string | undefined;
}
export interface DeleteModelPackageGroupPolicyInput {
  ModelPackageGroupName: string | undefined;
}
export interface DeleteModelQualityJobDefinitionRequest {
  JobDefinitionName: string | undefined;
}
export interface DeleteMonitoringScheduleRequest {
  MonitoringScheduleName: string | undefined;
}
export interface DeleteNotebookInstanceInput {
  NotebookInstanceName: string | undefined;
}
export interface DeleteNotebookInstanceLifecycleConfigInput {
  NotebookInstanceLifecycleConfigName: string | undefined;
}
export interface DeletePipelineRequest {
  PipelineName: string | undefined;
  ClientRequestToken?: string;
}
export interface DeletePipelineResponse {
  PipelineArn?: string;
}
export interface DeleteProjectInput {
  ProjectName: string | undefined;
}
export interface DeleteSpaceRequest {
  DomainId: string | undefined;
  SpaceName: string | undefined;
}
export interface DeleteStudioLifecycleConfigRequest {
  StudioLifecycleConfigName: string | undefined;
}
export interface DeleteTagsInput {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export declare const CreateModelCardRequestFilterSensitiveLog: (
  obj: CreateModelCardRequest
) => any;
export declare const OidcConfigFilterSensitiveLog: (obj: OidcConfig) => any;
export declare const CreateWorkforceRequestFilterSensitiveLog: (
  obj: CreateWorkforceRequest
) => any;
